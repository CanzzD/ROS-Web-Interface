{"ast":null,"code":"var _jsxFileName = \"/Users/canozdemir/Downloads/web-based-navigation-rosbridge/ROS-WEB-INTERFACE-BIRFEN-INTERNSHIP/src/components/Teleoperation.jsx\";\nimport React, { Component } from \"react\";\nimport { Joystick } from \"react-joystick-component\";\nimport Config from '../scripts/config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Teleoperation extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null\n    };\n    this.init_connection();\n    this.handleMove = this.handleMove.bind(this);\n    this.handleStop = this.handleStop.bind(this);\n  }\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in Teleoperation Companenet!\");\n      console.log(this.state.ros);\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection closed!\");\n      this.setState({\n        connected: false\n      });\n\n      //try to reconnect every 3 seconds \n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  // methods\n  handleMove(event) {\n    console.log(\"hanle move\");\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\"\n    });\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: event.y / 50,\n        y: 0,\n        z: 0\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: -event.x / 50\n      }\n    });\n    cmd_vel.publish(twist);\n  }\n  handleStop(event) {\n    console.log(\"hanle stop\");\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\"\n    });\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: 0\n      }\n    });\n    cmd_vel.publish(twist);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Joystick, {\n        size: 100,\n        baseColor: \"black\",\n        stickColor: \"orange\",\n        move: this.handleMove,\n        stop: this.handleStop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 16\n    }, this);\n  }\n}\nexport default Teleoperation;","map":{"version":3,"names":["React","Component","Joystick","Config","jsxDEV","_jsxDEV","Teleoperation","constructor","state","ros","init_connection","handleMove","bind","handleStop","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","event","cmd_vel","Topic","name","CMD_VEL_TOPIC","messageType","twist","Message","linear","x","y","z","angular","publish","render","children","size","baseColor","stickColor","move","stop","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/canozdemir/Downloads/web-based-navigation-rosbridge/ROS-WEB-INTERFACE-BIRFEN-INTERNSHIP/src/components/Teleoperation.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport { Joystick } from \"react-joystick-component\";\nimport Config from '../scripts/config';\n\n\nclass Teleoperation extends Component {\n\n    state = { ros: null };\n\n    constructor(){\n        super();\n        this.init_connection();\n        this.handleMove = this.handleMove.bind(this);\n        this.handleStop = this.handleStop.bind(this);\n    }\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n        \n        this.state.ros.on(\"connection\", () => {\n            console.log(\"connection established in Teleoperation Companenet!\");\n            console.log(this.state.ros);\n            this.setState({ connected: true});\n\n        });\n\n        this.state.ros.on(\"close\", () => {\n            console.log(\"connection closed!\");\n            this.setState({ connected: false});\n\n            //try to reconnect every 3 seconds \n            setTimeout(() => {\n                try{\n                    this.state.ros.connect(\"ws://\"+\n                    Config.ROSBRIDGE_SERVER_IP+\":\"+\n                    Config.ROSBRIDGE_SERVER_PORT+\"\"\n                    );\n                }catch (error){\n                    console.log(\"connection problem\");\n                }\n            }, Config.RECONNECTION_TIMER);\n\n        });\n        try{\n            this.state.ros.connect(\"ws://\"+\n            Config.ROSBRIDGE_SERVER_IP+\":\"+\n            Config.ROSBRIDGE_SERVER_PORT+\"\"\n            );\n        }catch (error){\n            console.log(\"connection problem\");\n        }\n    }\n\n    // methods\n    handleMove(event) {\n        console.log(\"hanle move\");\n        var cmd_vel = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.CMD_VEL_TOPIC,\n            messageType: \"geometry_msgs/Twist\",\n        });\n\n        var twist = new window.ROSLIB.Message({\n            linear:{\n                x: event.y / 50,\n                y: 0,\n                z: 0,\n            },\n            angular:{\n                x: 0,\n                y: 0,\n                z: -event.x / 50,\n            },\n        });\n\n        cmd_vel.publish(twist)\n    }\n\n    handleStop(event) {\n        console.log(\"hanle stop\");\n        var cmd_vel = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.CMD_VEL_TOPIC,\n            messageType: \"geometry_msgs/Twist\",\n        });\n\n        var twist = new window.ROSLIB.Message({\n            linear:{\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n            angular:{\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n        });\n\n        cmd_vel.publish(twist)\n    }\n\n    render() {\n        return <div>\n            <Joystick\n                size={100}\n                baseColor=\"black\"\n                stickColor=\"orange\"\n                move={this.handleMove}\n                stop={this.handleStop}\n            ></Joystick>\n        </div>;\n    }\n}\n\nexport default Teleoperation;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
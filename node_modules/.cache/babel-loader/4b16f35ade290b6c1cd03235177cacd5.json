{"ast":null,"code":"import 'latest-createjs';\nimport ROSLIB from 'roslib';\nimport EventEmitter2 from 'eventemitter2';\nimport createjs from 'createjs-module';\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar ROS2D = ROS2D || {\n  REVISION: \"0.9.0\"\n};\n\n// convert the given global Stage coordinates to ROS coordinates\ncreatejs.Stage.prototype.globalToRos = function (x, y) {\n  var rosX = (x - this.x) / this.scaleX;\n  var rosY = (this.y - y) / this.scaleY;\n  return new ROSLIB.Vector3({\n    x: rosX,\n    y: rosY\n  });\n};\n\n// convert the given ROS coordinates to global Stage coordinates\ncreatejs.Stage.prototype.rosToGlobal = function (pos) {\n  var x = pos.x * this.scaleX + this.x;\n  var y = pos.y * this.scaleY + this.y;\n  return {\n    x: x,\n    y: y\n  };\n};\n\n// convert a ROS quaternion to theta in degrees\ncreatejs.Stage.prototype.rosQuaternionToGlobalTheta = function (orientation) {\n  // See https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Rotation_matrices\n  // here we use [x y z] = R * [1 0 0]\n  var q0 = orientation.w;\n  var q1 = orientation.x;\n  var q2 = orientation.y;\n  var q3 = orientation.z;\n  // Canvas rotation is clock wise and in degrees\n  return -Math.atan2(2 * (q0 * q3 + q1 * q2), 1 - 2 * (q2 * q2 + q3 * q3)) * 180.0 / Math.PI;\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid map meta data message\n *   * image - the image URL to load\n */\nROS2D.ImageMap = function (options) {\n  options = options || {};\n  var message = options.message;\n  var image = options.image;\n\n  // save the metadata we need\n  this.pose = new ROSLIB.Pose({\n    position: message.origin.position,\n    orientation: message.origin.orientation\n  });\n\n  // set the size\n  this.width = message.width;\n  this.height = message.height;\n\n  // create the bitmap\n  createjs.Bitmap.call(this, image);\n  // change Y direction\n  this.y = -this.height * message.resolution;\n\n  // scale the image\n  this.scaleX = message.resolution;\n  this.scaleY = message.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY;\n\n  // set the pose\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n};\nROS2D.ImageMap.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the image URL to load\n *   * rootObject (optional) - the root object to add this marker to\n */\nROS2D.ImageMapClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || \"/map_metadata\";\n  this.image = options.image;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // create an empty shape to start with\n  this.currentImage = new createjs.Shape();\n\n  // subscribe to the topic\n  var rosTopic = new ROSLIB.Topic({\n    ros: ros,\n    name: topic,\n    messageType: \"nav_msgs/MapMetaData\"\n  });\n  rosTopic.subscribe(function (message) {\n    // we only need this once\n    rosTopic.unsubscribe();\n\n    // create the image\n    that.currentImage = new ROS2D.ImageMap({\n      message: message,\n      image: that.image\n    });\n    that.rootObject.addChild(that.currentImage);\n    // work-around for a bug in easeljs -- needs a second object to render correctly\n    that.rootObject.addChild(new ROS2D.Grid({\n      size: 1\n    }));\n    that.emit(\"change\");\n  });\n};\nROS2D.ImageMapClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An OccupancyGrid can convert a ROS occupancy grid message into a createjs Bitmap object.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid message\n */\nROS2D.OccupancyGrid = function (options) {\n  options = options || {};\n  var message = options.message;\n  console.log(message);\n  // internal drawing canvas\n  var canvas = document.createElement(\"canvas\");\n  var context = canvas.getContext(\"2d\");\n\n  // save the metadata we need\n  this.pose = new ROSLIB.Pose({\n    position: message.info.origin.position,\n    orientation: message.info.origin.orientation\n  });\n\n  // set the size\n  this.width = message.info.width;\n  this.height = message.info.height;\n  canvas.width = this.width;\n  canvas.height = this.height;\n  var imageData = context.createImageData(this.width, this.height);\n  for (var row = 0; row < this.height; row++) {\n    for (var col = 0; col < this.width; col++) {\n      // determine the index into the map data\n      var mapI = col + (this.height - row - 1) * this.width;\n      // determine the value\n      var data = message.data[mapI];\n      var val;\n      if (data === 100) {\n        val = 0;\n      } else if (data === 0) {\n        val = 255;\n      } else {\n        val = 127;\n      }\n\n      // determine the index into the image data array\n      var i = (col + row * this.width) * 4;\n      // r\n      imageData.data[i] = val;\n      // g\n      imageData.data[++i] = val;\n      // b\n      imageData.data[++i] = val;\n      // a\n      imageData.data[++i] = 255;\n    }\n  }\n  context.putImageData(imageData, 0, 0);\n\n  // create the bitmap\n  createjs.Bitmap.call(this, canvas);\n  // change Y direction\n  this.y = -this.height * message.info.resolution;\n\n  // scale the image\n  this.scaleX = message.info.resolution;\n  this.scaleY = message.info.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY;\n\n  // set the pose\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n};\nROS2D.OccupancyGrid.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A map that listens to a given occupancy grid topic.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n */\nROS2D.OccupancyGridClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || \"/map\";\n  this.continuous = options.continuous;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // current grid that is displayed\n  // create an empty shape to start with, so that the order remains correct.\n  this.currentGrid = new createjs.Shape();\n  this.rootObject.addChild(this.currentGrid);\n  // work-around for a bug in easeljs -- needs a second object to render correctly\n  this.rootObject.addChild(new ROS2D.Grid({\n    size: 1\n  }));\n\n  // subscribe to the topic\n  var rosTopic = new ROSLIB.Topic({\n    ros: ros,\n    name: topic,\n    messageType: \"nav_msgs/OccupancyGrid\",\n    compression: \"png\"\n  });\n  rosTopic.subscribe(function (message) {\n    // check for an old map\n    var index = null;\n    if (that.currentGrid) {\n      index = that.rootObject.getChildIndex(that.currentGrid);\n      that.rootObject.removeChild(that.currentGrid);\n    }\n    console.log(\"index = \" + index);\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message: message\n    });\n    if (index !== null) {\n      that.rootObject.addChildAt(that.currentGrid, index);\n    } else {\n      that.rootObject.addChild(that.currentGrid);\n    }\n    that.emit(\"change\");\n\n    // check if we should unsubscribe\n    if (!that.continuous) {\n      rosTopic.unsubscribe();\n    }\n  });\n};\nROS2D.OccupancyGridClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * @author Jihoon Lee- jihoonlee.in@gmail.com\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A static map that receives from map_server.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * service (optional) - the map topic to listen to, like '/static_map'\n *   * rootObject (optional) - the root object to add this marker to\n */\nROS2D.OccupancyGridSrvClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var service = options.service || \"/static_map\";\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // current grid that is displayed\n  this.currentGrid = null;\n\n  // Setting up to the service\n  var rosService = new ROSLIB.Service({\n    ros: ros,\n    name: service,\n    serviceType: \"nav_msgs/GetMap\",\n    compression: \"png\"\n  });\n  rosService.callService(new ROSLIB.ServiceRequest(), function (response) {\n    // check for an old map\n    if (that.currentGrid) {\n      that.rootObject.removeChild(that.currentGrid);\n    }\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message: response.map\n    });\n    that.rootObject.addChild(that.currentGrid);\n    that.emit(\"change\", that.currentGrid);\n  });\n};\nROS2D.OccupancyGridSrvClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * An arrow with line and triangular head, based on the navigation arrow.\n * Aims to the left at 0 rotation, as would be expected.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.ArrowShape = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 20;\n  var strokeSize = options.strokeSize || 5;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse;\n\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n  var headLen = size / 3.0;\n  var headWidth = headLen * 2.0 / 3.0;\n  graphics.setStrokeStyle(strokeSize);\n  graphics.beginStroke(strokeColor);\n  graphics.moveTo(0, 0);\n  graphics.lineTo(size - headLen, 0);\n  graphics.beginFill(fillColor);\n  graphics.moveTo(size, 0);\n  graphics.lineTo(size - headLen, headWidth / 2.0);\n  graphics.lineTo(size - headLen, -headWidth / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke();\n\n  // create the shape\n  createjs.Shape.call(this, graphics);\n\n  // check if we are pulsing\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener(\"tick\", function () {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = ++growCount < 10;\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = --growCount < 0;\n      }\n    });\n  }\n};\nROS2D.ArrowShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Raffaello Bonghi - raffaello.bonghi@officinerobotiche.it\n */\n\n/**\n * A Grid object draw in map.\n *\n * @constructor\n * @param options - object with following keys:\n *  * size (optional) - the size of the grid\n *  * cellSize (optional) - the cell size of map\n *  * lineWidth (optional) - the width of the lines in the grid\n */\nROS2D.Grid = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var cellSize = options.cellSize || 0.1;\n  var lineWidth = options.lineWidth || 0.001;\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n  // line width\n  graphics.setStrokeStyle(lineWidth * 5);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n  graphics.moveTo(-size * cellSize, 0);\n  graphics.lineTo(size * cellSize, 0);\n  graphics.moveTo(0, -size * cellSize);\n  graphics.lineTo(0, size * cellSize);\n  graphics.endFill();\n  graphics.endStroke();\n  graphics.setStrokeStyle(lineWidth);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n  for (var i = -size; i <= size; i++) {\n    graphics.moveTo(-size * cellSize, i * cellSize);\n    graphics.lineTo(size * cellSize, i * cellSize);\n    graphics.moveTo(i * cellSize, -size * cellSize);\n    graphics.lineTo(i * cellSize, size * cellSize);\n  }\n  graphics.endFill();\n  graphics.endStroke();\n  // create the shape\n  createjs.Shape.call(this, graphics);\n};\nROS2D.Grid.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A navigation arrow is a directed triangle that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.NavigationArrow = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse;\n\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n  // line width\n  graphics.setStrokeStyle(strokeSize);\n  graphics.moveTo(-size / 2.0, -size / 2.0);\n  graphics.beginStroke(strokeColor);\n  graphics.beginFill(fillColor);\n  graphics.lineTo(size, 0);\n  graphics.lineTo(-size / 2.0, size / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke();\n\n  // create the shape\n  createjs.Shape.call(this, graphics);\n\n  // check if we are pulsing\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener(\"tick\", function () {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = ++growCount < 10;\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = --growCount < 0;\n      }\n    });\n  }\n};\nROS2D.NavigationArrow.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Inigo Gonzalez - ingonza85@gmail.com\n */\n\n/**\n * A navigation image that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * image - the image to use as a marker\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.NavigationImage = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var image_url = options.image;\n  var pulse = options.pulse;\n  var alpha = options.alpha || 1;\n  var originals = {};\n  var paintImage = function () {\n    createjs.Bitmap.call(that, image);\n    var scale = calculateScale(size);\n    that.alpha = alpha;\n    that.scaleX = scale;\n    that.scaleY = scale;\n    that.regY = that.image.height / 2;\n    that.regX = that.image.width / 2;\n    originals[\"rotation\"] = that.rotation;\n    Object.defineProperty(that, \"rotation\", {\n      get: function () {\n        return originals[\"rotation\"] + 90;\n      },\n      set: function (value) {\n        originals[\"rotation\"] = value;\n      }\n    });\n    if (pulse) {\n      // have the model \"pulse\"\n      var growCount = 0;\n      var growing = true;\n      var SCALE_SIZE = 1.02;\n      createjs.Ticker.addEventListener(\"tick\", function () {\n        if (growing) {\n          that.scaleX *= SCALE_SIZE;\n          that.scaleY *= SCALE_SIZE;\n          growing = ++growCount < 10;\n        } else {\n          that.scaleX /= SCALE_SIZE;\n          that.scaleY /= SCALE_SIZE;\n          growing = --growCount < 0;\n        }\n      });\n    }\n  };\n  var calculateScale = function (_size) {\n    return _size / image.width;\n  };\n  var image = new Image();\n  image.onload = paintImage;\n  image.src = image_url;\n};\nROS2D.NavigationImage.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A shape to draw a nav_msgs/Path msg\n *\n * @constructor\n * @param options - object with following keys:\n *   * path (optional) - the initial path to draw\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n */\nROS2D.PathShape = function (options) {\n  options = options || {};\n  var path = options.path;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n\n  // draw the line\n  this.graphics = new createjs.Graphics();\n  if (path !== null && typeof path !== \"undefined\") {\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n    for (var i = 1; i < path.poses.length; ++i) {\n      this.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n    }\n    this.graphics.endStroke();\n  }\n\n  // create the shape\n  createjs.Shape.call(this, this.graphics);\n};\n\n/**\n * Set the path to draw\n *\n * @param path of type nav_msgs/Path\n */\nROS2D.PathShape.prototype.setPath = function (path) {\n  this.graphics.clear();\n  if (path !== null && typeof path !== \"undefined\") {\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n    for (var i = 1; i < path.poses.length; ++i) {\n      this.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n    }\n    this.graphics.endStroke();\n  }\n};\nROS2D.PathShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A polygon that can be edited by an end user\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * lineSize (optional) - the width of the lines\n *   * lineColor (optional) - the createjs color of the lines\n *   * pointSize (optional) - the size of the points\n *   * pointColor (optional) - the createjs color of the points\n *   * fillColor (optional) - the createjs color to fill the polygon\n *   * lineCallBack (optional) - callback function for mouse interaction with a line\n *   * pointCallBack (optional) - callback function for mouse interaction with a point\n */\nROS2D.PolygonMarker = function (options) {\n  //\tvar that = this;\n  options = options || {};\n  this.lineSize = options.lineSize || 3;\n  this.lineColor = options.lineColor || createjs.Graphics.getRGB(0, 0, 255, 0.66);\n  this.pointSize = options.pointSize || 10;\n  this.pointColor = options.pointColor || createjs.Graphics.getRGB(255, 0, 0, 0.66);\n  this.fillColor = options.pointColor || createjs.Graphics.getRGB(0, 255, 0, 0.33);\n  this.lineCallBack = options.lineCallBack;\n  this.pointCallBack = options.pointCallBack;\n\n  // Array of point shapes\n  //\tthis.points = [];\n  this.pointContainer = new createjs.Container();\n\n  // Array of line shapes\n  //\tthis.lines = [];\n  this.lineContainer = new createjs.Container();\n  this.fillShape = new createjs.Shape();\n\n  // Container with all the lines and points\n  createjs.Container.call(this);\n  this.addChild(this.fillShape);\n  this.addChild(this.lineContainer);\n  this.addChild(this.pointContainer);\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.createLineShape = function (startPoint, endPoint) {\n  var line = new createjs.Shape();\n  //\tline.graphics.setStrokeStyle(this.strokeSize);\n  //\tline.graphics.beginStroke(this.strokeColor);\n  //\tline.graphics.moveTo(startPoint.x, startPoint.y);\n  //\tline.graphics.lineTo(endPoint.x, endPoint.y);\n  this.editLineShape(line, startPoint, endPoint);\n  var that = this;\n  line.addEventListener(\"mousedown\", function (event) {\n    if (that.lineCallBack !== null && typeof that.lineCallBack !== \"undefined\") {\n      that.lineCallBack(\"mousedown\", event, that.lineContainer.getChildIndex(event.target));\n    }\n  });\n  return line;\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.editLineShape = function (line, startPoint, endPoint) {\n  line.graphics.clear();\n  line.graphics.setStrokeStyle(this.lineSize);\n  line.graphics.beginStroke(this.lineColor);\n  line.graphics.moveTo(startPoint.x, startPoint.y);\n  line.graphics.lineTo(endPoint.x, endPoint.y);\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.createPointShape = function (pos) {\n  var point = new createjs.Shape();\n  point.graphics.beginFill(this.pointColor);\n  point.graphics.drawCircle(0, 0, this.pointSize);\n  point.x = pos.x;\n  point.y = -pos.y;\n  var that = this;\n  point.addEventListener(\"mousedown\", function (event) {\n    if (that.pointCallBack !== null && typeof that.pointCallBack !== \"undefined\") {\n      that.pointCallBack(\"mousedown\", event, that.pointContainer.getChildIndex(event.target));\n    }\n  });\n  return point;\n};\n\n/**\n * Adds a point to the polygon\n *\n * @param position of type ROSLIB.Vector3\n */\nROS2D.PolygonMarker.prototype.addPoint = function (pos) {\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChild(point);\n  var numPoints = this.pointContainer.getNumChildren();\n\n  // 0 points -> 1 point, 0 lines\n  // 1 point  -> 2 points, lines: add line between previous and new point, add line between new point and first point\n  // 2 points -> 3 points, 3 lines: change last line, add line between new point and first point\n  // 3 points -> 4 points, 4 lines: change last line, add line between new point and first point\n  // etc\n\n  if (numPoints < 2) {\n    // Now 1 point\n  } else if (numPoints < 3) {\n    // Now 2 points: add line between previous and new point\n    var line = this.createLineShape(this.pointContainer.getChildAt(numPoints - 2), point);\n    this.lineContainer.addChild(line);\n  }\n  if (numPoints > 2) {\n    // Now 3 or more points: change last line\n    this.editLineShape(this.lineContainer.getChildAt(numPoints - 2), this.pointContainer.getChildAt(numPoints - 2), point);\n  }\n  if (numPoints > 1) {\n    // Now 2 or more points: add line between new point and first point\n    var lineEnd = this.createLineShape(point, this.pointContainer.getChildAt(0));\n    this.lineContainer.addChild(lineEnd);\n  }\n  this.drawFill();\n};\n\n/**\n * Removes a point from the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n */\nROS2D.PolygonMarker.prototype.remPoint = function (obj) {\n  var index;\n  //\tvar point;\n  if (obj instanceof createjs.Shape) {\n    index = this.pointContainer.getChildIndex(obj);\n    //\t\tpoint = obj;\n  } else {\n    index = obj;\n    //\t\tpoint = this.pointContainer.getChildAt(index);\n  }\n\n  // 0 points -> 0 points, 0 lines\n  // 1 point  -> 0 points, 0 lines\n  // 2 points -> 1 point,  0 lines: remove all lines\n  // 3 points -> 2 points, 2 lines: change line before point to remove, remove line after point to remove\n  // 4 points -> 3 points, 3 lines: change line before point to remove, remove line after point to remove\n  // etc\n\n  var numPoints = this.pointContainer.getNumChildren();\n  if (numPoints < 2) {} else if (numPoints < 3) {\n    // 2 points: remove all lines\n    this.lineContainer.removeAllChildren();\n  } else {\n    // 3 or more points: change line before point to remove, remove line after point to remove\n    this.editLineShape(this.lineContainer.getChildAt((index - 1 + numPoints) % numPoints), this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints), this.pointContainer.getChildAt((index + 1) % numPoints));\n    this.lineContainer.removeChildAt(index);\n  }\n  this.pointContainer.removeChildAt(index);\n  //\tthis.points.splice(index, 1);\n\n  this.drawFill();\n};\n\n/**\n * Moves a point of the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n * @param position of type ROSLIB.Vector3\n */\nROS2D.PolygonMarker.prototype.movePoint = function (obj, newPos) {\n  var index;\n  var point;\n  if (obj instanceof createjs.Shape) {\n    index = this.pointContainer.getChildIndex(obj);\n    point = obj;\n  } else {\n    index = obj;\n    point = this.pointContainer.getChildAt(index);\n  }\n  point.x = newPos.x;\n  point.y = -newPos.y;\n  var numPoints = this.pointContainer.getNumChildren();\n  if (numPoints > 1) {\n    // line before moved point\n    var line1 = this.lineContainer.getChildAt((index - 1 + numPoints) % numPoints);\n    this.editLineShape(line1, this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints), point);\n\n    // line after moved point\n    var line2 = this.lineContainer.getChildAt(index);\n    this.editLineShape(line2, point, this.pointContainer.getChildAt((index + 1) % numPoints));\n  }\n  this.drawFill();\n};\n\n/**\n * Splits a line of the polygon: inserts a point at the center of the line\n *\n * @param obj either an index (integer) or a line shape of the polygon\n */\nROS2D.PolygonMarker.prototype.splitLine = function (obj) {\n  var index;\n  var line;\n  if (obj instanceof createjs.Shape) {\n    index = this.lineContainer.getChildIndex(obj);\n    line = obj;\n  } else {\n    index = obj;\n    line = this.lineContainer.getChildAt(index);\n  }\n  var numPoints = this.pointContainer.getNumChildren();\n  var xs = this.pointContainer.getChildAt(index).x;\n  var ys = this.pointContainer.getChildAt(index).y;\n  var xe = this.pointContainer.getChildAt((index + 1) % numPoints).x;\n  var ye = this.pointContainer.getChildAt((index + 1) % numPoints).y;\n  var xh = (xs + xe) / 2.0;\n  var yh = (ys + ye) / 2.0;\n  var pos = new ROSLIB.Vector3({\n    x: xh,\n    y: -yh\n  });\n\n  // Add a point in the center of the line to split\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChildAt(point, index + 1);\n  ++numPoints;\n\n  // Add a line between the new point and the end of the line to split\n  var lineNew = this.createLineShape(point, this.pointContainer.getChildAt((index + 2) % numPoints));\n  this.lineContainer.addChildAt(lineNew, index + 1);\n\n  // Set the endpoint of the line to split to the new point\n  this.editLineShape(line, this.pointContainer.getChildAt(index), point);\n  this.drawFill();\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.drawFill = function () {\n  var numPoints = this.pointContainer.getNumChildren();\n  if (numPoints > 2) {\n    var g = this.fillShape.graphics;\n    g.clear();\n    g.setStrokeStyle(0);\n    g.moveTo(this.pointContainer.getChildAt(0).x, this.pointContainer.getChildAt(0).y);\n    g.beginStroke();\n    g.beginFill(this.fillColor);\n    for (var i = 1; i < numPoints; ++i) {\n      g.lineTo(this.pointContainer.getChildAt(i).x, this.pointContainer.getChildAt(i).y);\n    }\n    g.closePath();\n    g.endFill();\n    g.endStroke();\n  } else {\n    this.fillShape.graphics.clear();\n  }\n};\nROS2D.PolygonMarker.prototype.__proto__ = createjs.Container.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A trace of poses, handy to see where a robot has been\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * maxPoses (optional) - the maximum number of poses to keep, 0 for infinite\n *   * minDist (optional) - the minimal distance between poses to use the pose for drawing (default 0.05)\n */\nROS2D.TraceShape = function (options) {\n  //\tvar that = this;\n  options = options || {};\n  var pose = options.pose;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  this.maxPoses = options.maxPoses || 100;\n  this.minDist = options.minDist || 0.05;\n\n  // Store minDist as the square of it\n  this.minDist = this.minDist * this.minDist;\n\n  // Array of the poses\n  // TODO: do we need this?\n  this.poses = [];\n\n  // Create the graphics\n  this.graphics = new createjs.Graphics();\n  this.graphics.setStrokeStyle(this.strokeSize);\n  this.graphics.beginStroke(this.strokeColor);\n\n  // Add first pose if given\n  if (pose !== null && typeof pose !== \"undefined\") {\n    this.poses.push(pose);\n  }\n\n  // Create the shape\n  createjs.Shape.call(this, this.graphics);\n};\n\n/**\n * Adds a pose to the trace and updates the graphics\n *\n * @param pose of type ROSLIB.Pose\n */\nROS2D.TraceShape.prototype.addPose = function (pose) {\n  var last = this.poses.length - 1;\n  if (last < 0) {\n    this.poses.push(pose);\n    this.graphics.moveTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n  } else {\n    var prevX = this.poses[last].position.x;\n    var prevY = this.poses[last].position.y;\n    var dx = pose.position.x - prevX;\n    var dy = pose.position.y - prevY;\n    if (dx * dx + dy * dy > this.minDist) {\n      this.graphics.lineTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n      this.poses.push(pose);\n    }\n  }\n  if (this.maxPoses > 0 && this.maxPoses < this.poses.length) {\n    this.popFront();\n  }\n};\n\n/**\n * Removes front pose and updates the graphics\n */\nROS2D.TraceShape.prototype.popFront = function () {\n  if (this.poses.length > 0) {\n    this.poses.shift();\n    // TODO: shift drawing instructions rather than doing it all over\n    this.graphics.clear();\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.lineTo(this.poses[0].position.x / this.scaleX, this.poses[0].position.y / -this.scaleY);\n    for (var i = 1; i < this.poses.length; ++i) {\n      this.graphics.lineTo(this.poses[i].position.x / this.scaleX, this.poses[i].position.y / -this.scaleY);\n    }\n  }\n};\nROS2D.TraceShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds panning to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply panning to\n */\nROS2D.PanView = function (options) {\n  options = options || {};\n  this.rootObject = options.rootObject;\n\n  // get a handle to the stage\n  if (this.rootObject instanceof createjs.Stage) {\n    this.stage = this.rootObject;\n  } else {\n    this.stage = this.rootObject.getStage();\n  }\n  this.startPos = new ROSLIB.Vector3();\n};\nROS2D.PanView.prototype.startPan = function (startX, startY) {\n  this.startPos.x = startX;\n  this.startPos.y = startY;\n};\nROS2D.PanView.prototype.pan = function (curX, curY) {\n  this.stage.x += curX - this.startPos.x;\n  this.startPos.x = curX;\n  this.stage.y += curY - this.startPos.y;\n  this.startPos.y = curY;\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A Viewer can be used to render an interactive 2D scene to a HTML5 canvas.\n *\n * @constructor\n * @param options - object with following keys:\n *   * divID - the ID of the div to place the viewer in\n *   * width - the initial width, in pixels, of the canvas\n *   * height - the initial height, in pixels, of the canvas\n *   * background (optional) - the color to render the background, like '#efefef'\n */\nROS2D.Viewer = function (options) {\n  var that = this;\n  options = options || {};\n  var divID = options.divID;\n  this.width = options.width;\n  this.height = options.height;\n  var background = options.background || \"#111111\";\n\n  // create the canvas to render to\n  var canvas = document.createElement(\"canvas\");\n  canvas.width = this.width;\n  canvas.height = this.height;\n  canvas.style.background = background;\n  document.getElementById(divID).appendChild(canvas);\n  // create the easel to use\n  this.scene = new createjs.Stage(canvas);\n\n  // change Y axis center\n  this.scene.y = this.height;\n\n  // add the renderer to the page\n  document.getElementById(divID).appendChild(canvas);\n\n  // update at 30fps\n  createjs.Ticker.setFPS(30);\n  createjs.Ticker.addEventListener(\"tick\", this.scene);\n};\n\n/**\n * Add the given createjs object to the global scene in the viewer.\n *\n * @param object - the object to add\n */\nROS2D.Viewer.prototype.addObject = function (object) {\n  this.scene.addChild(object);\n};\n\n/**\n * Scale the scene to fit the given width and height into the current canvas.\n *\n * @param width - the width to scale to in meters\n * @param height - the height to scale to in meters\n */\nROS2D.Viewer.prototype.scaleToDimensions = function (width, height) {\n  // restore to values before shifting, if ocurred\n  this.scene.x = typeof this.scene.x_prev_shift !== \"undefined\" ? this.scene.x_prev_shift : this.scene.x;\n  this.scene.y = typeof this.scene.y_prev_shift !== \"undefined\" ? this.scene.y_prev_shift : this.scene.y;\n\n  // save scene scaling\n  this.scene.scaleX = this.width / width;\n  this.scene.scaleY = this.height / height;\n};\n\n/**\n * Shift the main view of the canvas by the given amount. This is based on the\n * ROS coordinate system. That is, Y is opposite that of a traditional canvas.\n *\n * @param x - the amount to shift by in the x direction in meters\n * @param y - the amount to shift by in the y direction in meters\n */\nROS2D.Viewer.prototype.shift = function (x, y) {\n  // save current offset\n  this.scene.x_prev_shift = this.scene.x;\n  this.scene.y_prev_shift = this.scene.y;\n\n  // shift scene by scaling the desired offset\n  this.scene.x -= x * this.scene.scaleX;\n  this.scene.y += y * this.scene.scaleY;\n};\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds zooming to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply zoom to\n *   * minScale (optional) - minimum scale to set to preserve precision\n */\nROS2D.ZoomView = function (options) {\n  options = options || {};\n  this.rootObject = options.rootObject;\n  this.minScale = options.minScale || 0.001;\n\n  // get a handle to the stage\n  if (this.rootObject instanceof createjs.Stage) {\n    this.stage = this.rootObject;\n  } else {\n    this.stage = this.rootObject.getStage();\n  }\n  this.center = new ROSLIB.Vector3();\n  this.startShift = new ROSLIB.Vector3();\n  this.startScale = new ROSLIB.Vector3();\n};\nROS2D.ZoomView.prototype.startZoom = function (centerX, centerY) {\n  this.center.x = centerX;\n  this.center.y = centerY;\n  this.startShift.x = this.stage.x;\n  this.startShift.y = this.stage.y;\n  this.startScale.x = this.stage.scaleX;\n  this.startScale.y = this.stage.scaleY;\n};\nROS2D.ZoomView.prototype.zoom = function (zoom) {\n  // Make sure scale doesn't become too small\n  if (this.startScale.x * zoom < this.minScale) {\n    zoom = this.minScale / this.startScale.x;\n  }\n  if (this.startScale.y * zoom < this.minScale) {\n    zoom = this.minScale / this.startScale.y;\n  }\n  this.stage.scaleX = this.startScale.x * zoom;\n  this.stage.scaleY = this.startScale.y * zoom;\n  this.stage.x = this.startShift.x - (this.center.x - this.startShift.x) * (this.stage.scaleX / this.startScale.x - 1);\n  this.stage.y = this.startShift.y - (this.center.y - this.startShift.y) * (this.stage.scaleY / this.startScale.y - 1);\n};\nexport default ROS2D;","map":{"version":3,"names":["ROSLIB","EventEmitter2","createjs","ROS2D","REVISION","Stage","prototype","globalToRos","x","y","rosX","scaleX","rosY","scaleY","Vector3","rosToGlobal","pos","rosQuaternionToGlobalTheta","orientation","q0","w","q1","q2","q3","z","Math","atan2","PI","ImageMap","options","message","image","pose","Pose","position","origin","width","height","Bitmap","call","resolution","__proto__","ImageMapClient","that","ros","topic","rootObject","Container","currentImage","Shape","rosTopic","Topic","name","messageType","subscribe","unsubscribe","addChild","Grid","size","emit","OccupancyGrid","console","log","canvas","document","createElement","context","getContext","info","imageData","createImageData","row","col","mapI","data","val","i","putImageData","OccupancyGridClient","continuous","currentGrid","compression","index","getChildIndex","removeChild","addChildAt","OccupancyGridSrvClient","service","rosService","Service","serviceType","callService","ServiceRequest","response","map","ArrowShape","strokeSize","strokeColor","Graphics","getRGB","fillColor","pulse","graphics","headLen","headWidth","setStrokeStyle","beginStroke","moveTo","lineTo","beginFill","closePath","endFill","endStroke","growCount","growing","Ticker","addEventListener","cellSize","lineWidth","NavigationArrow","NavigationImage","image_url","alpha","originals","paintImage","scale","calculateScale","regY","regX","rotation","Object","defineProperty","get","set","value","SCALE_SIZE","_size","Image","onload","src","PathShape","path","poses","length","setPath","clear","PolygonMarker","lineSize","lineColor","pointSize","pointColor","lineCallBack","pointCallBack","pointContainer","lineContainer","fillShape","createLineShape","startPoint","endPoint","line","editLineShape","event","target","createPointShape","point","drawCircle","addPoint","numPoints","getNumChildren","getChildAt","lineEnd","drawFill","remPoint","obj","removeAllChildren","removeChildAt","movePoint","newPos","line1","line2","splitLine","xs","ys","xe","ye","xh","yh","lineNew","g","TraceShape","maxPoses","minDist","push","addPose","last","prevX","prevY","dx","dy","popFront","shift","PanView","stage","getStage","startPos","startPan","startX","startY","pan","curX","curY","Viewer","divID","background","style","getElementById","appendChild","scene","setFPS","addObject","object","scaleToDimensions","x_prev_shift","y_prev_shift","ZoomView","minScale","center","startShift","startScale","startZoom","centerX","centerY","zoom"],"sources":["/Users/canozdemir/Downloads/web-based-navigation-rosbridge/src/components/vendor/ros2d.js"],"sourcesContent":["import 'latest-createjs'\nimport ROSLIB from 'roslib'\nimport EventEmitter2 from 'eventemitter2'\nimport createjs from 'createjs-module';\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n var ROS2D = ROS2D || {\n  REVISION: \"0.9.0\",\n};\n\n// convert the given global Stage coordinates to ROS coordinates\ncreatejs.Stage.prototype.globalToRos = function (x, y) {\n  var rosX = (x - this.x) / this.scaleX;\n  var rosY = (this.y - y) / this.scaleY;\n  return new ROSLIB.Vector3({\n    x: rosX,\n    y: rosY,\n  });\n};\n\n// convert the given ROS coordinates to global Stage coordinates\ncreatejs.Stage.prototype.rosToGlobal = function (pos) {\n  var x = pos.x * this.scaleX + this.x;\n  var y = pos.y * this.scaleY + this.y;\n  return {\n    x: x,\n    y: y,\n  };\n};\n\n// convert a ROS quaternion to theta in degrees\ncreatejs.Stage.prototype.rosQuaternionToGlobalTheta = function (orientation) {\n  // See https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Rotation_matrices\n  // here we use [x y z] = R * [1 0 0]\n  var q0 = orientation.w;\n  var q1 = orientation.x;\n  var q2 = orientation.y;\n  var q3 = orientation.z;\n  // Canvas rotation is clock wise and in degrees\n  return (\n    (-Math.atan2(2 * (q0 * q3 + q1 * q2), 1 - 2 * (q2 * q2 + q3 * q3)) *\n      180.0) /\n    Math.PI\n  );\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid map meta data message\n *   * image - the image URL to load\n */\nROS2D.ImageMap = function (options) {\n  options = options || {};\n  var message = options.message;\n  var image = options.image;\n\n  // save the metadata we need\n  this.pose = new ROSLIB.Pose({\n    position: message.origin.position,\n    orientation: message.origin.orientation,\n  });\n\n  // set the size\n  this.width = message.width;\n  this.height = message.height;\n\n  // create the bitmap\n  createjs.Bitmap.call(this, image);\n  // change Y direction\n  this.y = -this.height * message.resolution;\n\n  // scale the image\n  this.scaleX = message.resolution;\n  this.scaleY = message.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY;\n\n  // set the pose\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n};\nROS2D.ImageMap.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the image URL to load\n *   * rootObject (optional) - the root object to add this marker to\n */\nROS2D.ImageMapClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || \"/map_metadata\";\n  this.image = options.image;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // create an empty shape to start with\n  this.currentImage = new createjs.Shape();\n\n  // subscribe to the topic\n  var rosTopic = new ROSLIB.Topic({\n    ros: ros,\n    name: topic,\n    messageType: \"nav_msgs/MapMetaData\",\n  });\n\n  rosTopic.subscribe(function (message) {\n    // we only need this once\n    rosTopic.unsubscribe();\n\n    // create the image\n    that.currentImage = new ROS2D.ImageMap({\n      message: message,\n      image: that.image,\n    });\n    that.rootObject.addChild(that.currentImage);\n    // work-around for a bug in easeljs -- needs a second object to render correctly\n    that.rootObject.addChild(new ROS2D.Grid({ size: 1 }));\n\n    that.emit(\"change\");\n  });\n};\nROS2D.ImageMapClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An OccupancyGrid can convert a ROS occupancy grid message into a createjs Bitmap object.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid message\n */\nROS2D.OccupancyGrid = function (options) {\n  options = options || {};\n  var message = options.message;\n  console.log(message);\n  // internal drawing canvas\n  var canvas = document.createElement(\"canvas\");\n  var context = canvas.getContext(\"2d\");\n\n  // save the metadata we need\n  this.pose = new ROSLIB.Pose({\n    position: message.info.origin.position,\n    orientation: message.info.origin.orientation,\n  });\n\n  // set the size\n  this.width = message.info.width;\n  this.height = message.info.height;\n  canvas.width = this.width;\n  canvas.height = this.height;\n\n  var imageData = context.createImageData(this.width, this.height);\n  for (var row = 0; row < this.height; row++) {\n    for (var col = 0; col < this.width; col++) {\n      // determine the index into the map data\n      var mapI = col + (this.height - row - 1) * this.width;\n      // determine the value\n      var data = message.data[mapI];\n      var val;\n      if (data === 100) {\n        val = 0;\n      } else if (data === 0) {\n        val = 255;\n      } else {\n        val = 127;\n      }\n\n      // determine the index into the image data array\n      var i = (col + row * this.width) * 4;\n      // r\n      imageData.data[i] = val;\n      // g\n      imageData.data[++i] = val;\n      // b\n      imageData.data[++i] = val;\n      // a\n      imageData.data[++i] = 255;\n    }\n  }\n  context.putImageData(imageData, 0, 0);\n\n  // create the bitmap\n  createjs.Bitmap.call(this, canvas);\n  // change Y direction\n  this.y = -this.height * message.info.resolution;\n\n  // scale the image\n  this.scaleX = message.info.resolution;\n  this.scaleY = message.info.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY;\n\n  // set the pose\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n};\nROS2D.OccupancyGrid.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A map that listens to a given occupancy grid topic.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n */\nROS2D.OccupancyGridClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || \"/map\";\n  this.continuous = options.continuous;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // current grid that is displayed\n  // create an empty shape to start with, so that the order remains correct.\n  this.currentGrid = new createjs.Shape();\n  this.rootObject.addChild(this.currentGrid);\n  // work-around for a bug in easeljs -- needs a second object to render correctly\n  this.rootObject.addChild(new ROS2D.Grid({ size: 1 }));\n\n  // subscribe to the topic\n  var rosTopic = new ROSLIB.Topic({\n    ros: ros,\n    name: topic,\n    messageType: \"nav_msgs/OccupancyGrid\",\n    compression: \"png\",\n  });\n\n  rosTopic.subscribe(function (message) {\n    // check for an old map\n    var index = null;\n    if (that.currentGrid) {\n      index = that.rootObject.getChildIndex(that.currentGrid);\n      that.rootObject.removeChild(that.currentGrid);\n    }\n\n    console.log(\"index = \" + index);\n\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message: message,\n    });\n    if (index !== null) {\n      that.rootObject.addChildAt(that.currentGrid, index);\n    } else {\n      that.rootObject.addChild(that.currentGrid);\n    }\n\n    that.emit(\"change\");\n\n    // check if we should unsubscribe\n    if (!that.continuous) {\n      rosTopic.unsubscribe();\n    }\n  });\n};\nROS2D.OccupancyGridClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * @author Jihoon Lee- jihoonlee.in@gmail.com\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A static map that receives from map_server.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * service (optional) - the map topic to listen to, like '/static_map'\n *   * rootObject (optional) - the root object to add this marker to\n */\nROS2D.OccupancyGridSrvClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var service = options.service || \"/static_map\";\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // current grid that is displayed\n  this.currentGrid = null;\n\n  // Setting up to the service\n  var rosService = new ROSLIB.Service({\n    ros: ros,\n    name: service,\n    serviceType: \"nav_msgs/GetMap\",\n    compression: \"png\",\n  });\n\n  rosService.callService(new ROSLIB.ServiceRequest(), function (response) {\n    // check for an old map\n    if (that.currentGrid) {\n      that.rootObject.removeChild(that.currentGrid);\n    }\n\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message: response.map,\n    });\n    that.rootObject.addChild(that.currentGrid);\n\n    that.emit(\"change\", that.currentGrid);\n  });\n};\nROS2D.OccupancyGridSrvClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * An arrow with line and triangular head, based on the navigation arrow.\n * Aims to the left at 0 rotation, as would be expected.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.ArrowShape = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 20;\n  var strokeSize = options.strokeSize || 5;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse;\n\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n\n  var headLen = size / 3.0;\n  var headWidth = (headLen * 2.0) / 3.0;\n\n  graphics.setStrokeStyle(strokeSize);\n  graphics.beginStroke(strokeColor);\n  graphics.moveTo(0, 0);\n  graphics.lineTo(size - headLen, 0);\n\n  graphics.beginFill(fillColor);\n  graphics.moveTo(size, 0);\n  graphics.lineTo(size - headLen, headWidth / 2.0);\n  graphics.lineTo(size - headLen, -headWidth / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke();\n\n  // create the shape\n  createjs.Shape.call(this, graphics);\n\n  // check if we are pulsing\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener(\"tick\", function () {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = ++growCount < 10;\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = --growCount < 0;\n      }\n    });\n  }\n};\nROS2D.ArrowShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Raffaello Bonghi - raffaello.bonghi@officinerobotiche.it\n */\n\n/**\n * A Grid object draw in map.\n *\n * @constructor\n * @param options - object with following keys:\n *  * size (optional) - the size of the grid\n *  * cellSize (optional) - the cell size of map\n *  * lineWidth (optional) - the width of the lines in the grid\n */\nROS2D.Grid = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var cellSize = options.cellSize || 0.1;\n  var lineWidth = options.lineWidth || 0.001;\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n  // line width\n  graphics.setStrokeStyle(lineWidth * 5);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n  graphics.moveTo(-size * cellSize, 0);\n  graphics.lineTo(size * cellSize, 0);\n  graphics.moveTo(0, -size * cellSize);\n  graphics.lineTo(0, size * cellSize);\n  graphics.endFill();\n  graphics.endStroke();\n\n  graphics.setStrokeStyle(lineWidth);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n  for (var i = -size; i <= size; i++) {\n    graphics.moveTo(-size * cellSize, i * cellSize);\n    graphics.lineTo(size * cellSize, i * cellSize);\n    graphics.moveTo(i * cellSize, -size * cellSize);\n    graphics.lineTo(i * cellSize, size * cellSize);\n  }\n  graphics.endFill();\n  graphics.endStroke();\n  // create the shape\n  createjs.Shape.call(this, graphics);\n};\nROS2D.Grid.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A navigation arrow is a directed triangle that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.NavigationArrow = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse;\n\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n  // line width\n  graphics.setStrokeStyle(strokeSize);\n  graphics.moveTo(-size / 2.0, -size / 2.0);\n  graphics.beginStroke(strokeColor);\n  graphics.beginFill(fillColor);\n  graphics.lineTo(size, 0);\n  graphics.lineTo(-size / 2.0, size / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke();\n\n  // create the shape\n  createjs.Shape.call(this, graphics);\n\n  // check if we are pulsing\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener(\"tick\", function () {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = ++growCount < 10;\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = --growCount < 0;\n      }\n    });\n  }\n};\nROS2D.NavigationArrow.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Inigo Gonzalez - ingonza85@gmail.com\n */\n\n/**\n * A navigation image that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * image - the image to use as a marker\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.NavigationImage = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var image_url = options.image;\n  var pulse = options.pulse;\n  var alpha = options.alpha || 1;\n\n  var originals = {};\n\n  var paintImage = function () {\n    createjs.Bitmap.call(that, image);\n    var scale = calculateScale(size);\n    that.alpha = alpha;\n    that.scaleX = scale;\n    that.scaleY = scale;\n    that.regY = that.image.height / 2;\n    that.regX = that.image.width / 2;\n    originals[\"rotation\"] = that.rotation;\n    Object.defineProperty(that, \"rotation\", {\n      get: function () {\n        return originals[\"rotation\"] + 90;\n      },\n      set: function (value) {\n        originals[\"rotation\"] = value;\n      },\n    });\n    if (pulse) {\n      // have the model \"pulse\"\n      var growCount = 0;\n      var growing = true;\n      var SCALE_SIZE = 1.02;\n      createjs.Ticker.addEventListener(\"tick\", function () {\n        if (growing) {\n          that.scaleX *= SCALE_SIZE;\n          that.scaleY *= SCALE_SIZE;\n          growing = ++growCount < 10;\n        } else {\n          that.scaleX /= SCALE_SIZE;\n          that.scaleY /= SCALE_SIZE;\n          growing = --growCount < 0;\n        }\n      });\n    }\n  };\n\n  var calculateScale = function (_size) {\n    return _size / image.width;\n  };\n\n  var image = new Image();\n  image.onload = paintImage;\n  image.src = image_url;\n};\n\nROS2D.NavigationImage.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A shape to draw a nav_msgs/Path msg\n *\n * @constructor\n * @param options - object with following keys:\n *   * path (optional) - the initial path to draw\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n */\nROS2D.PathShape = function (options) {\n  options = options || {};\n  var path = options.path;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n\n  // draw the line\n  this.graphics = new createjs.Graphics();\n\n  if (path !== null && typeof path !== \"undefined\") {\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.moveTo(\n      path.poses[0].pose.position.x / this.scaleX,\n      path.poses[0].pose.position.y / -this.scaleY\n    );\n    for (var i = 1; i < path.poses.length; ++i) {\n      this.graphics.lineTo(\n        path.poses[i].pose.position.x / this.scaleX,\n        path.poses[i].pose.position.y / -this.scaleY\n      );\n    }\n    this.graphics.endStroke();\n  }\n\n  // create the shape\n  createjs.Shape.call(this, this.graphics);\n};\n\n/**\n * Set the path to draw\n *\n * @param path of type nav_msgs/Path\n */\nROS2D.PathShape.prototype.setPath = function (path) {\n  this.graphics.clear();\n  if (path !== null && typeof path !== \"undefined\") {\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.moveTo(\n      path.poses[0].pose.position.x / this.scaleX,\n      path.poses[0].pose.position.y / -this.scaleY\n    );\n    for (var i = 1; i < path.poses.length; ++i) {\n      this.graphics.lineTo(\n        path.poses[i].pose.position.x / this.scaleX,\n        path.poses[i].pose.position.y / -this.scaleY\n      );\n    }\n    this.graphics.endStroke();\n  }\n};\n\nROS2D.PathShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A polygon that can be edited by an end user\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * lineSize (optional) - the width of the lines\n *   * lineColor (optional) - the createjs color of the lines\n *   * pointSize (optional) - the size of the points\n *   * pointColor (optional) - the createjs color of the points\n *   * fillColor (optional) - the createjs color to fill the polygon\n *   * lineCallBack (optional) - callback function for mouse interaction with a line\n *   * pointCallBack (optional) - callback function for mouse interaction with a point\n */\nROS2D.PolygonMarker = function (options) {\n  //\tvar that = this;\n  options = options || {};\n  this.lineSize = options.lineSize || 3;\n  this.lineColor =\n    options.lineColor || createjs.Graphics.getRGB(0, 0, 255, 0.66);\n  this.pointSize = options.pointSize || 10;\n  this.pointColor =\n    options.pointColor || createjs.Graphics.getRGB(255, 0, 0, 0.66);\n  this.fillColor =\n    options.pointColor || createjs.Graphics.getRGB(0, 255, 0, 0.33);\n  this.lineCallBack = options.lineCallBack;\n  this.pointCallBack = options.pointCallBack;\n\n  // Array of point shapes\n  //\tthis.points = [];\n  this.pointContainer = new createjs.Container();\n\n  // Array of line shapes\n  //\tthis.lines = [];\n  this.lineContainer = new createjs.Container();\n\n  this.fillShape = new createjs.Shape();\n\n  // Container with all the lines and points\n  createjs.Container.call(this);\n\n  this.addChild(this.fillShape);\n  this.addChild(this.lineContainer);\n  this.addChild(this.pointContainer);\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.createLineShape = function (\n  startPoint,\n  endPoint\n) {\n  var line = new createjs.Shape();\n  //\tline.graphics.setStrokeStyle(this.strokeSize);\n  //\tline.graphics.beginStroke(this.strokeColor);\n  //\tline.graphics.moveTo(startPoint.x, startPoint.y);\n  //\tline.graphics.lineTo(endPoint.x, endPoint.y);\n  this.editLineShape(line, startPoint, endPoint);\n\n  var that = this;\n  line.addEventListener(\"mousedown\", function (event) {\n    if (\n      that.lineCallBack !== null &&\n      typeof that.lineCallBack !== \"undefined\"\n    ) {\n      that.lineCallBack(\n        \"mousedown\",\n        event,\n        that.lineContainer.getChildIndex(event.target)\n      );\n    }\n  });\n\n  return line;\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.editLineShape = function (\n  line,\n  startPoint,\n  endPoint\n) {\n  line.graphics.clear();\n  line.graphics.setStrokeStyle(this.lineSize);\n  line.graphics.beginStroke(this.lineColor);\n  line.graphics.moveTo(startPoint.x, startPoint.y);\n  line.graphics.lineTo(endPoint.x, endPoint.y);\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.createPointShape = function (pos) {\n  var point = new createjs.Shape();\n  point.graphics.beginFill(this.pointColor);\n  point.graphics.drawCircle(0, 0, this.pointSize);\n  point.x = pos.x;\n  point.y = -pos.y;\n\n  var that = this;\n  point.addEventListener(\"mousedown\", function (event) {\n    if (\n      that.pointCallBack !== null &&\n      typeof that.pointCallBack !== \"undefined\"\n    ) {\n      that.pointCallBack(\n        \"mousedown\",\n        event,\n        that.pointContainer.getChildIndex(event.target)\n      );\n    }\n  });\n\n  return point;\n};\n\n/**\n * Adds a point to the polygon\n *\n * @param position of type ROSLIB.Vector3\n */\nROS2D.PolygonMarker.prototype.addPoint = function (pos) {\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChild(point);\n  var numPoints = this.pointContainer.getNumChildren();\n\n  // 0 points -> 1 point, 0 lines\n  // 1 point  -> 2 points, lines: add line between previous and new point, add line between new point and first point\n  // 2 points -> 3 points, 3 lines: change last line, add line between new point and first point\n  // 3 points -> 4 points, 4 lines: change last line, add line between new point and first point\n  // etc\n\n  if (numPoints < 2) {\n    // Now 1 point\n  } else if (numPoints < 3) {\n    // Now 2 points: add line between previous and new point\n    var line = this.createLineShape(\n      this.pointContainer.getChildAt(numPoints - 2),\n      point\n    );\n    this.lineContainer.addChild(line);\n  }\n  if (numPoints > 2) {\n    // Now 3 or more points: change last line\n    this.editLineShape(\n      this.lineContainer.getChildAt(numPoints - 2),\n      this.pointContainer.getChildAt(numPoints - 2),\n      point\n    );\n  }\n  if (numPoints > 1) {\n    // Now 2 or more points: add line between new point and first point\n    var lineEnd = this.createLineShape(\n      point,\n      this.pointContainer.getChildAt(0)\n    );\n    this.lineContainer.addChild(lineEnd);\n  }\n\n  this.drawFill();\n};\n\n/**\n * Removes a point from the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n */\nROS2D.PolygonMarker.prototype.remPoint = function (obj) {\n  var index;\n  //\tvar point;\n  if (obj instanceof createjs.Shape) {\n    index = this.pointContainer.getChildIndex(obj);\n    //\t\tpoint = obj;\n  } else {\n    index = obj;\n    //\t\tpoint = this.pointContainer.getChildAt(index);\n  }\n\n  // 0 points -> 0 points, 0 lines\n  // 1 point  -> 0 points, 0 lines\n  // 2 points -> 1 point,  0 lines: remove all lines\n  // 3 points -> 2 points, 2 lines: change line before point to remove, remove line after point to remove\n  // 4 points -> 3 points, 3 lines: change line before point to remove, remove line after point to remove\n  // etc\n\n  var numPoints = this.pointContainer.getNumChildren();\n\n  if (numPoints < 2) {\n  } else if (numPoints < 3) {\n    // 2 points: remove all lines\n    this.lineContainer.removeAllChildren();\n  } else {\n    // 3 or more points: change line before point to remove, remove line after point to remove\n    this.editLineShape(\n      this.lineContainer.getChildAt((index - 1 + numPoints) % numPoints),\n      this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints),\n      this.pointContainer.getChildAt((index + 1) % numPoints)\n    );\n    this.lineContainer.removeChildAt(index);\n  }\n  this.pointContainer.removeChildAt(index);\n  //\tthis.points.splice(index, 1);\n\n  this.drawFill();\n};\n\n/**\n * Moves a point of the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n * @param position of type ROSLIB.Vector3\n */\nROS2D.PolygonMarker.prototype.movePoint = function (obj, newPos) {\n  var index;\n  var point;\n  if (obj instanceof createjs.Shape) {\n    index = this.pointContainer.getChildIndex(obj);\n    point = obj;\n  } else {\n    index = obj;\n    point = this.pointContainer.getChildAt(index);\n  }\n  point.x = newPos.x;\n  point.y = -newPos.y;\n\n  var numPoints = this.pointContainer.getNumChildren();\n  if (numPoints > 1) {\n    // line before moved point\n    var line1 = this.lineContainer.getChildAt(\n      (index - 1 + numPoints) % numPoints\n    );\n    this.editLineShape(\n      line1,\n      this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints),\n      point\n    );\n\n    // line after moved point\n    var line2 = this.lineContainer.getChildAt(index);\n    this.editLineShape(\n      line2,\n      point,\n      this.pointContainer.getChildAt((index + 1) % numPoints)\n    );\n  }\n\n  this.drawFill();\n};\n\n/**\n * Splits a line of the polygon: inserts a point at the center of the line\n *\n * @param obj either an index (integer) or a line shape of the polygon\n */\nROS2D.PolygonMarker.prototype.splitLine = function (obj) {\n  var index;\n  var line;\n  if (obj instanceof createjs.Shape) {\n    index = this.lineContainer.getChildIndex(obj);\n    line = obj;\n  } else {\n    index = obj;\n    line = this.lineContainer.getChildAt(index);\n  }\n  var numPoints = this.pointContainer.getNumChildren();\n  var xs = this.pointContainer.getChildAt(index).x;\n  var ys = this.pointContainer.getChildAt(index).y;\n  var xe = this.pointContainer.getChildAt((index + 1) % numPoints).x;\n  var ye = this.pointContainer.getChildAt((index + 1) % numPoints).y;\n  var xh = (xs + xe) / 2.0;\n  var yh = (ys + ye) / 2.0;\n  var pos = new ROSLIB.Vector3({ x: xh, y: -yh });\n\n  // Add a point in the center of the line to split\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChildAt(point, index + 1);\n  ++numPoints;\n\n  // Add a line between the new point and the end of the line to split\n  var lineNew = this.createLineShape(\n    point,\n    this.pointContainer.getChildAt((index + 2) % numPoints)\n  );\n  this.lineContainer.addChildAt(lineNew, index + 1);\n\n  // Set the endpoint of the line to split to the new point\n  this.editLineShape(line, this.pointContainer.getChildAt(index), point);\n\n  this.drawFill();\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.drawFill = function () {\n  var numPoints = this.pointContainer.getNumChildren();\n  if (numPoints > 2) {\n    var g = this.fillShape.graphics;\n    g.clear();\n    g.setStrokeStyle(0);\n    g.moveTo(\n      this.pointContainer.getChildAt(0).x,\n      this.pointContainer.getChildAt(0).y\n    );\n    g.beginStroke();\n    g.beginFill(this.fillColor);\n    for (var i = 1; i < numPoints; ++i) {\n      g.lineTo(\n        this.pointContainer.getChildAt(i).x,\n        this.pointContainer.getChildAt(i).y\n      );\n    }\n    g.closePath();\n    g.endFill();\n    g.endStroke();\n  } else {\n    this.fillShape.graphics.clear();\n  }\n};\n\nROS2D.PolygonMarker.prototype.__proto__ = createjs.Container.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A trace of poses, handy to see where a robot has been\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * maxPoses (optional) - the maximum number of poses to keep, 0 for infinite\n *   * minDist (optional) - the minimal distance between poses to use the pose for drawing (default 0.05)\n */\nROS2D.TraceShape = function (options) {\n  //\tvar that = this;\n  options = options || {};\n  var pose = options.pose;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  this.maxPoses = options.maxPoses || 100;\n  this.minDist = options.minDist || 0.05;\n\n  // Store minDist as the square of it\n  this.minDist = this.minDist * this.minDist;\n\n  // Array of the poses\n  // TODO: do we need this?\n  this.poses = [];\n\n  // Create the graphics\n  this.graphics = new createjs.Graphics();\n  this.graphics.setStrokeStyle(this.strokeSize);\n  this.graphics.beginStroke(this.strokeColor);\n\n  // Add first pose if given\n  if (pose !== null && typeof pose !== \"undefined\") {\n    this.poses.push(pose);\n  }\n\n  // Create the shape\n  createjs.Shape.call(this, this.graphics);\n};\n\n/**\n * Adds a pose to the trace and updates the graphics\n *\n * @param pose of type ROSLIB.Pose\n */\nROS2D.TraceShape.prototype.addPose = function (pose) {\n  var last = this.poses.length - 1;\n  if (last < 0) {\n    this.poses.push(pose);\n    this.graphics.moveTo(\n      pose.position.x / this.scaleX,\n      pose.position.y / -this.scaleY\n    );\n  } else {\n    var prevX = this.poses[last].position.x;\n    var prevY = this.poses[last].position.y;\n    var dx = pose.position.x - prevX;\n    var dy = pose.position.y - prevY;\n    if (dx * dx + dy * dy > this.minDist) {\n      this.graphics.lineTo(\n        pose.position.x / this.scaleX,\n        pose.position.y / -this.scaleY\n      );\n      this.poses.push(pose);\n    }\n  }\n  if (this.maxPoses > 0 && this.maxPoses < this.poses.length) {\n    this.popFront();\n  }\n};\n\n/**\n * Removes front pose and updates the graphics\n */\nROS2D.TraceShape.prototype.popFront = function () {\n  if (this.poses.length > 0) {\n    this.poses.shift();\n    // TODO: shift drawing instructions rather than doing it all over\n    this.graphics.clear();\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.lineTo(\n      this.poses[0].position.x / this.scaleX,\n      this.poses[0].position.y / -this.scaleY\n    );\n    for (var i = 1; i < this.poses.length; ++i) {\n      this.graphics.lineTo(\n        this.poses[i].position.x / this.scaleX,\n        this.poses[i].position.y / -this.scaleY\n      );\n    }\n  }\n};\n\nROS2D.TraceShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds panning to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply panning to\n */\nROS2D.PanView = function (options) {\n  options = options || {};\n  this.rootObject = options.rootObject;\n\n  // get a handle to the stage\n  if (this.rootObject instanceof createjs.Stage) {\n    this.stage = this.rootObject;\n  } else {\n    this.stage = this.rootObject.getStage();\n  }\n\n  this.startPos = new ROSLIB.Vector3();\n};\n\nROS2D.PanView.prototype.startPan = function (startX, startY) {\n  this.startPos.x = startX;\n  this.startPos.y = startY;\n};\n\nROS2D.PanView.prototype.pan = function (curX, curY) {\n  this.stage.x += curX - this.startPos.x;\n  this.startPos.x = curX;\n  this.stage.y += curY - this.startPos.y;\n  this.startPos.y = curY;\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A Viewer can be used to render an interactive 2D scene to a HTML5 canvas.\n *\n * @constructor\n * @param options - object with following keys:\n *   * divID - the ID of the div to place the viewer in\n *   * width - the initial width, in pixels, of the canvas\n *   * height - the initial height, in pixels, of the canvas\n *   * background (optional) - the color to render the background, like '#efefef'\n */\nROS2D.Viewer = function (options) {\n  var that = this;\n  options = options || {};\n  var divID = options.divID;\n  this.width = options.width;\n  this.height = options.height;\n  var background = options.background || \"#111111\";\n\n  // create the canvas to render to\n  var canvas = document.createElement(\"canvas\");\n  canvas.width = this.width;\n  canvas.height = this.height;\n  canvas.style.background = background;\n  document.getElementById(divID).appendChild(canvas);\n  // create the easel to use\n  this.scene = new createjs.Stage(canvas);\n\n  // change Y axis center\n  this.scene.y = this.height;\n\n  // add the renderer to the page\n  document.getElementById(divID).appendChild(canvas);\n\n  // update at 30fps\n  createjs.Ticker.setFPS(30);\n  createjs.Ticker.addEventListener(\"tick\", this.scene);\n};\n\n/**\n * Add the given createjs object to the global scene in the viewer.\n *\n * @param object - the object to add\n */\nROS2D.Viewer.prototype.addObject = function (object) {\n  this.scene.addChild(object);\n};\n\n/**\n * Scale the scene to fit the given width and height into the current canvas.\n *\n * @param width - the width to scale to in meters\n * @param height - the height to scale to in meters\n */\nROS2D.Viewer.prototype.scaleToDimensions = function (width, height) {\n  // restore to values before shifting, if ocurred\n  this.scene.x =\n    typeof this.scene.x_prev_shift !== \"undefined\"\n      ? this.scene.x_prev_shift\n      : this.scene.x;\n  this.scene.y =\n    typeof this.scene.y_prev_shift !== \"undefined\"\n      ? this.scene.y_prev_shift\n      : this.scene.y;\n\n  // save scene scaling\n  this.scene.scaleX = this.width / width;\n  this.scene.scaleY = this.height / height;\n};\n\n/**\n * Shift the main view of the canvas by the given amount. This is based on the\n * ROS coordinate system. That is, Y is opposite that of a traditional canvas.\n *\n * @param x - the amount to shift by in the x direction in meters\n * @param y - the amount to shift by in the y direction in meters\n */\nROS2D.Viewer.prototype.shift = function (x, y) {\n  // save current offset\n  this.scene.x_prev_shift = this.scene.x;\n  this.scene.y_prev_shift = this.scene.y;\n\n  // shift scene by scaling the desired offset\n  this.scene.x -= x * this.scene.scaleX;\n  this.scene.y += y * this.scene.scaleY;\n};\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds zooming to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply zoom to\n *   * minScale (optional) - minimum scale to set to preserve precision\n */\nROS2D.ZoomView = function (options) {\n  options = options || {};\n  this.rootObject = options.rootObject;\n  this.minScale = options.minScale || 0.001;\n\n  // get a handle to the stage\n  if (this.rootObject instanceof createjs.Stage) {\n    this.stage = this.rootObject;\n  } else {\n    this.stage = this.rootObject.getStage();\n  }\n\n  this.center = new ROSLIB.Vector3();\n  this.startShift = new ROSLIB.Vector3();\n  this.startScale = new ROSLIB.Vector3();\n};\n\nROS2D.ZoomView.prototype.startZoom = function (centerX, centerY) {\n  this.center.x = centerX;\n  this.center.y = centerY;\n  this.startShift.x = this.stage.x;\n  this.startShift.y = this.stage.y;\n  this.startScale.x = this.stage.scaleX;\n  this.startScale.y = this.stage.scaleY;\n};\n\nROS2D.ZoomView.prototype.zoom = function (zoom) {\n  // Make sure scale doesn't become too small\n  if (this.startScale.x * zoom < this.minScale) {\n    zoom = this.minScale / this.startScale.x;\n  }\n  if (this.startScale.y * zoom < this.minScale) {\n    zoom = this.minScale / this.startScale.y;\n  }\n\n  this.stage.scaleX = this.startScale.x * zoom;\n  this.stage.scaleY = this.startScale.y * zoom;\n\n  this.stage.x =\n    this.startShift.x -\n    (this.center.x - this.startShift.x) *\n      (this.stage.scaleX / this.startScale.x - 1);\n  this.stage.y =\n    this.startShift.y -\n    (this.center.y - this.startShift.y) *\n      (this.stage.scaleY / this.startScale.y - 1);\n};\n\nexport default ROS2D"],"mappings":"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"},"metadata":{},"sourceType":"module"}
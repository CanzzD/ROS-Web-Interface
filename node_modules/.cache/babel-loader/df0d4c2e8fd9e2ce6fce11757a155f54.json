{"ast":null,"code":"import 'latest-createjs';\nimport ROSLIB from 'roslib';\nimport EventEmitter2 from 'eventemitter2';\nimport createjs from 'createjs-module';\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar ROS2D = ROS2D || {\n  REVISION: '0.9.0'\n};\n\n// convert the given global Stage coordinates to ROS coordinates\ncreatejs.Stage.prototype.globalToRos = function (x, y) {\n  var rosX = (x - this.x) / this.scaleX;\n  var rosY = (this.y - y) / this.scaleY;\n  return new ROSLIB.Vector3({\n    x: rosX,\n    y: rosY\n  });\n};\n\n// convert the given ROS coordinates to global Stage coordinates\ncreatejs.Stage.prototype.rosToGlobal = function (pos) {\n  var x = pos.x * this.scaleX + this.x;\n  var y = pos.y * this.scaleY + this.y;\n  return {\n    x: x,\n    y: y\n  };\n};\n\n// convert a ROS quaternion to theta in degrees\ncreatejs.Stage.prototype.rosQuaternionToGlobalTheta = function (orientation) {\n  // See https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Rotation_matrices\n  // here we use [x y z] = R * [1 0 0]\n  var q0 = orientation.w;\n  var q1 = orientation.x;\n  var q2 = orientation.y;\n  var q3 = orientation.z;\n  // Canvas rotation is clock wise and in degrees\n  return -Math.atan2(2 * (q0 * q3 + q1 * q2), 1 - 2 * (q2 * q2 + q3 * q3)) * 180.0 / Math.PI;\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid map meta data message\n *   * image - the image URL to load\n */\nROS2D.ImageMap = function (options) {\n  options = options || {};\n  var message = options.message;\n  var image = options.image;\n\n  // save the metadata we need\n  this.pose = new ROSLIB.Pose({\n    position: message.origin.position,\n    orientation: message.origin.orientation\n  });\n\n  // set the size\n  this.width = message.width;\n  this.height = message.height;\n\n  // create the bitmap\n  createjs.Bitmap.call(this, image);\n  // change Y direction\n  this.y = -this.height * message.resolution;\n\n  // scale the image\n  this.scaleX = message.resolution;\n  this.scaleY = message.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY;\n\n  // set the pose\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n};\nROS2D.ImageMap.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the image URL to load\n *   * rootObject (optional) - the root object to add this marker to\n */\nROS2D.ImageMapClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  this.image = options.image;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // create an empty shape to start with\n  this.currentImage = new createjs.Shape();\n\n  // subscribe to the topic\n  var rosTopic = new ROSLIB.Topic({\n    ros: ros,\n    name: topic,\n    messageType: 'nav_msgs/MapMetaData'\n  });\n  rosTopic.subscribe(function (message) {\n    // we only need this once\n    rosTopic.unsubscribe();\n\n    // create the image\n    that.currentImage = new ROS2D.ImageMap({\n      message: message,\n      image: that.image\n    });\n    that.rootObject.addChild(that.currentImage);\n    // work-around for a bug in easeljs -- needs a second object to render correctly\n    that.rootObject.addChild(new ROS2D.Grid({\n      size: 1\n    }));\n    that.emit('change');\n  });\n};\nROS2D.ImageMapClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An OccupancyGrid can convert a ROS occupancy grid message into a createjs Bitmap object.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid message\n */\nROS2D.OccupancyGrid = function (options) {\n  options = options || {};\n  var message = options.message;\n\n  // internal drawing canvas\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n\n  // save the metadata we need\n  this.pose = new ROSLIB.Pose({\n    position: message.info.origin.position,\n    orientation: message.info.origin.orientation\n  });\n\n  // set the size\n  this.width = message.info.width;\n  this.height = message.info.height;\n  canvas.width = this.width;\n  canvas.height = this.height;\n  var imageData = context.createImageData(this.width, this.height);\n  for (var row = 0; row < this.height; row++) {\n    for (var col = 0; col < this.width; col++) {\n      // determine the index into the map data\n      var mapI = col + (this.height - row - 1) * this.width;\n      // determine the value\n      var data = message.data[mapI];\n      var val;\n      if (data === 100) {\n        val = 0;\n      } else if (data === 0) {\n        val = 255;\n      } else {\n        val = 127;\n      }\n\n      // determine the index into the image data array\n      var i = (col + row * this.width) * 4;\n      // r\n      imageData.data[i] = val;\n      // g\n      imageData.data[++i] = val;\n      // b\n      imageData.data[++i] = val;\n      // a\n      imageData.data[++i] = 255;\n    }\n  }\n  context.putImageData(imageData, 0, 0);\n\n  // create the bitmap\n  createjs.Bitmap.call(this, canvas);\n  // change Y direction\n  this.y = -this.height * message.info.resolution;\n\n  // scale the image\n  this.scaleX = message.info.resolution;\n  this.scaleY = message.info.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY;\n\n  // set the pose\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n};\nROS2D.OccupancyGrid.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A map that listens to a given occupancy grid topic.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n */\nROS2D.OccupancyGridClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || '/map';\n  this.continuous = options.continuous;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // current grid that is displayed\n  // create an empty shape to start with, so that the order remains correct.\n  this.currentGrid = new createjs.Shape();\n  this.rootObject.addChild(this.currentGrid);\n  // work-around for a bug in easeljs -- needs a second object to render correctly\n  this.rootObject.addChild(new ROS2D.Grid({\n    size: 1\n  }));\n\n  // subscribe to the topic\n  var rosTopic = new ROSLIB.Topic({\n    ros: ros,\n    name: topic,\n    messageType: 'nav_msgs/OccupancyGrid',\n    compression: 'png'\n  });\n  rosTopic.subscribe(function (message) {\n    // check for an old map\n    var index = null;\n    if (that.currentGrid) {\n      index = that.rootObject.getChildIndex(that.currentGrid);\n      that.rootObject.removeChild(that.currentGrid);\n    }\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message: message\n    });\n    if (index !== null) {\n      that.rootObject.addChildAt(that.currentGrid, index);\n    } else {\n      that.rootObject.addChild(that.currentGrid);\n    }\n    that.emit('change');\n\n    // check if we should unsubscribe\n    if (!that.continuous) {\n      rosTopic.unsubscribe();\n    }\n  });\n};\nROS2D.OccupancyGridClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * @author Jihoon Lee- jihoonlee.in@gmail.com\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A static map that receives from map_server.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * service (optional) - the map topic to listen to, like '/static_map'\n *   * rootObject (optional) - the root object to add this marker to\n */\nROS2D.OccupancyGridSrvClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var service = options.service || '/static_map';\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // current grid that is displayed\n  this.currentGrid = null;\n\n  // Setting up to the service\n  var rosService = new ROSLIB.Service({\n    ros: ros,\n    name: service,\n    serviceType: 'nav_msgs/GetMap',\n    compression: 'png'\n  });\n  rosService.callService(new ROSLIB.ServiceRequest(), function (response) {\n    // check for an old map\n    if (that.currentGrid) {\n      that.rootObject.removeChild(that.currentGrid);\n    }\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message: response.map\n    });\n    that.rootObject.addChild(that.currentGrid);\n    that.emit('change', that.currentGrid);\n  });\n};\nROS2D.OccupancyGridSrvClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * An arrow with line and triangular head, based on the navigation arrow.\n * Aims to the left at 0 rotation, as would be expected.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.ArrowShape = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(255, 255, 30);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 20, 40);\n  var pulse = options.pulse;\n\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n  var headLen = size / 3.0;\n  var headWidth = headLen * 2.0 / 3.0;\n  graphics.setStrokeStyle(strokeSize);\n  graphics.beginStroke(strokeColor);\n  graphics.moveTo(0, 0);\n  graphics.lineTo(size - headLen, 0);\n  graphics.beginFill(fillColor);\n  graphics.moveTo(size, 0);\n  graphics.lineTo(size - headLen, headWidth / 2.0);\n  graphics.lineTo(size - headLen, -headWidth / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke();\n\n  // create the shape\n  createjs.Shape.call(this, graphics);\n\n  // check if we are pulsing\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener('tick', function () {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = ++growCount < 10;\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = --growCount < 0;\n      }\n    });\n  }\n};\nROS2D.ArrowShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Raffaello Bonghi - raffaello.bonghi@officinerobotiche.it\n */\n\n/**\n * A Grid object draw in map.\n *\n * @constructor\n * @param options - object with following keys:\n *  * size (optional) - the size of the grid\n *  * cellSize (optional) - the cell size of map\n *  * lineWidth (optional) - the width of the lines in the grid\n */\nROS2D.Grid = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var cellSize = options.cellSize || 0.1;\n  var lineWidth = options.lineWidth || 0.001;\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n  // line width\n  graphics.setStrokeStyle(lineWidth * 5);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n  graphics.moveTo(-size * cellSize, 0);\n  graphics.lineTo(size * cellSize, 0);\n  graphics.moveTo(0, -size * cellSize);\n  graphics.lineTo(0, size * cellSize);\n  graphics.endFill();\n  graphics.endStroke();\n  graphics.setStrokeStyle(lineWidth);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n  for (var i = -size; i <= size; i++) {\n    graphics.moveTo(-size * cellSize, i * cellSize);\n    graphics.lineTo(size * cellSize, i * cellSize);\n    graphics.moveTo(i * cellSize, -size * cellSize);\n    graphics.lineTo(i * cellSize, size * cellSize);\n  }\n  graphics.endFill();\n  graphics.endStroke();\n  // create the shape\n  createjs.Shape.call(this, graphics);\n};\nROS2D.Grid.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A navigation arrow is a directed triangle that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.NavigationArrow = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse;\n\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n  // line width\n  graphics.setStrokeStyle(strokeSize);\n  graphics.moveTo(-size / 2.0, -size / 2.0);\n  graphics.beginStroke(strokeColor);\n  graphics.beginFill(fillColor);\n  graphics.lineTo(size, 0);\n  graphics.lineTo(-size / 2.0, size / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke();\n\n  // create the shape\n  createjs.Shape.call(this, graphics);\n\n  // check if we are pulsing\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener('tick', function () {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = ++growCount < 10;\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = --growCount < 0;\n      }\n    });\n  }\n};\nROS2D.NavigationArrow.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Inigo Gonzalez - ingonza85@gmail.com\n */\n\n/**\n * A navigation image that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * image - the image to use as a marker\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.NavigationImage = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var image_url = options.image;\n  var pulse = options.pulse;\n  var alpha = options.alpha || 1;\n  var originals = {};\n  var paintImage = function () {\n    createjs.Bitmap.call(that, image);\n    var scale = calculateScale(size);\n    that.alpha = alpha;\n    that.scaleX = scale;\n    that.scaleY = scale;\n    that.regY = that.image.height / 2;\n    that.regX = that.image.width / 2;\n    originals['rotation'] = that.rotation;\n    Object.defineProperty(that, 'rotation', {\n      get: function () {\n        return originals['rotation'] + 90;\n      },\n      set: function (value) {\n        originals['rotation'] = value;\n      }\n    });\n    if (pulse) {\n      // have the model \"pulse\"\n      var growCount = 0;\n      var growing = true;\n      var SCALE_SIZE = 1.020;\n      createjs.Ticker.addEventListener('tick', function () {\n        if (growing) {\n          that.scaleX *= SCALE_SIZE;\n          that.scaleY *= SCALE_SIZE;\n          growing = ++growCount < 10;\n        } else {\n          that.scaleX /= SCALE_SIZE;\n          that.scaleY /= SCALE_SIZE;\n          growing = --growCount < 0;\n        }\n      });\n    }\n  };\n  var calculateScale = function (_size) {\n    return _size / image.width;\n  };\n  var image = new Image();\n  image.onload = paintImage;\n  image.src = image_url;\n};\nROS2D.NavigationImage.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A shape to draw a nav_msgs/Path msg\n *\n * @constructor\n * @param options - object with following keys:\n *   * path (optional) - the initial path to draw\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n */\nROS2D.PathShape = function (options) {\n  options = options || {};\n  var path = options.path;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n\n  // draw the line\n  this.graphics = new createjs.Graphics();\n  if (path !== null && typeof path !== 'undefined') {\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n    for (var i = 1; i < path.poses.length; ++i) {\n      this.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n    }\n    this.graphics.endStroke();\n  }\n\n  // create the shape\n  createjs.Shape.call(this, this.graphics);\n};\n\n/**\n * Set the path to draw\n *\n * @param path of type nav_msgs/Path\n */\nROS2D.PathShape.prototype.setPath = function (path) {\n  this.graphics.clear();\n  if (path !== null && typeof path !== 'undefined') {\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n    for (var i = 1; i < path.poses.length; ++i) {\n      this.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n    }\n    this.graphics.endStroke();\n  }\n};\nROS2D.PathShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A polygon that can be edited by an end user\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * lineSize (optional) - the width of the lines\n *   * lineColor (optional) - the createjs color of the lines\n *   * pointSize (optional) - the size of the points\n *   * pointColor (optional) - the createjs color of the points\n *   * fillColor (optional) - the createjs color to fill the polygon\n *   * lineCallBack (optional) - callback function for mouse interaction with a line\n *   * pointCallBack (optional) - callback function for mouse interaction with a point\n */\nROS2D.PolygonMarker = function (options) {\n  //\tvar that = this;\n  options = options || {};\n  this.lineSize = options.lineSize || 3;\n  this.lineColor = options.lineColor || createjs.Graphics.getRGB(0, 0, 255, 0.66);\n  this.pointSize = options.pointSize || 10;\n  this.pointColor = options.pointColor || createjs.Graphics.getRGB(255, 0, 0, 0.66);\n  this.fillColor = options.pointColor || createjs.Graphics.getRGB(0, 255, 0, 0.33);\n  this.lineCallBack = options.lineCallBack;\n  this.pointCallBack = options.pointCallBack;\n\n  // Array of point shapes\n  //\tthis.points = [];\n  this.pointContainer = new createjs.Container();\n\n  // Array of line shapes\n  //\tthis.lines = [];\n  this.lineContainer = new createjs.Container();\n  this.fillShape = new createjs.Shape();\n\n  // Container with all the lines and points\n  createjs.Container.call(this);\n  this.addChild(this.fillShape);\n  this.addChild(this.lineContainer);\n  this.addChild(this.pointContainer);\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.createLineShape = function (startPoint, endPoint) {\n  var line = new createjs.Shape();\n  //\tline.graphics.setStrokeStyle(this.strokeSize);\n  //\tline.graphics.beginStroke(this.strokeColor);\n  //\tline.graphics.moveTo(startPoint.x, startPoint.y);\n  //\tline.graphics.lineTo(endPoint.x, endPoint.y);\n  this.editLineShape(line, startPoint, endPoint);\n  var that = this;\n  line.addEventListener('mousedown', function (event) {\n    if (that.lineCallBack !== null && typeof that.lineCallBack !== 'undefined') {\n      that.lineCallBack('mousedown', event, that.lineContainer.getChildIndex(event.target));\n    }\n  });\n  return line;\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.editLineShape = function (line, startPoint, endPoint) {\n  line.graphics.clear();\n  line.graphics.setStrokeStyle(this.lineSize);\n  line.graphics.beginStroke(this.lineColor);\n  line.graphics.moveTo(startPoint.x, startPoint.y);\n  line.graphics.lineTo(endPoint.x, endPoint.y);\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.createPointShape = function (pos) {\n  var point = new createjs.Shape();\n  point.graphics.beginFill(this.pointColor);\n  point.graphics.drawCircle(0, 0, this.pointSize);\n  point.x = pos.x;\n  point.y = -pos.y;\n  var that = this;\n  point.addEventListener('mousedown', function (event) {\n    if (that.pointCallBack !== null && typeof that.pointCallBack !== 'undefined') {\n      that.pointCallBack('mousedown', event, that.pointContainer.getChildIndex(event.target));\n    }\n  });\n  return point;\n};\n\n/**\n * Adds a point to the polygon\n *\n * @param position of type ROSLIB.Vector3\n */\nROS2D.PolygonMarker.prototype.addPoint = function (pos) {\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChild(point);\n  var numPoints = this.pointContainer.getNumChildren();\n\n  // 0 points -> 1 point, 0 lines\n  // 1 point  -> 2 points, lines: add line between previous and new point, add line between new point and first point\n  // 2 points -> 3 points, 3 lines: change last line, add line between new point and first point\n  // 3 points -> 4 points, 4 lines: change last line, add line between new point and first point\n  // etc\n\n  if (numPoints < 2) {\n    // Now 1 point\n  } else if (numPoints < 3) {\n    // Now 2 points: add line between previous and new point\n    var line = this.createLineShape(this.pointContainer.getChildAt(numPoints - 2), point);\n    this.lineContainer.addChild(line);\n  }\n  if (numPoints > 2) {\n    // Now 3 or more points: change last line\n    this.editLineShape(this.lineContainer.getChildAt(numPoints - 2), this.pointContainer.getChildAt(numPoints - 2), point);\n  }\n  if (numPoints > 1) {\n    // Now 2 or more points: add line between new point and first point\n    var lineEnd = this.createLineShape(point, this.pointContainer.getChildAt(0));\n    this.lineContainer.addChild(lineEnd);\n  }\n  this.drawFill();\n};\n\n/**\n * Removes a point from the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n */\nROS2D.PolygonMarker.prototype.remPoint = function (obj) {\n  var index;\n  //\tvar point;\n  if (obj instanceof createjs.Shape) {\n    index = this.pointContainer.getChildIndex(obj);\n    //\t\tpoint = obj;\n  } else {\n    index = obj;\n    //\t\tpoint = this.pointContainer.getChildAt(index);\n  }\n\n  // 0 points -> 0 points, 0 lines\n  // 1 point  -> 0 points, 0 lines\n  // 2 points -> 1 point,  0 lines: remove all lines\n  // 3 points -> 2 points, 2 lines: change line before point to remove, remove line after point to remove\n  // 4 points -> 3 points, 3 lines: change line before point to remove, remove line after point to remove\n  // etc\n\n  var numPoints = this.pointContainer.getNumChildren();\n  if (numPoints < 2) {} else if (numPoints < 3) {\n    // 2 points: remove all lines\n    this.lineContainer.removeAllChildren();\n  } else {\n    // 3 or more points: change line before point to remove, remove line after point to remove\n    this.editLineShape(this.lineContainer.getChildAt((index - 1 + numPoints) % numPoints), this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints), this.pointContainer.getChildAt((index + 1) % numPoints));\n    this.lineContainer.removeChildAt(index);\n  }\n  this.pointContainer.removeChildAt(index);\n  //\tthis.points.splice(index, 1);\n\n  this.drawFill();\n};\n\n/**\n * Moves a point of the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n * @param position of type ROSLIB.Vector3\n */\nROS2D.PolygonMarker.prototype.movePoint = function (obj, newPos) {\n  var index;\n  var point;\n  if (obj instanceof createjs.Shape) {\n    index = this.pointContainer.getChildIndex(obj);\n    point = obj;\n  } else {\n    index = obj;\n    point = this.pointContainer.getChildAt(index);\n  }\n  point.x = newPos.x;\n  point.y = -newPos.y;\n  var numPoints = this.pointContainer.getNumChildren();\n  if (numPoints > 1) {\n    // line before moved point\n    var line1 = this.lineContainer.getChildAt((index - 1 + numPoints) % numPoints);\n    this.editLineShape(line1, this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints), point);\n\n    // line after moved point\n    var line2 = this.lineContainer.getChildAt(index);\n    this.editLineShape(line2, point, this.pointContainer.getChildAt((index + 1) % numPoints));\n  }\n  this.drawFill();\n};\n\n/**\n * Splits a line of the polygon: inserts a point at the center of the line\n *\n * @param obj either an index (integer) or a line shape of the polygon\n */\nROS2D.PolygonMarker.prototype.splitLine = function (obj) {\n  var index;\n  var line;\n  if (obj instanceof createjs.Shape) {\n    index = this.lineContainer.getChildIndex(obj);\n    line = obj;\n  } else {\n    index = obj;\n    line = this.lineContainer.getChildAt(index);\n  }\n  var numPoints = this.pointContainer.getNumChildren();\n  var xs = this.pointContainer.getChildAt(index).x;\n  var ys = this.pointContainer.getChildAt(index).y;\n  var xe = this.pointContainer.getChildAt((index + 1) % numPoints).x;\n  var ye = this.pointContainer.getChildAt((index + 1) % numPoints).y;\n  var xh = (xs + xe) / 2.0;\n  var yh = (ys + ye) / 2.0;\n  var pos = new ROSLIB.Vector3({\n    x: xh,\n    y: -yh\n  });\n\n  // Add a point in the center of the line to split\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChildAt(point, index + 1);\n  ++numPoints;\n\n  // Add a line between the new point and the end of the line to split\n  var lineNew = this.createLineShape(point, this.pointContainer.getChildAt((index + 2) % numPoints));\n  this.lineContainer.addChildAt(lineNew, index + 1);\n\n  // Set the endpoint of the line to split to the new point\n  this.editLineShape(line, this.pointContainer.getChildAt(index), point);\n  this.drawFill();\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.drawFill = function () {\n  var numPoints = this.pointContainer.getNumChildren();\n  if (numPoints > 2) {\n    var g = this.fillShape.graphics;\n    g.clear();\n    g.setStrokeStyle(0);\n    g.moveTo(this.pointContainer.getChildAt(0).x, this.pointContainer.getChildAt(0).y);\n    g.beginStroke();\n    g.beginFill(this.fillColor);\n    for (var i = 1; i < numPoints; ++i) {\n      g.lineTo(this.pointContainer.getChildAt(i).x, this.pointContainer.getChildAt(i).y);\n    }\n    g.closePath();\n    g.endFill();\n    g.endStroke();\n  } else {\n    this.fillShape.graphics.clear();\n  }\n};\nROS2D.PolygonMarker.prototype.__proto__ = createjs.Container.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A trace of poses, handy to see where a robot has been\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * maxPoses (optional) - the maximum number of poses to keep, 0 for infinite\n *   * minDist (optional) - the minimal distance between poses to use the pose for drawing (default 0.05)\n */\nROS2D.TraceShape = function (options) {\n  //\tvar that = this;\n  options = options || {};\n  var pose = options.pose;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  this.maxPoses = options.maxPoses || 100;\n  this.minDist = options.minDist || 0.05;\n\n  // Store minDist as the square of it\n  this.minDist = this.minDist * this.minDist;\n\n  // Array of the poses\n  // TODO: do we need this?\n  this.poses = [];\n\n  // Create the graphics\n  this.graphics = new createjs.Graphics();\n  this.graphics.setStrokeStyle(this.strokeSize);\n  this.graphics.beginStroke(this.strokeColor);\n\n  // Add first pose if given\n  if (pose !== null && typeof pose !== 'undefined') {\n    this.poses.push(pose);\n  }\n\n  // Create the shape\n  createjs.Shape.call(this, this.graphics);\n};\n\n/**\n * Adds a pose to the trace and updates the graphics\n *\n * @param pose of type ROSLIB.Pose\n */\nROS2D.TraceShape.prototype.addPose = function (pose) {\n  var last = this.poses.length - 1;\n  if (last < 0) {\n    this.poses.push(pose);\n    this.graphics.moveTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n  } else {\n    var prevX = this.poses[last].position.x;\n    var prevY = this.poses[last].position.y;\n    var dx = pose.position.x - prevX;\n    var dy = pose.position.y - prevY;\n    if (dx * dx + dy * dy > this.minDist) {\n      this.graphics.lineTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n      this.poses.push(pose);\n    }\n  }\n  if (this.maxPoses > 0 && this.maxPoses < this.poses.length) {\n    this.popFront();\n  }\n};\n\n/**\n * Removes front pose and updates the graphics\n */\nROS2D.TraceShape.prototype.popFront = function () {\n  if (this.poses.length > 0) {\n    this.poses.shift();\n    // TODO: shift drawing instructions rather than doing it all over\n    this.graphics.clear();\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.lineTo(this.poses[0].position.x / this.scaleX, this.poses[0].position.y / -this.scaleY);\n    for (var i = 1; i < this.poses.length; ++i) {\n      this.graphics.lineTo(this.poses[i].position.x / this.scaleX, this.poses[i].position.y / -this.scaleY);\n    }\n  }\n};\nROS2D.TraceShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds panning to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply panning to\n */\nROS2D.PanView = function (options) {\n  options = options || {};\n  this.rootObject = options.rootObject;\n\n  // get a handle to the stage\n  if (this.rootObject instanceof createjs.Stage) {\n    this.stage = this.rootObject;\n  } else {\n    this.stage = this.rootObject.getStage();\n  }\n  this.startPos = new ROSLIB.Vector3();\n};\nROS2D.PanView.prototype.startPan = function (startX, startY) {\n  this.startPos.x = startX;\n  this.startPos.y = startY;\n};\nROS2D.PanView.prototype.pan = function (curX, curY) {\n  this.stage.x += curX - this.startPos.x;\n  this.startPos.x = curX;\n  this.stage.y += curY - this.startPos.y;\n  this.startPos.y = curY;\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A Viewer can be used to render an interactive 2D scene to a HTML5 canvas.\n *\n * @constructor\n * @param options - object with following keys:\n *   * divID - the ID of the div to place the viewer in\n *   * width - the initial width, in pixels, of the canvas\n *   * height - the initial height, in pixels, of the canvas\n *   * background (optional) - the color to render the background, like '#efefef'\n */\nROS2D.Viewer = function (options) {\n  var that = this;\n  options = options || {};\n  var divID = options.divID;\n  this.width = options.width;\n  this.height = options.height;\n  var background = options.background || '#111111';\n\n  // create the canvas to render to\n  var canvas = document.createElement('canvas');\n  canvas.width = this.width;\n  canvas.height = this.height;\n  canvas.style.background = background;\n  document.getElementById(divID).appendChild(canvas);\n  // create the easel to use\n  this.scene = new createjs.Stage(canvas);\n\n  // change Y axis center\n  this.scene.y = this.height;\n\n  // add the renderer to the page\n  document.getElementById(divID).appendChild(canvas);\n\n  // update at 30fps\n  createjs.Ticker.setFPS(30);\n  createjs.Ticker.addEventListener('tick', this.scene);\n};\n\n/**\n * Add the given createjs object to the global scene in the viewer.\n *\n * @param object - the object to add\n */\nROS2D.Viewer.prototype.addObject = function (object) {\n  this.scene.addChild(object);\n};\n\n/**\n * Scale the scene to fit the given width and height into the current canvas.\n *\n * @param width - the width to scale to in meters\n * @param height - the height to scale to in meters\n */\nROS2D.Viewer.prototype.scaleToDimensions = function (width, height) {\n  // restore to values before shifting, if ocurred\n  this.scene.x = typeof this.scene.x_prev_shift !== 'undefined' ? this.scene.x_prev_shift : this.scene.x;\n  this.scene.y = typeof this.scene.y_prev_shift !== 'undefined' ? this.scene.y_prev_shift : this.scene.y;\n\n  // save scene scaling\n  this.scene.scaleX = this.width / width;\n  this.scene.scaleY = this.height / height;\n};\n\n/**\n * Shift the main view of the canvas by the given amount. This is based on the\n * ROS coordinate system. That is, Y is opposite that of a traditional canvas.\n *\n * @param x - the amount to shift by in the x direction in meters\n * @param y - the amount to shift by in the y direction in meters\n */\nROS2D.Viewer.prototype.shift = function (x, y) {\n  // save current offset\n  this.scene.x_prev_shift = this.scene.x;\n  this.scene.y_prev_shift = this.scene.y;\n\n  // shift scene by scaling the desired offset\n  this.scene.x -= x * this.scene.scaleX;\n  this.scene.y += y * this.scene.scaleY;\n};\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds zooming to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply zoom to\n *   * minScale (optional) - minimum scale to set to preserve precision\n */\nROS2D.ZoomView = function (options) {\n  options = options || {};\n  this.rootObject = options.rootObject;\n  this.minScale = options.minScale || 0.001;\n\n  // get a handle to the stage\n  if (this.rootObject instanceof createjs.Stage) {\n    this.stage = this.rootObject;\n  } else {\n    this.stage = this.rootObject.getStage();\n  }\n  this.center = new ROSLIB.Vector3();\n  this.startShift = new ROSLIB.Vector3();\n  this.startScale = new ROSLIB.Vector3();\n};\nROS2D.ZoomView.prototype.startZoom = function (centerX, centerY) {\n  this.center.x = centerX;\n  this.center.y = centerY;\n  this.startShift.x = this.stage.x;\n  this.startShift.y = this.stage.y;\n  this.startScale.x = this.stage.scaleX;\n  this.startScale.y = this.stage.scaleY;\n};\nROS2D.ZoomView.prototype.zoom = function (zoom) {\n  // Make sure scale doesn't become too small\n  if (this.startScale.x * zoom < this.minScale) {\n    zoom = this.minScale / this.startScale.x;\n  }\n  if (this.startScale.y * zoom < this.minScale) {\n    zoom = this.minScale / this.startScale.y;\n  }\n  this.stage.scaleX = this.startScale.x * zoom;\n  this.stage.scaleY = this.startScale.y * zoom;\n  this.stage.x = this.startShift.x - (this.center.x - this.startShift.x) * (this.stage.scaleX / this.startScale.x - 1);\n  this.stage.y = this.startShift.y - (this.center.y - this.startShift.y) * (this.stage.scaleY / this.startScale.y - 1);\n};\nexport default ROS2D;","map":{"version":3,"names":["ROSLIB","EventEmitter2","createjs","ROS2D","REVISION","Stage","prototype","globalToRos","x","y","rosX","scaleX","rosY","scaleY","Vector3","rosToGlobal","pos","rosQuaternionToGlobalTheta","orientation","q0","w","q1","q2","q3","z","Math","atan2","PI","ImageMap","options","message","image","pose","Pose","position","origin","width","height","Bitmap","call","resolution","__proto__","ImageMapClient","that","ros","topic","rootObject","Container","currentImage","Shape","rosTopic","Topic","name","messageType","subscribe","unsubscribe","addChild","Grid","size","emit","OccupancyGrid","canvas","document","createElement","context","getContext","info","imageData","createImageData","row","col","mapI","data","val","i","putImageData","OccupancyGridClient","continuous","currentGrid","compression","index","getChildIndex","removeChild","addChildAt","OccupancyGridSrvClient","service","rosService","Service","serviceType","callService","ServiceRequest","response","map","ArrowShape","strokeSize","strokeColor","Graphics","getRGB","fillColor","pulse","graphics","headLen","headWidth","setStrokeStyle","beginStroke","moveTo","lineTo","beginFill","closePath","endFill","endStroke","growCount","growing","Ticker","addEventListener","cellSize","lineWidth","NavigationArrow","NavigationImage","image_url","alpha","originals","paintImage","scale","calculateScale","regY","regX","rotation","Object","defineProperty","get","set","value","SCALE_SIZE","_size","Image","onload","src","PathShape","path","poses","length","setPath","clear","PolygonMarker","lineSize","lineColor","pointSize","pointColor","lineCallBack","pointCallBack","pointContainer","lineContainer","fillShape","createLineShape","startPoint","endPoint","line","editLineShape","event","target","createPointShape","point","drawCircle","addPoint","numPoints","getNumChildren","getChildAt","lineEnd","drawFill","remPoint","obj","removeAllChildren","removeChildAt","movePoint","newPos","line1","line2","splitLine","xs","ys","xe","ye","xh","yh","lineNew","g","TraceShape","maxPoses","minDist","push","addPose","last","prevX","prevY","dx","dy","popFront","shift","PanView","stage","getStage","startPos","startPan","startX","startY","pan","curX","curY","Viewer","divID","background","style","getElementById","appendChild","scene","setFPS","addObject","object","scaleToDimensions","x_prev_shift","y_prev_shift","ZoomView","minScale","center","startShift","startScale","startZoom","centerX","centerY","zoom"],"sources":["/Users/canozdemir/Downloads/web-based-navigation-rosbridge/src/components/vendor/ros2d.js"],"sourcesContent":["import 'latest-createjs'\nimport ROSLIB from 'roslib'\nimport EventEmitter2 from 'eventemitter2'\nimport createjs from 'createjs-module';\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar ROS2D = ROS2D || {\n  REVISION : '0.9.0'\n};\n\n// convert the given global Stage coordinates to ROS coordinates\ncreatejs.Stage.prototype.globalToRos = function(x, y) {\n  var rosX = (x - this.x) / this.scaleX;\n  var rosY = (this.y - y) / this.scaleY;\n  return new ROSLIB.Vector3({\n    x : rosX,\n    y : rosY\n  });\n};\n\n// convert the given ROS coordinates to global Stage coordinates\ncreatejs.Stage.prototype.rosToGlobal = function(pos) {\n  var x = pos.x * this.scaleX + this.x;\n  var y = pos.y * this.scaleY + this.y;\n  return {\n    x : x,\n    y : y\n  };\n};\n\n// convert a ROS quaternion to theta in degrees\ncreatejs.Stage.prototype.rosQuaternionToGlobalTheta = function(orientation) {\n  // See https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Rotation_matrices\n  // here we use [x y z] = R * [1 0 0]\n  var q0 = orientation.w;\n  var q1 = orientation.x;\n  var q2 = orientation.y;\n  var q3 = orientation.z;\n  // Canvas rotation is clock wise and in degrees\n  return -Math.atan2(2 * (q0 * q3 + q1 * q2), 1 - 2 * (q2 * q2 + q3 * q3)) * 180.0 / Math.PI;\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid map meta data message\n *   * image - the image URL to load\n */\nROS2D.ImageMap = function(options) {\n  options = options || {};\n  var message = options.message;\n  var image = options.image;\n\n  // save the metadata we need\n  this.pose = new ROSLIB.Pose({\n    position : message.origin.position,\n    orientation : message.origin.orientation\n  });\n\n  // set the size\n  this.width = message.width;\n  this.height = message.height;\n\n  // create the bitmap\n  createjs.Bitmap.call(this, image);\n  // change Y direction\n  this.y = -this.height * message.resolution;\n\n  // scale the image\n  this.scaleX = message.resolution;\n  this.scaleY = message.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY;\n\n  // set the pose\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n};\nROS2D.ImageMap.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the image URL to load\n *   * rootObject (optional) - the root object to add this marker to\n */\nROS2D.ImageMapClient = function(options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  this.image = options.image;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // create an empty shape to start with\n  this.currentImage = new createjs.Shape();\n\n  // subscribe to the topic\n  var rosTopic = new ROSLIB.Topic({\n    ros : ros,\n    name : topic,\n    messageType : 'nav_msgs/MapMetaData'\n  });\n\n  rosTopic.subscribe(function(message) {\n    // we only need this once\n    rosTopic.unsubscribe();\n\n    // create the image\n    that.currentImage = new ROS2D.ImageMap({\n      message : message,\n      image : that.image\n    });\n    that.rootObject.addChild(that.currentImage);\n    // work-around for a bug in easeljs -- needs a second object to render correctly\n    that.rootObject.addChild(new ROS2D.Grid({size:1}));\n\n    that.emit('change');\n  });\n};\nROS2D.ImageMapClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An OccupancyGrid can convert a ROS occupancy grid message into a createjs Bitmap object.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid message\n */\nROS2D.OccupancyGrid = function(options) {\n  options = options || {};\n  var message = options.message;\n\n  // internal drawing canvas\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n\n  // save the metadata we need\n  this.pose = new ROSLIB.Pose({\n    position : message.info.origin.position,\n    orientation : message.info.origin.orientation\n  });\n\n  // set the size\n  this.width = message.info.width;\n  this.height = message.info.height;\n  canvas.width = this.width;\n  canvas.height = this.height;\n\n  var imageData = context.createImageData(this.width, this.height);\n  for ( var row = 0; row < this.height; row++) {\n    for ( var col = 0; col < this.width; col++) {\n      // determine the index into the map data\n      var mapI = col + ((this.height - row - 1) * this.width);\n      // determine the value\n      var data = message.data[mapI];\n      var val;\n      if (data === 100) {\n        val = 0;\n      } else if (data === 0) {\n        val = 255;\n      } else {\n        val = 127;\n      }\n\n      // determine the index into the image data array\n      var i = (col + (row * this.width)) * 4;\n      // r\n      imageData.data[i] = val;\n      // g\n      imageData.data[++i] = val;\n      // b\n      imageData.data[++i] = val;\n      // a\n      imageData.data[++i] = 255;\n    }\n  }\n  context.putImageData(imageData, 0, 0);\n\n  // create the bitmap\n  createjs.Bitmap.call(this, canvas);\n  // change Y direction\n  this.y = -this.height * message.info.resolution;\n  \n  // scale the image\n  this.scaleX = message.info.resolution;\n  this.scaleY = message.info.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY;\n\n  // set the pose\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n};\nROS2D.OccupancyGrid.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A map that listens to a given occupancy grid topic.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n */\nROS2D.OccupancyGridClient = function(options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || '/map';\n  this.continuous = options.continuous;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // current grid that is displayed\n  // create an empty shape to start with, so that the order remains correct.\n  this.currentGrid = new createjs.Shape();\n  this.rootObject.addChild(this.currentGrid);\n  // work-around for a bug in easeljs -- needs a second object to render correctly\n  this.rootObject.addChild(new ROS2D.Grid({size:1}));\n\n  // subscribe to the topic\n  var rosTopic = new ROSLIB.Topic({\n    ros : ros,\n    name : topic,\n    messageType : 'nav_msgs/OccupancyGrid',\n    compression : 'png'\n  });\n\n  rosTopic.subscribe(function(message) {\n    // check for an old map\n    var index = null;\n    if (that.currentGrid) {\n      index = that.rootObject.getChildIndex(that.currentGrid);\n      that.rootObject.removeChild(that.currentGrid);\n    }\n\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message : message\n    });\n    if (index !== null) {\n      that.rootObject.addChildAt(that.currentGrid, index);\n    }\n    else {\n      that.rootObject.addChild(that.currentGrid);\n    }\n\n    that.emit('change');\n\n    // check if we should unsubscribe\n    if (!that.continuous) {\n      rosTopic.unsubscribe();\n    }\n  });\n};\nROS2D.OccupancyGridClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * @author Jihoon Lee- jihoonlee.in@gmail.com\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A static map that receives from map_server.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * service (optional) - the map topic to listen to, like '/static_map'\n *   * rootObject (optional) - the root object to add this marker to\n */\nROS2D.OccupancyGridSrvClient = function(options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var service = options.service || '/static_map';\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // current grid that is displayed\n  this.currentGrid = null;\n\n  // Setting up to the service\n  var rosService = new ROSLIB.Service({\n    ros : ros,\n    name : service,\n    serviceType : 'nav_msgs/GetMap',\n    compression : 'png'\n  });\n\n  rosService.callService(new ROSLIB.ServiceRequest(),function(response) {\n    // check for an old map\n    if (that.currentGrid) {\n      that.rootObject.removeChild(that.currentGrid);\n    }\n\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message : response.map\n    });\n    that.rootObject.addChild(that.currentGrid);\n\n    that.emit('change', that.currentGrid);\n  });\n};\nROS2D.OccupancyGridSrvClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * An arrow with line and triangular head, based on the navigation arrow.\n * Aims to the left at 0 rotation, as would be expected.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.ArrowShape = function(options) {\n\tvar that = this;\n\toptions = options || {};\n\tvar size = options.size || 10;\n\tvar strokeSize = options.strokeSize || 3;\n\tvar strokeColor = options.strokeColor || createjs.Graphics.getRGB(255, 255, 30);\n\tvar fillColor = options.fillColor || createjs.Graphics.getRGB(255, 20, 40);\n\tvar pulse = options.pulse;\n\t\n\t// draw the arrow\n\tvar graphics = new createjs.Graphics();\n\t\n\tvar headLen = size / 3.0;\n\tvar headWidth = headLen * 2.0 / 3.0;\n\t\n\tgraphics.setStrokeStyle(strokeSize);\n\tgraphics.beginStroke(strokeColor);\n\tgraphics.moveTo(0, 0);\n\tgraphics.lineTo(size-headLen, 0);\n\t\n\tgraphics.beginFill(fillColor);\n\tgraphics.moveTo(size, 0);\n\tgraphics.lineTo(size-headLen, headWidth / 2.0);\n\tgraphics.lineTo(size-headLen, -headWidth / 2.0);\n\tgraphics.closePath();\n\tgraphics.endFill();\n\tgraphics.endStroke();\n\t\n\t// create the shape\n\tcreatejs.Shape.call(this, graphics);\n\t\n\t// check if we are pulsing\n\tif (pulse) {\n\t\t// have the model \"pulse\"\n\t\tvar growCount = 0;\n\t\tvar growing = true;\n\t\tcreatejs.Ticker.addEventListener('tick', function() {\n\t\t\tif (growing) {\n\t\t\t\tthat.scaleX *= 1.035;\n\t\t\t\tthat.scaleY *= 1.035;\n\t\t\t\tgrowing = (++growCount < 10);\n\t\t\t} else {\n\t\t\t\tthat.scaleX /= 1.035;\n\t\t\t\tthat.scaleY /= 1.035;\n\t\t\t\tgrowing = (--growCount < 0);\n\t\t\t}\n\t\t});\n\t}\n};\nROS2D.ArrowShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Raffaello Bonghi - raffaello.bonghi@officinerobotiche.it\n */\n\n/**\n * A Grid object draw in map.\n *\n * @constructor\n * @param options - object with following keys:\n *  * size (optional) - the size of the grid\n *  * cellSize (optional) - the cell size of map\n *  * lineWidth (optional) - the width of the lines in the grid\n */\n ROS2D.Grid = function(options) {\n    var that = this;\n    options = options || {};\n    var size = options.size || 10;\n    var cellSize = options.cellSize || 0.1;\n    var lineWidth = options.lineWidth || 0.001;\n    // draw the arrow\n    var graphics = new createjs.Graphics();\n    // line width\n    graphics.setStrokeStyle(lineWidth*5);\n    graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n    graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n    graphics.moveTo(-size*cellSize, 0);\n    graphics.lineTo(size*cellSize, 0);\n    graphics.moveTo(0, -size*cellSize);\n    graphics.lineTo(0, size*cellSize);\n    graphics.endFill();\n    graphics.endStroke();\n\n    graphics.setStrokeStyle(lineWidth);\n    graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n    graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n    for (var i = -size; i <= size; i++) {\n        graphics.moveTo(-size*cellSize, i * cellSize);\n        graphics.lineTo(size*cellSize, i * cellSize);\n        graphics.moveTo(i * cellSize, -size*cellSize);\n        graphics.lineTo(i * cellSize, size*cellSize);\n    }\n    graphics.endFill();\n    graphics.endStroke();\n    // create the shape\n    createjs.Shape.call(this, graphics);\n\n};\nROS2D.Grid.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A navigation arrow is a directed triangle that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.NavigationArrow = function(options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse;\n\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n  // line width\n  graphics.setStrokeStyle(strokeSize);\n  graphics.moveTo(-size / 2.0, -size / 2.0);\n  graphics.beginStroke(strokeColor);\n  graphics.beginFill(fillColor);\n  graphics.lineTo(size, 0);\n  graphics.lineTo(-size / 2.0, size / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke();\n\n  // create the shape\n  createjs.Shape.call(this, graphics);\n  \n  // check if we are pulsing\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener('tick', function() {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = (++growCount < 10);\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = (--growCount < 0);\n      }\n    });\n  }\n};\nROS2D.NavigationArrow.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Inigo Gonzalez - ingonza85@gmail.com\n */\n\n/**\n * A navigation image that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * image - the image to use as a marker\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.NavigationImage = function(options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var image_url = options.image;\n  var pulse = options.pulse;\n  var alpha = options.alpha || 1;\n\n  var originals = {};\n\n  var paintImage = function(){\n    createjs.Bitmap.call(that, image);\n    var scale = calculateScale(size);\n    that.alpha = alpha;\n    that.scaleX = scale;\n    that.scaleY = scale;\n    that.regY = that.image.height/2;\n    that.regX = that.image.width/2;\n    originals['rotation'] = that.rotation;\n    Object.defineProperty( that, 'rotation', {\n      get: function(){ return originals['rotation'] + 90; },\n      set: function(value){ originals['rotation'] = value; }\n    });\n    if (pulse) {\n      // have the model \"pulse\"\n      var growCount = 0;\n      var growing = true;\n      var SCALE_SIZE = 1.020;\n      createjs.Ticker.addEventListener('tick', function() {\n        if (growing) {\n          that.scaleX *= SCALE_SIZE;\n          that.scaleY *= SCALE_SIZE;\n          growing = (++growCount < 10);\n        } else {\n          that.scaleX /= SCALE_SIZE;\n          that.scaleY /= SCALE_SIZE;\n          growing = (--growCount < 0);\n        }\n      });\n    }\n  };\n\n   var calculateScale = function(_size){\n      return _size / image.width;\n  };\n\n  var image = new Image();\n  image.onload = paintImage;\n  image.src = image_url;\n\n};\n\nROS2D.NavigationImage.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A shape to draw a nav_msgs/Path msg\n *\n * @constructor\n * @param options - object with following keys:\n *   * path (optional) - the initial path to draw\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n */\nROS2D.PathShape = function(options) {\n\toptions = options || {};\n\tvar path = options.path;\n\tthis.strokeSize = options.strokeSize || 3;\n\tthis.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n\t\n\t// draw the line\n\tthis.graphics = new createjs.Graphics();\n\t\n\tif (path !== null && typeof path !== 'undefined') {\n\t\tthis.graphics.setStrokeStyle(this.strokeSize);\n\t\tthis.graphics.beginStroke(this.strokeColor);\n\t\tthis.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n\t\tfor (var i=1; i<path.poses.length; ++i) {\n\t\t\tthis.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n\t\t}\n\t\tthis.graphics.endStroke();\n\t}\n\t\n\t// create the shape\n\tcreatejs.Shape.call(this, this.graphics);\n};\n\n/**\n * Set the path to draw\n *\n * @param path of type nav_msgs/Path\n */\nROS2D.PathShape.prototype.setPath = function(path) {\n\tthis.graphics.clear();\n\tif (path !== null && typeof path !== 'undefined') {\n\t\tthis.graphics.setStrokeStyle(this.strokeSize);\n\t\tthis.graphics.beginStroke(this.strokeColor);\n\t\tthis.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n\t\tfor (var i=1; i<path.poses.length; ++i) {\n\t\t\tthis.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n\t\t}\n\t\tthis.graphics.endStroke();\n\t}\n};\n\nROS2D.PathShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A polygon that can be edited by an end user\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * lineSize (optional) - the width of the lines\n *   * lineColor (optional) - the createjs color of the lines\n *   * pointSize (optional) - the size of the points\n *   * pointColor (optional) - the createjs color of the points\n *   * fillColor (optional) - the createjs color to fill the polygon\n *   * lineCallBack (optional) - callback function for mouse interaction with a line\n *   * pointCallBack (optional) - callback function for mouse interaction with a point\n */\nROS2D.PolygonMarker = function(options) {\n//\tvar that = this;\n\toptions = options || {};\n\tthis.lineSize = options.lineSize || 3;\n\tthis.lineColor = options.lineColor || createjs.Graphics.getRGB(0, 0, 255, 0.66);\n\tthis.pointSize = options.pointSize || 10;\n\tthis.pointColor = options.pointColor || createjs.Graphics.getRGB(255, 0, 0, 0.66);\n\tthis.fillColor = options.pointColor || createjs.Graphics.getRGB(0, 255, 0, 0.33);\n\tthis.lineCallBack = options.lineCallBack;\n\tthis.pointCallBack = options.pointCallBack;\n\t\n\t// Array of point shapes\n//\tthis.points = [];\n\tthis.pointContainer = new createjs.Container();\n\t\n\t// Array of line shapes\n//\tthis.lines = [];\n\tthis.lineContainer = new createjs.Container();\n\t\n\tthis.fillShape = new createjs.Shape();\n\t\n\t// Container with all the lines and points\n\tcreatejs.Container.call(this);\n\t\n\tthis.addChild(this.fillShape);\n\tthis.addChild(this.lineContainer);\n\tthis.addChild(this.pointContainer);\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.createLineShape = function(startPoint, endPoint) {\n\tvar line = new createjs.Shape();\n//\tline.graphics.setStrokeStyle(this.strokeSize);\n//\tline.graphics.beginStroke(this.strokeColor);\n//\tline.graphics.moveTo(startPoint.x, startPoint.y);\n//\tline.graphics.lineTo(endPoint.x, endPoint.y);\n\tthis.editLineShape(line, startPoint, endPoint);\n\t\n\tvar that = this;\n\tline.addEventListener('mousedown', function(event) {\n\t\tif (that.lineCallBack !== null && typeof that.lineCallBack !== 'undefined') {\n\t\t\tthat.lineCallBack('mousedown', event, that.lineContainer.getChildIndex(event.target));\n\t\t}\n\t});\n\t\n\treturn line;\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.editLineShape = function(line, startPoint, endPoint) {\n\tline.graphics.clear();\n\tline.graphics.setStrokeStyle(this.lineSize);\n\tline.graphics.beginStroke(this.lineColor);\n\tline.graphics.moveTo(startPoint.x, startPoint.y);\n\tline.graphics.lineTo(endPoint.x, endPoint.y);\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.createPointShape = function(pos) {\n\tvar point = new createjs.Shape();\n\tpoint.graphics.beginFill(this.pointColor);\n\tpoint.graphics.drawCircle(0, 0, this.pointSize);\n\tpoint.x = pos.x;\n\tpoint.y = -pos.y;\n\t\n\tvar that = this;\n\tpoint.addEventListener('mousedown', function(event) {\n\t\tif (that.pointCallBack !== null && typeof that.pointCallBack !== 'undefined') {\n\t\t\tthat.pointCallBack('mousedown', event, that.pointContainer.getChildIndex(event.target));\n\t\t}\n\t});\n\t\n\treturn point;\n};\n\n/**\n * Adds a point to the polygon\n *\n * @param position of type ROSLIB.Vector3\n */\nROS2D.PolygonMarker.prototype.addPoint = function(pos) {\n\tvar point = this.createPointShape(pos);\n\tthis.pointContainer.addChild(point);\n\tvar numPoints = this.pointContainer.getNumChildren();\n\t\n\t// 0 points -> 1 point, 0 lines\n\t// 1 point  -> 2 points, lines: add line between previous and new point, add line between new point and first point\n\t// 2 points -> 3 points, 3 lines: change last line, add line between new point and first point\n\t// 3 points -> 4 points, 4 lines: change last line, add line between new point and first point\n\t// etc\n\t\n\tif (numPoints < 2) {\n\t\t// Now 1 point\n\t}\n\telse if (numPoints < 3) {\n\t\t// Now 2 points: add line between previous and new point\n\t\tvar line = this.createLineShape(this.pointContainer.getChildAt(numPoints-2), point);\n\t\tthis.lineContainer.addChild(line);\n\t}\n\tif (numPoints > 2) {\n\t\t// Now 3 or more points: change last line\n\t\tthis.editLineShape(this.lineContainer.getChildAt(numPoints-2), this.pointContainer.getChildAt(numPoints-2), point);\n\t}\n\tif (numPoints > 1) {\n\t\t// Now 2 or more points: add line between new point and first point\n\t\tvar lineEnd = this.createLineShape(point, this.pointContainer.getChildAt(0));\n\t\tthis.lineContainer.addChild(lineEnd);\n\t}\n\t\n\tthis.drawFill();\n};\n\n/**\n * Removes a point from the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n */\nROS2D.PolygonMarker.prototype.remPoint = function(obj) {\n\tvar index;\n//\tvar point;\n\tif (obj instanceof createjs.Shape) {\n\t\tindex = this.pointContainer.getChildIndex(obj);\n//\t\tpoint = obj;\n\t}\n\telse {\n\t\tindex = obj;\n//\t\tpoint = this.pointContainer.getChildAt(index);\n\t}\n\t\n\t// 0 points -> 0 points, 0 lines\n\t// 1 point  -> 0 points, 0 lines\n\t// 2 points -> 1 point,  0 lines: remove all lines\n\t// 3 points -> 2 points, 2 lines: change line before point to remove, remove line after point to remove\n\t// 4 points -> 3 points, 3 lines: change line before point to remove, remove line after point to remove\n\t// etc\n\t\n\tvar numPoints = this.pointContainer.getNumChildren();\n\t\n\tif (numPoints < 2) {\n\t\t\n\t}\n\telse if (numPoints < 3) {\n\t\t// 2 points: remove all lines\n\t\tthis.lineContainer.removeAllChildren();\n\t}\n\telse {\n\t\t// 3 or more points: change line before point to remove, remove line after point to remove\n\t\tthis.editLineShape(\n\t\t\tthis.lineContainer.getChildAt((index-1+numPoints)%numPoints),\n\t\t\tthis.pointContainer.getChildAt((index-1+numPoints)%numPoints),\n\t\t\tthis.pointContainer.getChildAt((index+1)%numPoints)\n\t\t);\n\t\tthis.lineContainer.removeChildAt(index);\n\t}\n\tthis.pointContainer.removeChildAt(index);\n//\tthis.points.splice(index, 1);\n\t\n\tthis.drawFill();\n};\n\n/**\n * Moves a point of the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n * @param position of type ROSLIB.Vector3\n */\nROS2D.PolygonMarker.prototype.movePoint = function(obj, newPos) {\n\tvar index;\n\tvar point;\n\tif (obj instanceof createjs.Shape) {\n\t\tindex = this.pointContainer.getChildIndex(obj);\n\t\tpoint = obj;\n\t}\n\telse {\n\t\tindex = obj;\n\t\tpoint = this.pointContainer.getChildAt(index);\n\t}\n\tpoint.x = newPos.x;\n\tpoint.y = -newPos.y;\n\t\n\tvar numPoints = this.pointContainer.getNumChildren();\n\tif (numPoints > 1) {\n\t\t// line before moved point\n\t\tvar line1 = this.lineContainer.getChildAt((index-1+numPoints)%numPoints);\n\t\tthis.editLineShape(line1, this.pointContainer.getChildAt((index-1+numPoints)%numPoints), point);\n\t\t\n\t\t// line after moved point\n\t\tvar line2 = this.lineContainer.getChildAt(index);\n\t\tthis.editLineShape(line2, point, this.pointContainer.getChildAt((index+1)%numPoints));\n\t}\n\t\n\tthis.drawFill();\n};\n\n/**\n * Splits a line of the polygon: inserts a point at the center of the line\n *\n * @param obj either an index (integer) or a line shape of the polygon\n */\nROS2D.PolygonMarker.prototype.splitLine = function(obj) {\n\tvar index;\n\tvar line;\n\tif (obj instanceof createjs.Shape) {\n\t\tindex = this.lineContainer.getChildIndex(obj);\n\t\tline = obj;\n\t}\n\telse {\n\t\tindex = obj;\n\t\tline = this.lineContainer.getChildAt(index);\n\t}\n\tvar numPoints = this.pointContainer.getNumChildren();\n\tvar xs = this.pointContainer.getChildAt(index).x;\n\tvar ys = this.pointContainer.getChildAt(index).y;\n\tvar xe = this.pointContainer.getChildAt((index+1)%numPoints).x;\n\tvar ye = this.pointContainer.getChildAt((index+1)%numPoints).y;\n\tvar xh = (xs+xe)/2.0;\n\tvar yh = (ys+ye)/2.0;\n\tvar pos = new ROSLIB.Vector3({ x:xh, y:-yh });\n\t\n\t// Add a point in the center of the line to split\n\tvar point = this.createPointShape(pos);\n\tthis.pointContainer.addChildAt(point, index+1);\n\t++numPoints;\n\t\n\t// Add a line between the new point and the end of the line to split\n\tvar lineNew = this.createLineShape(point, this.pointContainer.getChildAt((index+2)%numPoints));\n\tthis.lineContainer.addChildAt(lineNew, index+1);\n\n\t// Set the endpoint of the line to split to the new point\n\tthis.editLineShape(line, this.pointContainer.getChildAt(index), point);\n\t\n\tthis.drawFill();\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.drawFill = function() {\n\tvar numPoints = this.pointContainer.getNumChildren();\n\tif (numPoints > 2) {\n\t\tvar g = this.fillShape.graphics;\n\t\tg.clear();\n\t\tg.setStrokeStyle(0);\n\t\tg.moveTo(this.pointContainer.getChildAt(0).x, this.pointContainer.getChildAt(0).y);\n\t\tg.beginStroke();\n\t\tg.beginFill(this.fillColor);\n\t\tfor (var i=1; i<numPoints; ++i) {\n\t\t\tg.lineTo(this.pointContainer.getChildAt(i).x, this.pointContainer.getChildAt(i).y);\n\t\t}\n\t\tg.closePath();\n\t\tg.endFill();\n\t\tg.endStroke();\n\t}\n\telse {\n\t\tthis.fillShape.graphics.clear();\n\t}\n};\n\n\nROS2D.PolygonMarker.prototype.__proto__ = createjs.Container.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A trace of poses, handy to see where a robot has been\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * maxPoses (optional) - the maximum number of poses to keep, 0 for infinite\n *   * minDist (optional) - the minimal distance between poses to use the pose for drawing (default 0.05)\n */\nROS2D.TraceShape = function(options) {\n//\tvar that = this;\n\toptions = options || {};\n\tvar pose = options.pose;\n\tthis.strokeSize = options.strokeSize || 3;\n\tthis.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n\tthis.maxPoses = options.maxPoses || 100;\n\tthis.minDist = options.minDist || 0.05;\n\t\n\t// Store minDist as the square of it\n\tthis.minDist = this.minDist*this.minDist;\n\t\n\t// Array of the poses\n\t// TODO: do we need this?\n\tthis.poses = [];\n\t\n\t// Create the graphics\n\tthis.graphics = new createjs.Graphics();\n\tthis.graphics.setStrokeStyle(this.strokeSize);\n\tthis.graphics.beginStroke(this.strokeColor);\n\t\n\t// Add first pose if given\n\tif (pose !== null && typeof pose !== 'undefined') {\n\t\tthis.poses.push(pose);\n\t}\n\t\n\t// Create the shape\n\tcreatejs.Shape.call(this, this.graphics);\n};\n\n/**\n * Adds a pose to the trace and updates the graphics\n *\n * @param pose of type ROSLIB.Pose\n */\nROS2D.TraceShape.prototype.addPose = function(pose) {\n\tvar last = this.poses.length-1;\n\tif (last < 0) {\n\t\tthis.poses.push(pose);\n\t\tthis.graphics.moveTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n\t}\n\telse {\n\t\tvar prevX = this.poses[last].position.x;\n\t\tvar prevY = this.poses[last].position.y;\n\t\tvar dx = (pose.position.x - prevX);\n\t\tvar dy = (pose.position.y - prevY);\n\t\tif (dx*dx + dy*dy > this.minDist) {\n\t\t\tthis.graphics.lineTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n\t\t\tthis.poses.push(pose);\n\t\t}\n\t}\n\tif (this.maxPoses > 0 && this.maxPoses < this.poses.length) {\n\t\tthis.popFront();\n\t}\n};\n\n/**\n * Removes front pose and updates the graphics\n */\nROS2D.TraceShape.prototype.popFront = function() {\n\tif (this.poses.length > 0) {\n\t\tthis.poses.shift();\n\t\t// TODO: shift drawing instructions rather than doing it all over\n\t\tthis.graphics.clear();\n\t\tthis.graphics.setStrokeStyle(this.strokeSize);\n\t\tthis.graphics.beginStroke(this.strokeColor);\n\t\tthis.graphics.lineTo(this.poses[0].position.x / this.scaleX, this.poses[0].position.y / -this.scaleY);\n\t\tfor (var i=1; i<this.poses.length; ++i) {\n\t\t\tthis.graphics.lineTo(this.poses[i].position.x / this.scaleX, this.poses[i].position.y / -this.scaleY);\n\t\t}\n\t}\n};\n\nROS2D.TraceShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds panning to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply panning to\n */\nROS2D.PanView = function(options) {\n\toptions = options || {};\n\tthis.rootObject = options.rootObject;\n\t\n\t// get a handle to the stage\n\tif (this.rootObject instanceof createjs.Stage) {\n\t\tthis.stage = this.rootObject;\n\t}\n\telse {\n\t\tthis.stage = this.rootObject.getStage();\n\t}\n\t\n\tthis.startPos = new ROSLIB.Vector3();\n};\n\n\nROS2D.PanView.prototype.startPan = function(startX, startY) {\n\tthis.startPos.x = startX;\n\tthis.startPos.y = startY;\n};\n\nROS2D.PanView.prototype.pan = function(curX, curY) {\n\tthis.stage.x += curX - this.startPos.x;\n\tthis.startPos.x = curX;\n\tthis.stage.y += curY - this.startPos.y;\n\tthis.startPos.y = curY;\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A Viewer can be used to render an interactive 2D scene to a HTML5 canvas.\n *\n * @constructor\n * @param options - object with following keys:\n *   * divID - the ID of the div to place the viewer in\n *   * width - the initial width, in pixels, of the canvas\n *   * height - the initial height, in pixels, of the canvas\n *   * background (optional) - the color to render the background, like '#efefef'\n */\nROS2D.Viewer = function(options) {\n  var that = this;\n  options = options || {};\n  var divID = options.divID;\n  this.width = options.width;\n  this.height = options.height;\n  var background = options.background || '#111111';\n\n  // create the canvas to render to\n  var canvas = document.createElement('canvas');\n  canvas.width = this.width;\n  canvas.height = this.height;\n  canvas.style.background = background;\n  document.getElementById(divID).appendChild(canvas);\n  // create the easel to use\n  this.scene = new createjs.Stage(canvas);\n\n  // change Y axis center\n  this.scene.y = this.height;\n\n  // add the renderer to the page\n  document.getElementById(divID).appendChild(canvas);\n\n  // update at 30fps\n  createjs.Ticker.setFPS(30);\n  createjs.Ticker.addEventListener('tick', this.scene);\n};\n\n/**\n * Add the given createjs object to the global scene in the viewer.\n *\n * @param object - the object to add\n */\nROS2D.Viewer.prototype.addObject = function(object) {\n  this.scene.addChild(object);\n};\n\n/**\n * Scale the scene to fit the given width and height into the current canvas.\n *\n * @param width - the width to scale to in meters\n * @param height - the height to scale to in meters\n */\nROS2D.Viewer.prototype.scaleToDimensions = function(width, height) {\n  // restore to values before shifting, if ocurred\n  this.scene.x = typeof this.scene.x_prev_shift !== 'undefined' ? this.scene.x_prev_shift : this.scene.x;\n  this.scene.y = typeof this.scene.y_prev_shift !== 'undefined' ? this.scene.y_prev_shift : this.scene.y;\n  \n  // save scene scaling\n  this.scene.scaleX = this.width / width;\n  this.scene.scaleY = this.height / height;\n};\n\n/**\n * Shift the main view of the canvas by the given amount. This is based on the\n * ROS coordinate system. That is, Y is opposite that of a traditional canvas.\n *\n * @param x - the amount to shift by in the x direction in meters\n * @param y - the amount to shift by in the y direction in meters\n */\nROS2D.Viewer.prototype.shift = function(x, y) {\n  // save current offset\n  this.scene.x_prev_shift = this.scene.x;\n  this.scene.y_prev_shift = this.scene.y;\n\n  // shift scene by scaling the desired offset\n  this.scene.x -= (x * this.scene.scaleX);\n  this.scene.y += (y * this.scene.scaleY);\n};\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds zooming to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply zoom to\n *   * minScale (optional) - minimum scale to set to preserve precision\n */\nROS2D.ZoomView = function(options) {\n\toptions = options || {};\n\tthis.rootObject = options.rootObject;\n\tthis.minScale = options.minScale || 0.001;\n\t\n\t// get a handle to the stage\n\tif (this.rootObject instanceof createjs.Stage) {\n\t\tthis.stage = this.rootObject;\n\t}\n\telse {\n\t\tthis.stage = this.rootObject.getStage();\n\t}\n\t\n\tthis.center = new ROSLIB.Vector3();\n\tthis.startShift = new ROSLIB.Vector3();\n\tthis.startScale = new ROSLIB.Vector3();\n};\n\n\nROS2D.ZoomView.prototype.startZoom = function(centerX, centerY) {\n\tthis.center.x = centerX;\n\tthis.center.y = centerY;\n\tthis.startShift.x = this.stage.x;\n\tthis.startShift.y = this.stage.y;\n\tthis.startScale.x = this.stage.scaleX;\n\tthis.startScale.y = this.stage.scaleY;\n};\n\nROS2D.ZoomView.prototype.zoom = function(zoom) {\n\t// Make sure scale doesn't become too small\n\tif (this.startScale.x*zoom < this.minScale) {\n\t\tzoom = this.minScale/this.startScale.x;\n\t}\n\tif (this.startScale.y*zoom < this.minScale) {\n\t\tzoom = this.minScale/this.startScale.y;\n\t}\n\t\n\tthis.stage.scaleX = this.startScale.x*zoom;\n\tthis.stage.scaleY = this.startScale.y*zoom;\n\t\n\tthis.stage.x = this.startShift.x - (this.center.x-this.startShift.x) * (this.stage.scaleX/this.startScale.x - 1);\n\tthis.stage.y = this.startShift.y - (this.center.y-this.startShift.y) * (this.stage.scaleY/this.startScale.y - 1);\n};\n\nexport default ROS2D"],"mappings":"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"},"metadata":{},"sourceType":"module"}
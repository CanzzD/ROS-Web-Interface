{"ast":null,"code":"/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar ROS2D = ROS2D || {\n  REVISION: '0.9.0'\n};\n\n// convert the given global Stage coordinates to ROS coordinates\ncreatejs.Stage.prototype.globalToRos = function (x, y) {\n  var rosX = (x - this.x) / this.scaleX;\n  var rosY = (this.y - y) / this.scaleY;\n  return new ROSLIB.Vector3({\n    x: rosX,\n    y: rosY\n  });\n};\n\n// convert the given ROS coordinates to global Stage coordinates\ncreatejs.Stage.prototype.rosToGlobal = function (pos) {\n  var x = pos.x * this.scaleX + this.x;\n  var y = pos.y * this.scaleY + this.y;\n  return {\n    x: x,\n    y: y\n  };\n};\n\n// convert a ROS quaternion to theta in degrees\ncreatejs.Stage.prototype.rosQuaternionToGlobalTheta = function (orientation) {\n  // See https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Rotation_matrices\n  // here we use [x y z] = R * [1 0 0]\n  var q0 = orientation.w;\n  var q1 = orientation.x;\n  var q2 = orientation.y;\n  var q3 = orientation.z;\n  // Canvas rotation is clock wise and in degrees\n  return -Math.atan2(2 * (q0 * q3 + q1 * q2), 1 - 2 * (q2 * q2 + q3 * q3)) * 180.0 / Math.PI;\n};\n\n/**\n* @author Russell Toris - rctoris@wpi.edu\n*/\n\n/**\n* An image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n*\n* @constructor\n* @param options - object with following keys:\n*   * message - the occupancy grid map meta data message\n*   * image - the image URL to load\n*/\nROS2D.ImageMap = function (options) {\n  options = options || {};\n  var message = options.message;\n  var image = options.image;\n\n  // save the metadata we need\n  this.pose = new ROSLIB.Pose({\n    position: message.origin.position,\n    orientation: message.origin.orientation\n  });\n\n  // set the size\n  this.width = message.width;\n  this.height = message.height;\n\n  // create the bitmap\n  createjs.Bitmap.call(this, image);\n  // change Y direction\n  this.y = -this.height * message.resolution;\n  // scale the image\n  this.scaleX = message.resolution;\n  this.scaleY = message.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY;\n\n  // set the pose\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n};\nROS2D.ImageMap.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n* @author Russell Toris - rctoris@wpi.edu\n*/\n\n/**\n* A image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n*\n* Emits the following events:\n*   * 'change' - there was an update or change in the map\n*\n* @constructor\n* @param options - object with following keys:\n*   * ros - the ROSLIB.Ros connection handle\n*   * topic (optional) - the map meta data topic to listen to\n*   * image - the image URL to load\n*   * rootObject (optional) - the root object to add this marker to\n*/\nROS2D.ImageMapClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  this.image = options.image;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // create an empty shape to start with\n  this.currentImage = new createjs.Shape();\n  var rosTopic = new ROSLIB.Topic({\n    ros: ros,\n    name: topic,\n    messageType: 'nav_msgs/MapMetaData'\n  });\n  rosTopic.subscribe(function (message) {\n    // we only need this once\n    rosTopic.unsubscribe();\n\n    // create the image\n    that.currentImage = new ROS2D.ImageMap({\n      message: message,\n      image: that.image\n    });\n    that.rootObject.addChild(that.currentImage);\n\n    // work-around for a bug in easeljs -- needs a second object to render correctly\n    that.rootObject.addChild(new ROS2D.Grid({\n      size: 1\n    }));\n    if (!that.index) {\n      that.index = that.rootObject.getChildIndex(that.currentImage);\n    }\n    that.emit('change');\n  });\n  this.removeImg = function () {\n    that.rootObject.removeChild(that.currentImage);\n  };\n  this.addImg = function () {\n    // that.rootObject.addChild(that.currentImage);\n    that.rootObject.addChildAt(that.currentImage, that.index);\n    // that.rootObject.addChild(new ROS2D.Grid({ size: 1 }));\n  };\n};\n\nROS2D.ImageMapClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n* @author Russell Toris - rctoris@wpi.edu\n*/\n\n/**\n* An OccupancyGrid can convert a ROS occupancy grid message into a createjs Bitmap object.\n*\n* @constructor\n* @param options - object with following keys:\n*   * message - the occupancy grid message\n*/\nROS2D.OccupancyGrid = function (options) {\n  options = options || {};\n  var message = options.message;\n\n  // internal drawing canvas\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n\n  ////////////*********/////////////\n  ///i add this soryyyy\n  // context.clearRect(0, 0, canvas.width, canvas.height);\n  //384\n\n  //////////**********/////////////  \n  // save the metadata we need\n  this.pose = new ROSLIB.Pose({\n    position: message.info.origin.position,\n    orientation: message.info.origin.orientation\n  });\n\n  // set the size\n  this.width = message.info.width;\n  this.height = message.info.height;\n  canvas.width = this.width;\n  canvas.height = this.height;\n  var imageData = context.createImageData(this.width, this.height);\n  for (var row = 0; row < this.height; row++) {\n    for (var col = 0; col < this.width; col++) {\n      // determine the index into the map data\n      var mapI = col + (this.height - row - 1) * this.width;\n      // determine the value\n      var data = message.data[mapI];\n      var val;\n      if (data === 100) {\n        val = 0;\n      } else if (data === 0) {\n        val = 255;\n      } else {\n        val = 127;\n      }\n\n      // determine the index into the image data array\n      var i = (col + row * this.width) * 4;\n      // r\n      imageData.data[i] = val;\n      // g\n      imageData.data[++i] = val;\n      // b\n      imageData.data[++i] = val;\n      // a\n      imageData.data[++i] = 255;\n    }\n  }\n  context.putImageData(imageData, 0, 0);\n\n  // create the bitmap\n  createjs.Bitmap.call(this, canvas);\n  // change Y direction\n  this.y = -this.height * message.info.resolution;\n\n  // scale the image\n  this.scaleX = message.info.resolution;\n  this.scaleY = message.info.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY;\n\n  // set the pose\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n};\nROS2D.OccupancyGrid.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n* @author Russell Toris - rctoris@wpi.edu\n*/\n\n/**\n* A map that listens to a given occupancy grid topic.\n*\n* Emits the following events:\n*   * 'change' - there was an update or change in the map\n*\n* @constructor\n* @param options - object with following keys:\n*   * ros - the ROSLIB.Ros connection handle\n*   * topic (optional) - the map topic to listen to\n*   * rootObject (optional) - the root object to add this marker to\n*   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n*/\nROS2D.OccupancyGridClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || '/map';\n  this.continuous = options.continuous;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // current grid that is displayed\n  // create an empty shape to start with, so that the order remains correct.\n  this.currentGrid = new createjs.Shape();\n  this.rootObject.addChild(this.currentGrid);\n  // work-around for a bug in easeljs -- needs a second object to render correctly\n  this.rootObject.addChild(new ROS2D.Grid({\n    size: 1\n  }));\n\n  // subscribe to the topic\n  var rosTopic = new ROSLIB.Topic({\n    ros: ros,\n    name: topic,\n    messageType: 'nav_msgs/OccupancyGrid',\n    compression: 'png'\n  });\n  rosTopic.subscribe(function (message) {\n    // check for an old map\n    var index = null;\n    if (that.currentGrid) {\n      index = that.rootObject.getChildIndex(that.currentGrid);\n      that.rootObject.removeChild(that.currentGrid);\n    }\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message: message\n    });\n    if (index !== null) {\n      that.rootObject.addChildAt(that.currentGrid, index);\n    } else {\n      that.rootObject.addChild(that.currentGrid);\n    }\n    that.emit('change');\n\n    // check if we should unsubscribe\n    if (!that.continuous) {\n      rosTopic.unsubscribe();\n    }\n  });\n};\nROS2D.OccupancyGridClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n* @author Jihoon Lee- jihoonlee.in@gmail.com\n* @author Russell Toris - rctoris@wpi.edu\n*/\n\n/**\n* A static map that receives from map_server.\n*\n* Emits the following events:\n*   * 'change' - there was an update or change in the map\n*\n* @constructor\n* @param options - object with following keys:\n*   * ros - the ROSLIB.Ros connection handle\n*   * service (optional) - the map topic to listen to, like '/static_map'\n*   * rootObject (optional) - the root object to add this marker to\n*/\nROS2D.OccupancyGridSrvClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var service = options.service || '/static_map';\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // current grid that is displayed\n  this.currentGrid = null;\n\n  // Setting up to the service\n  var rosService = new ROSLIB.Service({\n    ros: ros,\n    name: service,\n    serviceType: 'nav_msgs/GetMap',\n    compression: 'png'\n  });\n  rosService.callService(new ROSLIB.ServiceRequest(), function (response) {\n    // check for an old map\n    if (that.currentGrid) {\n      that.rootObject.removeChild(that.currentGrid);\n    }\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message: response.map\n    });\n    that.rootObject.addChild(that.currentGrid);\n    that.emit('change', that.currentGrid);\n  });\n};\nROS2D.OccupancyGridSrvClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n* @author Bart van Vliet - bart@dobots.nl\n*/\n\n/**\n* An arrow with line and triangular head, based on the navigation arrow.\n* Aims to the left at 0 rotation, as would be expected.\n*\n* @constructor\n* @param options - object with following keys:\n*   * size (optional) - the size of the marker\n*   * strokeSize (optional) - the size of the outline\n*   * strokeColor (optional) - the createjs color for the stroke\n*   * fillColor (optional) - the createjs color for the fill\n*   * pulse (optional) - if the marker should \"pulse\" over time\n*/\nROS2D.ArrowShape = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse;\n\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n  var headLen = size / 3.0;\n  var headWidth = headLen * 2.0 / 3.0;\n  graphics.setStrokeStyle(strokeSize);\n  graphics.beginStroke(strokeColor);\n  graphics.moveTo(0, 0);\n  graphics.lineTo(size - headLen, 0);\n  graphics.beginFill(fillColor);\n  graphics.moveTo(size, 0);\n  graphics.lineTo(size - headLen, headWidth / 2.0);\n  graphics.lineTo(size - headLen, -headWidth / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke();\n\n  // create the shape\n  createjs.Shape.call(this, graphics);\n\n  // check if we are pulsing\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener('tick', function () {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = ++growCount < 10;\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = --growCount < 0;\n      }\n    });\n  }\n};\nROS2D.ArrowShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n* @author Raffaello Bonghi - raffaello.bonghi@officinerobotiche.it\n*/\n\n/**\n* A Grid object draw in map.\n*\n* @constructor\n* @param options - object with following keys:\n*  * size (optional) - the size of the grid\n*  * cellSize (optional) - the cell size of map\n*  * lineWidth (optional) - the width of the lines in the grid\n*/\nROS2D.Grid = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var cellSize = options.cellSize || 0.1;\n  var lineWidth = options.lineWidth || 0.001;\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n  // line width\n  graphics.setStrokeStyle(lineWidth * 5);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n  graphics.moveTo(-size * cellSize, 0);\n  graphics.lineTo(size * cellSize, 0);\n  graphics.moveTo(0, -size * cellSize);\n  graphics.lineTo(0, size * cellSize);\n  graphics.endFill();\n  graphics.endStroke();\n  graphics.setStrokeStyle(lineWidth);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n  for (var i = -size; i <= size; i++) {\n    graphics.moveTo(-size * cellSize, i * cellSize);\n    graphics.lineTo(size * cellSize, i * cellSize);\n    graphics.moveTo(i * cellSize, -size * cellSize);\n    graphics.lineTo(i * cellSize, size * cellSize);\n  }\n  graphics.endFill();\n  graphics.endStroke();\n  // create the shape\n  createjs.Shape.call(this, graphics);\n};\nROS2D.Grid.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n* @author Russell Toris - rctoris@wpi.edu\n*/\n\n/**\n* A navigation arrow is a directed triangle that can be used to display orientation.\n*\n* @constructor\n* @param options - object with following keys:\n*   * size (optional) - the size of the marker\n*   * strokeSize (optional) - the size of the outline\n*   * strokeColor (optional) - the createjs color for the stroke\n*   * fillColor (optional) - the createjs color for the fill\n*   * pulse (optional) - if the marker should \"pulse\" over time\n*/\nROS2D.NavigationArrow = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse;\n\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n  // line width\n  graphics.setStrokeStyle(strokeSize);\n  graphics.moveTo(-size / 2.0, -size / 2.0);\n  graphics.beginStroke(strokeColor);\n  graphics.beginFill(fillColor);\n  graphics.lineTo(size, 0);\n  graphics.lineTo(-size / 2.0, size / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke();\n\n  // create the shape\n  createjs.Shape.call(this, graphics);\n\n  // check if we are pulsing\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener('tick', function () {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = ++growCount < 10;\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = --growCount < 0;\n      }\n    });\n  }\n};\nROS2D.NavigationArrow.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n* @author Inigo Gonzalez - ingonza85@gmail.com\n*/\n\n/**\n* A navigation image that can be used to display orientation.\n*\n* @constructor\n* @param options - object with following keys:\n*   * size (optional) - the size of the marker\n*   * image - the image to use as a marker\n*   * pulse (optional) - if the marker should \"pulse\" over time\n*/\nROS2D.NavigationImage = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var image_url = options.image;\n  var pulse = options.pulse;\n  var alpha = options.alpha || 1;\n  var originals = {};\n  var paintImage = function () {\n    createjs.Bitmap.call(that, image);\n    var scale = calculateScale(size);\n    that.alpha = alpha;\n    that.scaleX = scale;\n    that.scaleY = scale;\n    that.regY = that.image.height / 2;\n    that.regX = that.image.width / 2;\n    originals['rotation'] = that.rotation;\n    Object.defineProperty(that, 'rotation', {\n      get: function () {\n        return originals['rotation'] + 90;\n      },\n      set: function (value) {\n        originals['rotation'] = value;\n      }\n    });\n    if (pulse) {\n      // have the model \"pulse\"\n      var growCount = 0;\n      var growing = true;\n      var SCALE_SIZE = 1.020;\n      createjs.Ticker.addEventListener('tick', function () {\n        if (growing) {\n          that.scaleX *= SCALE_SIZE;\n          that.scaleY *= SCALE_SIZE;\n          growing = ++growCount < 10;\n        } else {\n          that.scaleX /= SCALE_SIZE;\n          that.scaleY /= SCALE_SIZE;\n          growing = --growCount < 0;\n        }\n      });\n    }\n  };\n  var calculateScale = function (_size) {\n    return _size / image.width;\n  };\n  var image = new Image();\n  image.onload = paintImage;\n  image.src = image_url;\n};\nROS2D.NavigationImage.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n* @author Bart van Vliet - bart@dobots.nl\n*/\n\n/**\n* A shape to draw a nav_msgs/Path msg\n*\n* @constructor\n* @param options - object with following keys:\n*   * path (optional) - the initial path to draw\n*   * strokeSize (optional) - the size of the outline\n*   * strokeColor (optional) - the createjs color for the stroke\n*/\nROS2D.PathShape = function (options) {\n  options = options || {};\n  var path = options.path;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n\n  // draw the line\n  this.graphics = new createjs.Graphics();\n  if (path !== null && typeof path !== 'undefined') {\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n    for (var i = 1; i < path.poses.length; ++i) {\n      this.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n    }\n    this.graphics.endStroke();\n  }\n\n  // create the shape\n  createjs.Shape.call(this, this.graphics);\n};\n\n/**\n* Set the path to draw\n*\n* @param path of type nav_msgs/Path\n*/\nROS2D.PathShape.prototype.setPath = function (path) {\n  this.graphics.clear();\n  if (path !== null && typeof path !== 'undefined') {\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n    for (var i = 1; i < path.poses.length; ++i) {\n      this.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n    }\n    this.graphics.endStroke();\n  }\n};\nROS2D.PathShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n* @author Bart van Vliet - bart@dobots.nl\n*/\n\n/**\n* A polygon that can be edited by an end user\n*\n* @constructor\n* @param options - object with following keys:\n*   * pose (optional) - the first pose of the trace\n*   * lineSize (optional) - the width of the lines\n*   * lineColor (optional) - the createjs color of the lines\n*   * pointSize (optional) - the size of the points\n*   * pointColor (optional) - the createjs color of the points\n*   * fillColor (optional) - the createjs color to fill the polygon\n*   * lineCallBack (optional) - callback function for mouse interaction with a line\n*   * pointCallBack (optional) - callback function for mouse interaction with a point\n*/\nROS2D.PolygonMarker = function (options) {\n  //  var that = this;\n  options = options || {};\n  this.lineSize = options.lineSize || 3;\n  this.lineColor = options.lineColor || createjs.Graphics.getRGB(0, 0, 255, 0.66);\n  this.pointSize = options.pointSize || 10;\n  this.pointColor = options.pointColor || createjs.Graphics.getRGB(255, 0, 0, 0.66);\n  this.fillColor = options.pointColor || createjs.Graphics.getRGB(0, 255, 0, 0.33);\n  this.lineCallBack = options.lineCallBack;\n  this.pointCallBack = options.pointCallBack;\n\n  // Array of point shapes\n  //  this.points = [];\n  this.pointContainer = new createjs.Container();\n\n  // Array of line shapes\n  //  this.lines = [];\n  this.lineContainer = new createjs.Container();\n  this.fillShape = new createjs.Shape();\n\n  // Container with all the lines and points\n  createjs.Container.call(this);\n  this.addChild(this.fillShape);\n  this.addChild(this.lineContainer);\n  this.addChild(this.pointContainer);\n};\n\n/**\n* Internal use only\n*/\nROS2D.PolygonMarker.prototype.createLineShape = function (startPoint, endPoint) {\n  var line = new createjs.Shape();\n  //  line.graphics.setStrokeStyle(this.strokeSize);\n  //  line.graphics.beginStroke(this.strokeColor);\n  //  line.graphics.moveTo(startPoint.x, startPoint.y);\n  //  line.graphics.lineTo(endPoint.x, endPoint.y);\n  this.editLineShape(line, startPoint, endPoint);\n  var that = this;\n  line.addEventListener('mousedown', function (event) {\n    if (that.lineCallBack !== null && typeof that.lineCallBack !== 'undefined') {\n      that.lineCallBack('mousedown', event, that.lineContainer.getChildIndex(event.target));\n    }\n  });\n  return line;\n};\n\n/**\n* Internal use only\n*/\nROS2D.PolygonMarker.prototype.editLineShape = function (line, startPoint, endPoint) {\n  line.graphics.clear();\n  line.graphics.setStrokeStyle(this.lineSize);\n  line.graphics.beginStroke(this.lineColor);\n  line.graphics.moveTo(startPoint.x, startPoint.y);\n  line.graphics.lineTo(endPoint.x, endPoint.y);\n};\n\n/**\n* Internal use only\n*/\nROS2D.PolygonMarker.prototype.createPointShape = function (pos) {\n  var point = new createjs.Shape();\n  point.graphics.beginFill(this.pointColor);\n  point.graphics.drawCircle(0, 0, this.pointSize);\n  point.x = pos.x;\n  point.y = -pos.y;\n  var that = this;\n  point.addEventListener('mousedown', function (event) {\n    if (that.pointCallBack !== null && typeof that.pointCallBack !== 'undefined') {\n      that.pointCallBack('mousedown', event, that.pointContainer.getChildIndex(event.target));\n    }\n  });\n  return point;\n};\n\n/**\n* Adds a point to the polygon\n*\n* @param position of type ROSLIB.Vector3\n*/\nROS2D.PolygonMarker.prototype.addPoint = function (pos) {\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChild(point);\n  var numPoints = this.pointContainer.getNumChildren();\n\n  // 0 points -> 1 point, 0 lines\n  // 1 point  -> 2 points, lines: add line between previous and new point, add line between new point and first point\n  // 2 points -> 3 points, 3 lines: change last line, add line between new point and first point\n  // 3 points -> 4 points, 4 lines: change last line, add line between new point and first point\n  // etc\n\n  if (numPoints < 2) {\n    // Now 1 point\n  } else if (numPoints < 3) {\n    // Now 2 points: add line between previous and new point\n    var line = this.createLineShape(this.pointContainer.getChildAt(numPoints - 2), point);\n    this.lineContainer.addChild(line);\n  }\n  if (numPoints > 2) {\n    // Now 3 or more points: change last line\n    this.editLineShape(this.lineContainer.getChildAt(numPoints - 2), this.pointContainer.getChildAt(numPoints - 2), point);\n  }\n  if (numPoints > 1) {\n    // Now 2 or more points: add line between new point and first point\n    var lineEnd = this.createLineShape(point, this.pointContainer.getChildAt(0));\n    this.lineContainer.addChild(lineEnd);\n  }\n  this.drawFill();\n};\n\n/**\n* Removes a point from the polygon\n*\n* @param obj either an index (integer) or a point shape of the polygon\n*/\nROS2D.PolygonMarker.prototype.remPoint = function (obj) {\n  var index;\n  //  var point;\n  if (obj instanceof createjs.Shape) {\n    index = this.pointContainer.getChildIndex(obj);\n    //    point = obj;\n  } else {\n    index = obj;\n    //    point = this.pointContainer.getChildAt(index);\n  }\n\n  // 0 points -> 0 points, 0 lines\n  // 1 point  -> 0 points, 0 lines\n  // 2 points -> 1 point,  0 lines: remove all lines\n  // 3 points -> 2 points, 2 lines: change line before point to remove, remove line after point to remove\n  // 4 points -> 3 points, 3 lines: change line before point to remove, remove line after point to remove\n  // etc\n\n  var numPoints = this.pointContainer.getNumChildren();\n  if (numPoints < 2) {} else if (numPoints < 3) {\n    // 2 points: remove all lines\n    this.lineContainer.removeAllChildren();\n  } else {\n    // 3 or more points: change line before point to remove, remove line after point to remove\n    this.editLineShape(this.lineContainer.getChildAt((index - 1 + numPoints) % numPoints), this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints), this.pointContainer.getChildAt((index + 1) % numPoints));\n    this.lineContainer.removeChildAt(index);\n  }\n  this.pointContainer.removeChildAt(index);\n  //  this.points.splice(index, 1);\n\n  this.drawFill();\n};\n\n/**\n* Moves a point of the polygon\n*\n* @param obj either an index (integer) or a point shape of the polygon\n* @param position of type ROSLIB.Vector3\n*/\nROS2D.PolygonMarker.prototype.movePoint = function (obj, newPos) {\n  var index;\n  var point;\n  if (obj instanceof createjs.Shape) {\n    index = this.pointContainer.getChildIndex(obj);\n    point = obj;\n  } else {\n    index = obj;\n    point = this.pointContainer.getChildAt(index);\n  }\n  point.x = newPos.x;\n  point.y = -newPos.y;\n  var numPoints = this.pointContainer.getNumChildren();\n  if (numPoints > 1) {\n    // line before moved point\n    var line1 = this.lineContainer.getChildAt((index - 1 + numPoints) % numPoints);\n    this.editLineShape(line1, this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints), point);\n\n    // line after moved point\n    var line2 = this.lineContainer.getChildAt(index);\n    this.editLineShape(line2, point, this.pointContainer.getChildAt((index + 1) % numPoints));\n  }\n  this.drawFill();\n};\n\n/**\n* Splits a line of the polygon: inserts a point at the center of the line\n*\n* @param obj either an index (integer) or a line shape of the polygon\n*/\nROS2D.PolygonMarker.prototype.splitLine = function (obj) {\n  var index;\n  var line;\n  if (obj instanceof createjs.Shape) {\n    index = this.lineContainer.getChildIndex(obj);\n    line = obj;\n  } else {\n    index = obj;\n    line = this.lineContainer.getChildAt(index);\n  }\n  var numPoints = this.pointContainer.getNumChildren();\n  var xs = this.pointContainer.getChildAt(index).x;\n  var ys = this.pointContainer.getChildAt(index).y;\n  var xe = this.pointContainer.getChildAt((index + 1) % numPoints).x;\n  var ye = this.pointContainer.getChildAt((index + 1) % numPoints).y;\n  var xh = (xs + xe) / 2.0;\n  var yh = (ys + ye) / 2.0;\n  var pos = new ROSLIB.Vector3({\n    x: xh,\n    y: -yh\n  });\n\n  // Add a point in the center of the line to split\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChildAt(point, index + 1);\n  ++numPoints;\n\n  // Add a line between the new point and the end of the line to split\n  var lineNew = this.createLineShape(point, this.pointContainer.getChildAt((index + 2) % numPoints));\n  this.lineContainer.addChildAt(lineNew, index + 1);\n\n  // Set the endpoint of the line to split to the new point\n  this.editLineShape(line, this.pointContainer.getChildAt(index), point);\n  this.drawFill();\n};\n\n/**\n* Internal use only\n*/\nROS2D.PolygonMarker.prototype.drawFill = function () {\n  var numPoints = this.pointContainer.getNumChildren();\n  if (numPoints > 2) {\n    var g = this.fillShape.graphics;\n    g.clear();\n    g.setStrokeStyle(0);\n    g.moveTo(this.pointContainer.getChildAt(0).x, this.pointContainer.getChildAt(0).y);\n    g.beginStroke();\n    g.beginFill(this.fillColor);\n    for (var i = 1; i < numPoints; ++i) {\n      g.lineTo(this.pointContainer.getChildAt(i).x, this.pointContainer.getChildAt(i).y);\n    }\n    g.closePath();\n    g.endFill();\n    g.endStroke();\n  } else {\n    this.fillShape.graphics.clear();\n  }\n};\nROS2D.PolygonMarker.prototype.__proto__ = createjs.Container.prototype;\n\n/**\n* @author Bart van Vliet - bart@dobots.nl\n*/\n\n/**\n* A trace of poses, handy to see where a robot has been\n*\n* @constructor\n* @param options - object with following keys:\n*   * pose (optional) - the first pose of the trace\n*   * strokeSize (optional) - the size of the outline\n*   * strokeColor (optional) - the createjs color for the stroke\n*   * maxPoses (optional) - the maximum number of poses to keep, 0 for infinite\n*   * minDist (optional) - the minimal distance between poses to use the pose for drawing (default 0.05)\n*/\nROS2D.TraceShape = function (options) {\n  //  var that = this;\n  options = options || {};\n  var pose = options.pose;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  this.maxPoses = options.maxPoses || 100;\n  this.minDist = options.minDist || 0.05;\n\n  // Store minDist as the square of it\n  this.minDist = this.minDist * this.minDist;\n\n  // Array of the poses\n  // TODO: do we need this?\n  this.poses = [];\n\n  // Create the graphics\n  this.graphics = new createjs.Graphics();\n  this.graphics.setStrokeStyle(this.strokeSize);\n  this.graphics.beginStroke(this.strokeColor);\n\n  // Add first pose if given\n  if (pose !== null && typeof pose !== 'undefined') {\n    this.poses.push(pose);\n  }\n\n  // Create the shape\n  createjs.Shape.call(this, this.graphics);\n};\n\n/**\n* Adds a pose to the trace and updates the graphics\n*\n* @param pose of type ROSLIB.Pose\n*/\nROS2D.TraceShape.prototype.addPose = function (pose) {\n  var last = this.poses.length - 1;\n  if (last < 0) {\n    this.poses.push(pose);\n    this.graphics.moveTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n  } else {\n    var prevX = this.poses[last].position.x;\n    var prevY = this.poses[last].position.y;\n    var dx = pose.position.x - prevX;\n    var dy = pose.position.y - prevY;\n    if (dx * dx + dy * dy > this.minDist) {\n      this.graphics.lineTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n      this.poses.push(pose);\n    }\n  }\n  if (this.maxPoses > 0 && this.maxPoses < this.poses.length) {\n    this.popFront();\n  }\n};\n\n/**\n* Removes front pose and updates the graphics\n*/\nROS2D.TraceShape.prototype.popFront = function () {\n  if (this.poses.length > 0) {\n    this.poses.shift();\n    // TODO: shift drawing instructions rather than doing it all over\n    this.graphics.clear();\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.lineTo(this.poses[0].position.x / this.scaleX, this.poses[0].position.y / -this.scaleY);\n    for (var i = 1; i < this.poses.length; ++i) {\n      this.graphics.lineTo(this.poses[i].position.x / this.scaleX, this.poses[i].position.y / -this.scaleY);\n    }\n  }\n};\nROS2D.TraceShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n* @author Bart van Vliet - bart@dobots.nl\n*/\n\n/**\n* Adds panning to a view\n*\n* @constructor\n* @param options - object with following keys:\n*   * rootObject (optional) - the root object to apply panning to\n*/\nROS2D.PanView = function (options) {\n  options = options || {};\n  this.rootObject = options.rootObject;\n\n  // get a handle to the stage\n  if (this.rootObject instanceof createjs.Stage) {\n    this.stage = this.rootObject;\n  } else {\n    this.stage = this.rootObject.getStage();\n  }\n  this.startPos = new ROSLIB.Vector3();\n};\nROS2D.PanView.prototype.startPan = function (startX, startY) {\n  this.startPos.x = startX;\n  this.startPos.y = startY;\n};\nROS2D.PanView.prototype.pan = function (curX, curY) {\n  this.stage.x += curX - this.startPos.x;\n  this.startPos.x = curX;\n  this.stage.y += curY - this.startPos.y;\n  this.startPos.y = curY;\n};\n\n/**\n* @author Russell Toris - rctoris@wpi.edu\n*/\n\n/**\n* A Viewer can be used to render an interactive 2D scene to a HTML5 canvas.\n*\n* @constructor\n* @param options - object with following keys:\n*   * divID - the ID of the div to place the viewer in\n*   * width - the initial width, in pixels, of the canvas\n*   * height - the initial height, in pixels, of the canvas\n*   * background (optional) - the color to render the background, like '#efefef'\n*/\nROS2D.Viewer = function (options) {\n  var that = this;\n  options = options || {};\n  var divID = options.divID;\n  this.width = options.width;\n  this.height = options.height;\n  var background = options.background || 'transparent';\n\n  // create the canvas to render to\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n  canvas.width = this.width;\n  canvas.height = this.height;\n  canvas.style.background = background;\n  // canvas.id = options.canvasID || \"mapCanvas\";//this has been added\n  document.getElementById(divID).appendChild(canvas);\n  // create the easel to use\n  this.scene = new createjs.Stage(canvas);\n\n  // change Y axis center\n  this.scene.y = this.height;\n\n  // add the renderer to the page\n  document.getElementById(divID).appendChild(canvas);\n\n  // update at 30fps\n  createjs.Ticker.setFPS(30);\n  createjs.Ticker.addEventListener('tick', this.scene);\n\n  //  var canvas = ctx.canvas ;\n  // var hRatio = canvas.width  / img.width    ;\n  // var vRatio =  canvas.height / img.height  ;\n  // var ratio  = Math.min ( hRatio, vRatio );\n  // var centerShift_x = ( canvas.width - img.width*ratio ) / 2;\n  // var centerShift_y = ( canvas.height - img.height*ratio ) / 2;  \n  // ctx.clearRect(0,0,canvas.width, canvas.height);\n  // ctx.drawImage(img, 0,0, img.width, img.height,\n  //                    centerShift_x,centerShift_y,img.width*ratio, img.height*ratio);\n};\n\n///Javascript prototype allows to add methods and objects to already existing methods so add one method having parameters width and heght access canvas context and boom you got scaling i guess\n\n/**\n* Add the given createjs object to the global scene in the viewer.\n*\n* @param object - the object to add\n*/\nROS2D.Viewer.prototype.addObject = function (object) {\n  this.scene.addChild(object);\n};\n\n/**\n* Scale the scene to fit the given width and height into the current canvas.\n*\n* @param width - the width to scale to in meters\n* @param height - the height to scale to in meters\n*/\nROS2D.Viewer.prototype.scaleToDimensions = function (width, height) {\n  // restore to values before shifting, if ocurred\n  console.log(width, height);\n  this.scene.x = typeof this.scene.x_prev_shift !== 'undefined' ? this.scene.x_prev_shift : this.scene.x;\n  this.scene.y = typeof this.scene.y_prev_shift !== 'undefined' ? this.scene.y_prev_shift : this.scene.y;\n\n  // save scene scaling\n  this.scene.scaleX = this.width / width;\n  this.scene.scaleY = this.height / height;\n\n  // console.log(this.scene.scaleX);\n  // console.log(this.scene.scaleY);\n};\n\n/**\n* Shift the main view of the canvas by the given amount. This is based on the\n* ROS coordinate system. That is, Y is opposite that of a traditional canvas.\n*\n* @param x - the amount to shift by in the x direction in meters\n* @param y - the amount to shift by in the y direction in meters\n*/\nROS2D.Viewer.prototype.shift = function (x, y) {\n  // var ratio  = Math.min ( this.scene.scaleX, this.scene.scaleY );\n  // save current offset\n  this.scene.x_prev_shift = this.scene.x;\n  this.scene.y_prev_shift = this.scene.y;\n  console.log(this.scene.x, this.scene.y, x, y);\n  // shift scene by scaling the desired offset\n  this.scene.x -= x * this.scene.scaleX;\n  this.scene.y += y * this.scene.scaleY;\n\n  //  var centerShift_x = ( this.scene.x - img.width*ratio ) / 2;\n  // var centerShift_y = ( canvas.height - img.height*ratio ) / 2;  \n  //ctx.clearRect(0,0,canvas.width, canvas.height);\n  //ctx.drawImage(img, 0,0, img.width, img.height,\n  //                 centerShift_x,centerShift_y,img.width*ratio, img.height*ratio);  \n};\n\n/**\n* @author Bart van Vliet - bart@dobots.nl\n*/\n\n/**\n* Adds zooming to a view\n*\n* @constructor\n* @param options - object with following keys:\n*   * rootObject (optional) - the root object to apply zoom to\n*   * minScale (optional) - minimum scale to set to preserve precision\n*/\nROS2D.ZoomView = function (options) {\n  options = options || {};\n  this.rootObject = options.rootObject;\n  this.minScale = options.minScale || 0.001;\n\n  // get a handle to the stage\n  if (this.rootObject instanceof createjs.Stage) {\n    this.stage = this.rootObject;\n  } else {\n    this.stage = this.rootObject.getStage();\n  }\n  this.center = new ROSLIB.Vector3();\n  this.startShift = new ROSLIB.Vector3();\n  this.startScale = new ROSLIB.Vector3();\n};\nROS2D.ZoomView.prototype.startZoom = function (centerX, centerY) {\n  this.center.x = centerX;\n  this.center.y = centerY;\n  this.startShift.x = this.stage.x;\n  this.startShift.y = this.stage.y;\n  this.startScale.x = this.stage.scaleX;\n  this.startScale.y = this.stage.scaleY;\n};\nROS2D.ZoomView.prototype.zoom = function (zoom) {\n  // Make sure scale doesn't become too small\n  if (this.startScale.x * zoom < this.minScale) {\n    zoom = this.minScale / this.startScale.x;\n  }\n  if (this.startScale.y * zoom < this.minScale) {\n    zoom = this.minScale / this.startScale.y;\n  }\n  this.stage.scaleX = this.startScale.x * zoom;\n  this.stage.scaleY = this.startScale.y * zoom;\n  this.stage.x = this.startShift.x - (this.center.x - this.startShift.x) * (this.stage.scaleX / this.startScale.x - 1);\n  this.stage.y = this.startShift.y - (this.center.y - this.startShift.y) * (this.stage.scaleY / this.startScale.y - 1);\n};","map":{"version":3,"names":["ROS2D","REVISION","createjs","Stage","prototype","globalToRos","x","y","rosX","scaleX","rosY","scaleY","ROSLIB","Vector3","rosToGlobal","pos","rosQuaternionToGlobalTheta","orientation","q0","w","q1","q2","q3","z","Math","atan2","PI","ImageMap","options","message","image","pose","Pose","position","origin","width","height","Bitmap","call","resolution","__proto__","ImageMapClient","that","ros","topic","rootObject","Container","currentImage","Shape","rosTopic","Topic","name","messageType","subscribe","unsubscribe","addChild","Grid","size","index","getChildIndex","emit","removeImg","removeChild","addImg","addChildAt","EventEmitter2","OccupancyGrid","canvas","document","createElement","context","getContext","info","imageData","createImageData","row","col","mapI","data","val","i","putImageData","OccupancyGridClient","continuous","currentGrid","compression","OccupancyGridSrvClient","service","rosService","Service","serviceType","callService","ServiceRequest","response","map","ArrowShape","strokeSize","strokeColor","Graphics","getRGB","fillColor","pulse","graphics","headLen","headWidth","setStrokeStyle","beginStroke","moveTo","lineTo","beginFill","closePath","endFill","endStroke","growCount","growing","Ticker","addEventListener","cellSize","lineWidth","NavigationArrow","NavigationImage","image_url","alpha","originals","paintImage","scale","calculateScale","regY","regX","rotation","Object","defineProperty","get","set","value","SCALE_SIZE","_size","Image","onload","src","PathShape","path","poses","length","setPath","clear","PolygonMarker","lineSize","lineColor","pointSize","pointColor","lineCallBack","pointCallBack","pointContainer","lineContainer","fillShape","createLineShape","startPoint","endPoint","line","editLineShape","event","target","createPointShape","point","drawCircle","addPoint","numPoints","getNumChildren","getChildAt","lineEnd","drawFill","remPoint","obj","removeAllChildren","removeChildAt","movePoint","newPos","line1","line2","splitLine","xs","ys","xe","ye","xh","yh","lineNew","g","TraceShape","maxPoses","minDist","push","addPose","last","prevX","prevY","dx","dy","popFront","shift","PanView","stage","getStage","startPos","startPan","startX","startY","pan","curX","curY","Viewer","divID","background","style","getElementById","appendChild","scene","setFPS","addObject","object","scaleToDimensions","console","log","x_prev_shift","y_prev_shift","ZoomView","minScale","center","startShift","startScale","startZoom","centerX","centerY","zoom"],"sources":["/Users/canozdemir/Downloads/web-based-navigation-rosbridge/src/components/vendor/ros2d.js"],"sourcesContent":["/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n var ROS2D = ROS2D || {\n  REVISION: '0.9.0'\n};\n\n// convert the given global Stage coordinates to ROS coordinates\ncreatejs.Stage.prototype.globalToRos = function(x, y) {\n  var rosX = (x - this.x) / this.scaleX;\n  var rosY = (this.y - y) / this.scaleY;\n  return new ROSLIB.Vector3({\n      x: rosX,\n      y: rosY\n  });\n};\n\n// convert the given ROS coordinates to global Stage coordinates\ncreatejs.Stage.prototype.rosToGlobal = function(pos) {\n  var x = pos.x * this.scaleX + this.x;\n  var y = pos.y * this.scaleY + this.y;\n  return {\n      x: x,\n      y: y\n  };\n};\n\n// convert a ROS quaternion to theta in degrees\ncreatejs.Stage.prototype.rosQuaternionToGlobalTheta = function(orientation) {\n  // See https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Rotation_matrices\n  // here we use [x y z] = R * [1 0 0]\n  var q0 = orientation.w;\n  var q1 = orientation.x;\n  var q2 = orientation.y;\n  var q3 = orientation.z;\n  // Canvas rotation is clock wise and in degrees\n  return -Math.atan2(2 * (q0 * q3 + q1 * q2), 1 - 2 * (q2 * q2 + q3 * q3)) * 180.0 / Math.PI;\n};\n\n/**\n* @author Russell Toris - rctoris@wpi.edu\n*/\n\n/**\n* An image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n*\n* @constructor\n* @param options - object with following keys:\n*   * message - the occupancy grid map meta data message\n*   * image - the image URL to load\n*/\nROS2D.ImageMap = function(options) {\n  options = options || {};\n  var message = options.message;\n  var image = options.image;\n\n  // save the metadata we need\n  this.pose = new ROSLIB.Pose({\n      position: message.origin.position,\n      orientation: message.origin.orientation\n  });\n\n  // set the size\n  this.width = message.width;\n  this.height = message.height;\n\n\n  // create the bitmap\n  createjs.Bitmap.call(this, image);\n  // change Y direction\n  this.y = -this.height * message.resolution;\n  // scale the image\n  this.scaleX = message.resolution;\n  this.scaleY = message.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY;\n\n  // set the pose\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n\n};\nROS2D.ImageMap.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n* @author Russell Toris - rctoris@wpi.edu\n*/\n\n/**\n* A image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n*\n* Emits the following events:\n*   * 'change' - there was an update or change in the map\n*\n* @constructor\n* @param options - object with following keys:\n*   * ros - the ROSLIB.Ros connection handle\n*   * topic (optional) - the map meta data topic to listen to\n*   * image - the image URL to load\n*   * rootObject (optional) - the root object to add this marker to\n*/\nROS2D.ImageMapClient = function(options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  this.image = options.image;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // create an empty shape to start with\n  this.currentImage = new createjs.Shape();\n\n  var rosTopic = new ROSLIB.Topic({\n      ros: ros,\n      name: topic,\n      messageType: 'nav_msgs/MapMetaData'\n  });\n\n  rosTopic.subscribe(function(message) {\n      // we only need this once\n      rosTopic.unsubscribe();\n\n      // create the image\n      that.currentImage = new ROS2D.ImageMap({\n          message: message,\n          image: that.image\n      });\n      that.rootObject.addChild(that.currentImage);\n  \n\n      // work-around for a bug in easeljs -- needs a second object to render correctly\n      that.rootObject.addChild(new ROS2D.Grid({ size: 1 }));\n\n      if (!that.index) {\n          that.index = that.rootObject.getChildIndex(that.currentImage);\n      }\n\n      that.emit('change');\n  });\n  \n  this.removeImg = function() {\n      that.rootObject.removeChild(that.currentImage);\n  }\n\n  this.addImg = function() {\n      // that.rootObject.addChild(that.currentImage);\n      that.rootObject.addChildAt(that.currentImage, that.index);\n      // that.rootObject.addChild(new ROS2D.Grid({ size: 1 }));\n  }\n\n};\nROS2D.ImageMapClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n* @author Russell Toris - rctoris@wpi.edu\n*/\n\n/**\n* An OccupancyGrid can convert a ROS occupancy grid message into a createjs Bitmap object.\n*\n* @constructor\n* @param options - object with following keys:\n*   * message - the occupancy grid message\n*/\nROS2D.OccupancyGrid = function(options) {\n  options = options || {};\n  var message = options.message;\n\n  // internal drawing canvas\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n\n  ////////////*********/////////////\n  ///i add this soryyyy\n  // context.clearRect(0, 0, canvas.width, canvas.height);\n  //384\n\n  //////////**********/////////////  \n  // save the metadata we need\n  this.pose = new ROSLIB.Pose({\n      position: message.info.origin.position,\n      orientation: message.info.origin.orientation\n  });\n\n  // set the size\n  this.width = message.info.width;\n  this.height = message.info.height;\n  canvas.width = this.width;\n  canvas.height = this.height;\n\n  var imageData = context.createImageData(this.width, this.height);\n  for (var row = 0; row < this.height; row++) {\n      for (var col = 0; col < this.width; col++) {\n          // determine the index into the map data\n          var mapI = col + ((this.height - row - 1) * this.width);\n          // determine the value\n          var data = message.data[mapI];\n          var val;\n          if (data === 100) {\n              val = 0;\n          } else if (data === 0) {\n              val = 255;\n          } else {\n              val = 127;\n          }\n\n          // determine the index into the image data array\n          var i = (col + (row * this.width)) * 4;\n          // r\n          imageData.data[i] = val;\n          // g\n          imageData.data[++i] = val;\n          // b\n          imageData.data[++i] = val;\n          // a\n          imageData.data[++i] = 255;\n      }\n  }\n  context.putImageData(imageData, 0, 0);\n\n  // create the bitmap\n  createjs.Bitmap.call(this, canvas);\n  // change Y direction\n  this.y = -this.height * message.info.resolution;\n\n  // scale the image\n  this.scaleX = message.info.resolution;\n  this.scaleY = message.info.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY;\n\n  // set the pose\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n};\nROS2D.OccupancyGrid.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n* @author Russell Toris - rctoris@wpi.edu\n*/\n\n/**\n* A map that listens to a given occupancy grid topic.\n*\n* Emits the following events:\n*   * 'change' - there was an update or change in the map\n*\n* @constructor\n* @param options - object with following keys:\n*   * ros - the ROSLIB.Ros connection handle\n*   * topic (optional) - the map topic to listen to\n*   * rootObject (optional) - the root object to add this marker to\n*   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n*/\nROS2D.OccupancyGridClient = function(options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || '/map';\n  this.continuous = options.continuous;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // current grid that is displayed\n  // create an empty shape to start with, so that the order remains correct.\n  this.currentGrid = new createjs.Shape();\n  this.rootObject.addChild(this.currentGrid);\n  // work-around for a bug in easeljs -- needs a second object to render correctly\n  this.rootObject.addChild(new ROS2D.Grid({ size: 1 }));\n\n  // subscribe to the topic\n  var rosTopic = new ROSLIB.Topic({\n      ros: ros,\n      name: topic,\n      messageType: 'nav_msgs/OccupancyGrid',\n      compression: 'png'\n  });\n\n\n  rosTopic.subscribe(function(message) {\n      // check for an old map\n      var index = null;\n      if (that.currentGrid) {\n          index = that.rootObject.getChildIndex(that.currentGrid);\n          that.rootObject.removeChild(that.currentGrid);\n      }\n\n\n      that.currentGrid = new ROS2D.OccupancyGrid({\n          message: message\n      });\n      if (index !== null) {\n          that.rootObject.addChildAt(that.currentGrid, index);\n      } else {\n          that.rootObject.addChild(that.currentGrid);\n      }\n\n      that.emit('change');\n\n      // check if we should unsubscribe\n      if (!that.continuous) {\n          rosTopic.unsubscribe();\n      }\n\n  });\n};\nROS2D.OccupancyGridClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n* @author Jihoon Lee- jihoonlee.in@gmail.com\n* @author Russell Toris - rctoris@wpi.edu\n*/\n\n/**\n* A static map that receives from map_server.\n*\n* Emits the following events:\n*   * 'change' - there was an update or change in the map\n*\n* @constructor\n* @param options - object with following keys:\n*   * ros - the ROSLIB.Ros connection handle\n*   * service (optional) - the map topic to listen to, like '/static_map'\n*   * rootObject (optional) - the root object to add this marker to\n*/\nROS2D.OccupancyGridSrvClient = function(options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var service = options.service || '/static_map';\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // current grid that is displayed\n  this.currentGrid = null;\n\n\n  // Setting up to the service\n  var rosService = new ROSLIB.Service({\n      ros: ros,\n      name: service,\n      serviceType: 'nav_msgs/GetMap',\n      compression: 'png'\n  });\n\n  rosService.callService(new ROSLIB.ServiceRequest(), function(response) {\n      // check for an old map\n      if (that.currentGrid) {\n          that.rootObject.removeChild(that.currentGrid);\n      }\n\n      that.currentGrid = new ROS2D.OccupancyGrid({\n          message: response.map\n      });\n      that.rootObject.addChild(that.currentGrid);\n\n      that.emit('change', that.currentGrid);\n  });\n};\nROS2D.OccupancyGridSrvClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n* @author Bart van Vliet - bart@dobots.nl\n*/\n\n/**\n* An arrow with line and triangular head, based on the navigation arrow.\n* Aims to the left at 0 rotation, as would be expected.\n*\n* @constructor\n* @param options - object with following keys:\n*   * size (optional) - the size of the marker\n*   * strokeSize (optional) - the size of the outline\n*   * strokeColor (optional) - the createjs color for the stroke\n*   * fillColor (optional) - the createjs color for the fill\n*   * pulse (optional) - if the marker should \"pulse\" over time\n*/\nROS2D.ArrowShape = function(options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse;\n\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n\n  var headLen = size / 3.0;\n  var headWidth = headLen * 2.0 / 3.0;\n\n  graphics.setStrokeStyle(strokeSize);\n  graphics.beginStroke(strokeColor);\n  graphics.moveTo(0, 0);\n  graphics.lineTo(size - headLen, 0);\n\n  graphics.beginFill(fillColor);\n  graphics.moveTo(size, 0);\n  graphics.lineTo(size - headLen, headWidth / 2.0);\n  graphics.lineTo(size - headLen, -headWidth / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke();\n\n  // create the shape\n  createjs.Shape.call(this, graphics);\n\n  // check if we are pulsing\n  if (pulse) {\n      // have the model \"pulse\"\n      var growCount = 0;\n      var growing = true;\n      createjs.Ticker.addEventListener('tick', function() {\n          if (growing) {\n              that.scaleX *= 1.035;\n              that.scaleY *= 1.035;\n              growing = (++growCount < 10);\n          } else {\n              that.scaleX /= 1.035;\n              that.scaleY /= 1.035;\n              growing = (--growCount < 0);\n          }\n      });\n  }\n};\nROS2D.ArrowShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n* @author Raffaello Bonghi - raffaello.bonghi@officinerobotiche.it\n*/\n\n/**\n* A Grid object draw in map.\n*\n* @constructor\n* @param options - object with following keys:\n*  * size (optional) - the size of the grid\n*  * cellSize (optional) - the cell size of map\n*  * lineWidth (optional) - the width of the lines in the grid\n*/\nROS2D.Grid = function(options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var cellSize = options.cellSize || 0.1;\n  var lineWidth = options.lineWidth || 0.001;\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n  // line width\n  graphics.setStrokeStyle(lineWidth * 5);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n  graphics.moveTo(-size * cellSize, 0);\n  graphics.lineTo(size * cellSize, 0);\n  graphics.moveTo(0, -size * cellSize);\n  graphics.lineTo(0, size * cellSize);\n  graphics.endFill();\n  graphics.endStroke();\n\n  graphics.setStrokeStyle(lineWidth);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n  for (var i = -size; i <= size; i++) {\n      graphics.moveTo(-size * cellSize, i * cellSize);\n      graphics.lineTo(size * cellSize, i * cellSize);\n      graphics.moveTo(i * cellSize, -size * cellSize);\n      graphics.lineTo(i * cellSize, size * cellSize);\n  }\n  graphics.endFill();\n  graphics.endStroke();\n  // create the shape\n  createjs.Shape.call(this, graphics);\n\n};\nROS2D.Grid.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n* @author Russell Toris - rctoris@wpi.edu\n*/\n\n/**\n* A navigation arrow is a directed triangle that can be used to display orientation.\n*\n* @constructor\n* @param options - object with following keys:\n*   * size (optional) - the size of the marker\n*   * strokeSize (optional) - the size of the outline\n*   * strokeColor (optional) - the createjs color for the stroke\n*   * fillColor (optional) - the createjs color for the fill\n*   * pulse (optional) - if the marker should \"pulse\" over time\n*/\nROS2D.NavigationArrow = function(options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse;\n\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n  // line width\n  graphics.setStrokeStyle(strokeSize);\n  graphics.moveTo(-size / 2.0, -size / 2.0);\n  graphics.beginStroke(strokeColor);\n  graphics.beginFill(fillColor);\n  graphics.lineTo(size, 0);\n  graphics.lineTo(-size / 2.0, size / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke();\n\n  // create the shape\n  createjs.Shape.call(this, graphics);\n\n  // check if we are pulsing\n  if (pulse) {\n      // have the model \"pulse\"\n      var growCount = 0;\n      var growing = true;\n      createjs.Ticker.addEventListener('tick', function() {\n          if (growing) {\n              that.scaleX *= 1.035;\n              that.scaleY *= 1.035;\n              growing = (++growCount < 10);\n          } else {\n              that.scaleX /= 1.035;\n              that.scaleY /= 1.035;\n              growing = (--growCount < 0);\n          }\n      });\n  }\n};\nROS2D.NavigationArrow.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n* @author Inigo Gonzalez - ingonza85@gmail.com\n*/\n\n/**\n* A navigation image that can be used to display orientation.\n*\n* @constructor\n* @param options - object with following keys:\n*   * size (optional) - the size of the marker\n*   * image - the image to use as a marker\n*   * pulse (optional) - if the marker should \"pulse\" over time\n*/\nROS2D.NavigationImage = function(options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var image_url = options.image;\n  var pulse = options.pulse;\n  var alpha = options.alpha || 1;\n\n  var originals = {};\n\n  var paintImage = function() {\n      createjs.Bitmap.call(that, image);\n      var scale = calculateScale(size);\n      that.alpha = alpha;\n      that.scaleX = scale;\n      that.scaleY = scale;\n      that.regY = that.image.height / 2;\n      that.regX = that.image.width / 2;\n      originals['rotation'] = that.rotation;\n      Object.defineProperty(that, 'rotation', {\n          get: function() { return originals['rotation'] + 90; },\n          set: function(value) { originals['rotation'] = value; }\n      });\n      if (pulse) {\n          // have the model \"pulse\"\n          var growCount = 0;\n          var growing = true;\n          var SCALE_SIZE = 1.020;\n          createjs.Ticker.addEventListener('tick', function() {\n              if (growing) {\n                  that.scaleX *= SCALE_SIZE;\n                  that.scaleY *= SCALE_SIZE;\n                  growing = (++growCount < 10);\n              } else {\n                  that.scaleX /= SCALE_SIZE;\n                  that.scaleY /= SCALE_SIZE;\n                  growing = (--growCount < 0);\n              }\n          });\n      }\n  };\n\n  var calculateScale = function(_size) {\n      return _size / image.width;\n  };\n\n  var image = new Image();\n  image.onload = paintImage;\n  image.src = image_url;\n\n};\n\nROS2D.NavigationImage.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n* @author Bart van Vliet - bart@dobots.nl\n*/\n\n/**\n* A shape to draw a nav_msgs/Path msg\n*\n* @constructor\n* @param options - object with following keys:\n*   * path (optional) - the initial path to draw\n*   * strokeSize (optional) - the size of the outline\n*   * strokeColor (optional) - the createjs color for the stroke\n*/\nROS2D.PathShape = function(options) {\n  options = options || {};\n  var path = options.path;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n\n  // draw the line\n  this.graphics = new createjs.Graphics();\n\n  if (path !== null && typeof path !== 'undefined') {\n      this.graphics.setStrokeStyle(this.strokeSize);\n      this.graphics.beginStroke(this.strokeColor);\n      this.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n      for (var i = 1; i < path.poses.length; ++i) {\n          this.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n      }\n      this.graphics.endStroke();\n  }\n\n  // create the shape\n  createjs.Shape.call(this, this.graphics);\n};\n\n/**\n* Set the path to draw\n*\n* @param path of type nav_msgs/Path\n*/\nROS2D.PathShape.prototype.setPath = function(path) {\n  this.graphics.clear();\n  if (path !== null && typeof path !== 'undefined') {\n      this.graphics.setStrokeStyle(this.strokeSize);\n      this.graphics.beginStroke(this.strokeColor);\n      this.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n      for (var i = 1; i < path.poses.length; ++i) {\n          this.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n      }\n      this.graphics.endStroke();\n  }\n};\n\nROS2D.PathShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n* @author Bart van Vliet - bart@dobots.nl\n*/\n\n/**\n* A polygon that can be edited by an end user\n*\n* @constructor\n* @param options - object with following keys:\n*   * pose (optional) - the first pose of the trace\n*   * lineSize (optional) - the width of the lines\n*   * lineColor (optional) - the createjs color of the lines\n*   * pointSize (optional) - the size of the points\n*   * pointColor (optional) - the createjs color of the points\n*   * fillColor (optional) - the createjs color to fill the polygon\n*   * lineCallBack (optional) - callback function for mouse interaction with a line\n*   * pointCallBack (optional) - callback function for mouse interaction with a point\n*/\nROS2D.PolygonMarker = function(options) {\n  //  var that = this;\n  options = options || {};\n  this.lineSize = options.lineSize || 3;\n  this.lineColor = options.lineColor || createjs.Graphics.getRGB(0, 0, 255, 0.66);\n  this.pointSize = options.pointSize || 10;\n  this.pointColor = options.pointColor || createjs.Graphics.getRGB(255, 0, 0, 0.66);\n  this.fillColor = options.pointColor || createjs.Graphics.getRGB(0, 255, 0, 0.33);\n  this.lineCallBack = options.lineCallBack;\n  this.pointCallBack = options.pointCallBack;\n\n  // Array of point shapes\n  //  this.points = [];\n  this.pointContainer = new createjs.Container();\n\n  // Array of line shapes\n  //  this.lines = [];\n  this.lineContainer = new createjs.Container();\n\n  this.fillShape = new createjs.Shape();\n\n  // Container with all the lines and points\n  createjs.Container.call(this);\n\n  this.addChild(this.fillShape);\n  this.addChild(this.lineContainer);\n  this.addChild(this.pointContainer);\n};\n\n/**\n* Internal use only\n*/\nROS2D.PolygonMarker.prototype.createLineShape = function(startPoint, endPoint) {\n  var line = new createjs.Shape();\n  //  line.graphics.setStrokeStyle(this.strokeSize);\n  //  line.graphics.beginStroke(this.strokeColor);\n  //  line.graphics.moveTo(startPoint.x, startPoint.y);\n  //  line.graphics.lineTo(endPoint.x, endPoint.y);\n  this.editLineShape(line, startPoint, endPoint);\n\n  var that = this;\n  line.addEventListener('mousedown', function(event) {\n      if (that.lineCallBack !== null && typeof that.lineCallBack !== 'undefined') {\n          that.lineCallBack('mousedown', event, that.lineContainer.getChildIndex(event.target));\n      }\n  });\n\n  return line;\n};\n\n/**\n* Internal use only\n*/\nROS2D.PolygonMarker.prototype.editLineShape = function(line, startPoint, endPoint) {\n  line.graphics.clear();\n  line.graphics.setStrokeStyle(this.lineSize);\n  line.graphics.beginStroke(this.lineColor);\n  line.graphics.moveTo(startPoint.x, startPoint.y);\n  line.graphics.lineTo(endPoint.x, endPoint.y);\n};\n\n/**\n* Internal use only\n*/\nROS2D.PolygonMarker.prototype.createPointShape = function(pos) {\n  var point = new createjs.Shape();\n  point.graphics.beginFill(this.pointColor);\n  point.graphics.drawCircle(0, 0, this.pointSize);\n  point.x = pos.x;\n  point.y = -pos.y;\n\n  var that = this;\n  point.addEventListener('mousedown', function(event) {\n      if (that.pointCallBack !== null && typeof that.pointCallBack !== 'undefined') {\n          that.pointCallBack('mousedown', event, that.pointContainer.getChildIndex(event.target));\n      }\n  });\n\n  return point;\n};\n\n/**\n* Adds a point to the polygon\n*\n* @param position of type ROSLIB.Vector3\n*/\nROS2D.PolygonMarker.prototype.addPoint = function(pos) {\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChild(point);\n  var numPoints = this.pointContainer.getNumChildren();\n\n  // 0 points -> 1 point, 0 lines\n  // 1 point  -> 2 points, lines: add line between previous and new point, add line between new point and first point\n  // 2 points -> 3 points, 3 lines: change last line, add line between new point and first point\n  // 3 points -> 4 points, 4 lines: change last line, add line between new point and first point\n  // etc\n\n  if (numPoints < 2) {\n      // Now 1 point\n  } else if (numPoints < 3) {\n      // Now 2 points: add line between previous and new point\n      var line = this.createLineShape(this.pointContainer.getChildAt(numPoints - 2), point);\n      this.lineContainer.addChild(line);\n  }\n  if (numPoints > 2) {\n      // Now 3 or more points: change last line\n      this.editLineShape(this.lineContainer.getChildAt(numPoints - 2), this.pointContainer.getChildAt(numPoints - 2), point);\n  }\n  if (numPoints > 1) {\n      // Now 2 or more points: add line between new point and first point\n      var lineEnd = this.createLineShape(point, this.pointContainer.getChildAt(0));\n      this.lineContainer.addChild(lineEnd);\n  }\n\n  this.drawFill();\n};\n\n/**\n* Removes a point from the polygon\n*\n* @param obj either an index (integer) or a point shape of the polygon\n*/\nROS2D.PolygonMarker.prototype.remPoint = function(obj) {\n  var index;\n  //  var point;\n  if (obj instanceof createjs.Shape) {\n      index = this.pointContainer.getChildIndex(obj);\n      //    point = obj;\n  } else {\n      index = obj;\n      //    point = this.pointContainer.getChildAt(index);\n  }\n\n  // 0 points -> 0 points, 0 lines\n  // 1 point  -> 0 points, 0 lines\n  // 2 points -> 1 point,  0 lines: remove all lines\n  // 3 points -> 2 points, 2 lines: change line before point to remove, remove line after point to remove\n  // 4 points -> 3 points, 3 lines: change line before point to remove, remove line after point to remove\n  // etc\n\n  var numPoints = this.pointContainer.getNumChildren();\n\n  if (numPoints < 2) {\n\n  } else if (numPoints < 3) {\n      // 2 points: remove all lines\n      this.lineContainer.removeAllChildren();\n  } else {\n      // 3 or more points: change line before point to remove, remove line after point to remove\n      this.editLineShape(\n          this.lineContainer.getChildAt((index - 1 + numPoints) % numPoints),\n          this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints),\n          this.pointContainer.getChildAt((index + 1) % numPoints)\n      );\n      this.lineContainer.removeChildAt(index);\n  }\n  this.pointContainer.removeChildAt(index);\n  //  this.points.splice(index, 1);\n\n  this.drawFill();\n};\n\n/**\n* Moves a point of the polygon\n*\n* @param obj either an index (integer) or a point shape of the polygon\n* @param position of type ROSLIB.Vector3\n*/\nROS2D.PolygonMarker.prototype.movePoint = function(obj, newPos) {\n  var index;\n  var point;\n  if (obj instanceof createjs.Shape) {\n      index = this.pointContainer.getChildIndex(obj);\n      point = obj;\n  } else {\n      index = obj;\n      point = this.pointContainer.getChildAt(index);\n  }\n  point.x = newPos.x;\n  point.y = -newPos.y;\n\n  var numPoints = this.pointContainer.getNumChildren();\n  if (numPoints > 1) {\n      // line before moved point\n      var line1 = this.lineContainer.getChildAt((index - 1 + numPoints) % numPoints);\n      this.editLineShape(line1, this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints), point);\n\n      // line after moved point\n      var line2 = this.lineContainer.getChildAt(index);\n      this.editLineShape(line2, point, this.pointContainer.getChildAt((index + 1) % numPoints));\n  }\n\n  this.drawFill();\n};\n\n/**\n* Splits a line of the polygon: inserts a point at the center of the line\n*\n* @param obj either an index (integer) or a line shape of the polygon\n*/\nROS2D.PolygonMarker.prototype.splitLine = function(obj) {\n  var index;\n  var line;\n  if (obj instanceof createjs.Shape) {\n      index = this.lineContainer.getChildIndex(obj);\n      line = obj;\n  } else {\n      index = obj;\n      line = this.lineContainer.getChildAt(index);\n  }\n  var numPoints = this.pointContainer.getNumChildren();\n  var xs = this.pointContainer.getChildAt(index).x;\n  var ys = this.pointContainer.getChildAt(index).y;\n  var xe = this.pointContainer.getChildAt((index + 1) % numPoints).x;\n  var ye = this.pointContainer.getChildAt((index + 1) % numPoints).y;\n  var xh = (xs + xe) / 2.0;\n  var yh = (ys + ye) / 2.0;\n  var pos = new ROSLIB.Vector3({ x: xh, y: -yh });\n\n  // Add a point in the center of the line to split\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChildAt(point, index + 1);\n  ++numPoints;\n\n  // Add a line between the new point and the end of the line to split\n  var lineNew = this.createLineShape(point, this.pointContainer.getChildAt((index + 2) % numPoints));\n  this.lineContainer.addChildAt(lineNew, index + 1);\n\n  // Set the endpoint of the line to split to the new point\n  this.editLineShape(line, this.pointContainer.getChildAt(index), point);\n\n  this.drawFill();\n};\n\n/**\n* Internal use only\n*/\nROS2D.PolygonMarker.prototype.drawFill = function() {\n  var numPoints = this.pointContainer.getNumChildren();\n  if (numPoints > 2) {\n      var g = this.fillShape.graphics;\n      g.clear();\n      g.setStrokeStyle(0);\n      g.moveTo(this.pointContainer.getChildAt(0).x, this.pointContainer.getChildAt(0).y);\n      g.beginStroke();\n      g.beginFill(this.fillColor);\n      for (var i = 1; i < numPoints; ++i) {\n          g.lineTo(this.pointContainer.getChildAt(i).x, this.pointContainer.getChildAt(i).y);\n      }\n      g.closePath();\n      g.endFill();\n      g.endStroke();\n  } else {\n      this.fillShape.graphics.clear();\n  }\n};\n\n\nROS2D.PolygonMarker.prototype.__proto__ = createjs.Container.prototype;\n\n/**\n* @author Bart van Vliet - bart@dobots.nl\n*/\n\n/**\n* A trace of poses, handy to see where a robot has been\n*\n* @constructor\n* @param options - object with following keys:\n*   * pose (optional) - the first pose of the trace\n*   * strokeSize (optional) - the size of the outline\n*   * strokeColor (optional) - the createjs color for the stroke\n*   * maxPoses (optional) - the maximum number of poses to keep, 0 for infinite\n*   * minDist (optional) - the minimal distance between poses to use the pose for drawing (default 0.05)\n*/\nROS2D.TraceShape = function(options) {\n  //  var that = this;\n  options = options || {};\n  var pose = options.pose;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  this.maxPoses = options.maxPoses || 100;\n  this.minDist = options.minDist || 0.05;\n\n  // Store minDist as the square of it\n  this.minDist = this.minDist * this.minDist;\n\n  // Array of the poses\n  // TODO: do we need this?\n  this.poses = [];\n\n  // Create the graphics\n  this.graphics = new createjs.Graphics();\n  this.graphics.setStrokeStyle(this.strokeSize);\n  this.graphics.beginStroke(this.strokeColor);\n\n  // Add first pose if given\n  if (pose !== null && typeof pose !== 'undefined') {\n      this.poses.push(pose);\n  }\n\n  // Create the shape\n  createjs.Shape.call(this, this.graphics);\n};\n\n/**\n* Adds a pose to the trace and updates the graphics\n*\n* @param pose of type ROSLIB.Pose\n*/\nROS2D.TraceShape.prototype.addPose = function(pose) {\n  var last = this.poses.length - 1;\n  if (last < 0) {\n      this.poses.push(pose);\n      this.graphics.moveTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n  } else {\n      var prevX = this.poses[last].position.x;\n      var prevY = this.poses[last].position.y;\n      var dx = (pose.position.x - prevX);\n      var dy = (pose.position.y - prevY);\n      if (dx * dx + dy * dy > this.minDist) {\n          this.graphics.lineTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n          this.poses.push(pose);\n      }\n  }\n  if (this.maxPoses > 0 && this.maxPoses < this.poses.length) {\n      this.popFront();\n  }\n};\n\n/**\n* Removes front pose and updates the graphics\n*/\nROS2D.TraceShape.prototype.popFront = function() {\n  if (this.poses.length > 0) {\n      this.poses.shift();\n      // TODO: shift drawing instructions rather than doing it all over\n      this.graphics.clear();\n      this.graphics.setStrokeStyle(this.strokeSize);\n      this.graphics.beginStroke(this.strokeColor);\n      this.graphics.lineTo(this.poses[0].position.x / this.scaleX, this.poses[0].position.y / -this.scaleY);\n      for (var i = 1; i < this.poses.length; ++i) {\n          this.graphics.lineTo(this.poses[i].position.x / this.scaleX, this.poses[i].position.y / -this.scaleY);\n      }\n  }\n};\n\nROS2D.TraceShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n* @author Bart van Vliet - bart@dobots.nl\n*/\n\n/**\n* Adds panning to a view\n*\n* @constructor\n* @param options - object with following keys:\n*   * rootObject (optional) - the root object to apply panning to\n*/\nROS2D.PanView = function(options) {\n  options = options || {};\n  this.rootObject = options.rootObject;\n\n  // get a handle to the stage\n  if (this.rootObject instanceof createjs.Stage) {\n      this.stage = this.rootObject;\n  } else {\n      this.stage = this.rootObject.getStage();\n  }\n\n  this.startPos = new ROSLIB.Vector3();\n};\n\n\nROS2D.PanView.prototype.startPan = function(startX, startY) {\n  this.startPos.x = startX;\n  this.startPos.y = startY;\n};\n\nROS2D.PanView.prototype.pan = function(curX, curY) {\n  this.stage.x += curX - this.startPos.x;\n  this.startPos.x = curX;\n  this.stage.y += curY - this.startPos.y;\n  this.startPos.y = curY;\n};\n\n/**\n* @author Russell Toris - rctoris@wpi.edu\n*/\n\n/**\n* A Viewer can be used to render an interactive 2D scene to a HTML5 canvas.\n*\n* @constructor\n* @param options - object with following keys:\n*   * divID - the ID of the div to place the viewer in\n*   * width - the initial width, in pixels, of the canvas\n*   * height - the initial height, in pixels, of the canvas\n*   * background (optional) - the color to render the background, like '#efefef'\n*/\nROS2D.Viewer = function(options) {\n  var that = this;\n  options = options || {};\n  var divID = options.divID;\n  this.width = options.width;\n  this.height = options.height;\n  var background = options.background || 'transparent';\n\n  // create the canvas to render to\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n  canvas.width = this.width;\n  canvas.height = this.height;\n  canvas.style.background = background;\n  // canvas.id = options.canvasID || \"mapCanvas\";//this has been added\n  document.getElementById(divID).appendChild(canvas);\n  // create the easel to use\n  this.scene = new createjs.Stage(canvas);\n\n  // change Y axis center\n  this.scene.y = this.height;\n\n  // add the renderer to the page\n  document.getElementById(divID).appendChild(canvas);\n\n  // update at 30fps\n  createjs.Ticker.setFPS(30);\n  createjs.Ticker.addEventListener('tick', this.scene);\n\n\n\n  //  var canvas = ctx.canvas ;\n  // var hRatio = canvas.width  / img.width    ;\n  // var vRatio =  canvas.height / img.height  ;\n  // var ratio  = Math.min ( hRatio, vRatio );\n  // var centerShift_x = ( canvas.width - img.width*ratio ) / 2;\n  // var centerShift_y = ( canvas.height - img.height*ratio ) / 2;  \n  // ctx.clearRect(0,0,canvas.width, canvas.height);\n  // ctx.drawImage(img, 0,0, img.width, img.height,\n  //                    centerShift_x,centerShift_y,img.width*ratio, img.height*ratio);\n};\n\n///Javascript prototype allows to add methods and objects to already existing methods so add one method having parameters width and heght access canvas context and boom you got scaling i guess\n\n/**\n* Add the given createjs object to the global scene in the viewer.\n*\n* @param object - the object to add\n*/\nROS2D.Viewer.prototype.addObject = function(object) {\n  this.scene.addChild(object);\n};\n\n/**\n* Scale the scene to fit the given width and height into the current canvas.\n*\n* @param width - the width to scale to in meters\n* @param height - the height to scale to in meters\n*/\nROS2D.Viewer.prototype.scaleToDimensions = function(width, height) {\n  // restore to values before shifting, if ocurred\n  console.log(width, height);\n  this.scene.x = typeof this.scene.x_prev_shift !== 'undefined' ? this.scene.x_prev_shift : this.scene.x;\n  this.scene.y = typeof this.scene.y_prev_shift !== 'undefined' ? this.scene.y_prev_shift : this.scene.y;\n\n  // save scene scaling\n  this.scene.scaleX = this.width / width;\n  this.scene.scaleY = this.height / height;\n\n\n  // console.log(this.scene.scaleX);\n  // console.log(this.scene.scaleY);\n};\n\n/**\n* Shift the main view of the canvas by the given amount. This is based on the\n* ROS coordinate system. That is, Y is opposite that of a traditional canvas.\n*\n* @param x - the amount to shift by in the x direction in meters\n* @param y - the amount to shift by in the y direction in meters\n*/\nROS2D.Viewer.prototype.shift = function(x, y) {\n  // var ratio  = Math.min ( this.scene.scaleX, this.scene.scaleY );\n  // save current offset\n  this.scene.x_prev_shift = this.scene.x;\n  this.scene.y_prev_shift = this.scene.y;\n  console.log(this.scene.x, this.scene.y, x, y)\n  // shift scene by scaling the desired offset\n  this.scene.x -= (x * this.scene.scaleX);\n  this.scene.y += (y * this.scene.scaleY);\n\n  //  var centerShift_x = ( this.scene.x - img.width*ratio ) / 2;\n  // var centerShift_y = ( canvas.height - img.height*ratio ) / 2;  \n  //ctx.clearRect(0,0,canvas.width, canvas.height);\n  //ctx.drawImage(img, 0,0, img.width, img.height,\n  //                 centerShift_x,centerShift_y,img.width*ratio, img.height*ratio);  \n};\n\n/**\n* @author Bart van Vliet - bart@dobots.nl\n*/\n\n/**\n* Adds zooming to a view\n*\n* @constructor\n* @param options - object with following keys:\n*   * rootObject (optional) - the root object to apply zoom to\n*   * minScale (optional) - minimum scale to set to preserve precision\n*/\nROS2D.ZoomView = function(options) {\n  options = options || {};\n  this.rootObject = options.rootObject;\n  this.minScale = options.minScale || 0.001;\n\n  // get a handle to the stage\n  if (this.rootObject instanceof createjs.Stage) {\n      this.stage = this.rootObject;\n  } else {\n      this.stage = this.rootObject.getStage();\n  }\n\n  this.center = new ROSLIB.Vector3();\n  this.startShift = new ROSLIB.Vector3();\n  this.startScale = new ROSLIB.Vector3();\n};\n\n\nROS2D.ZoomView.prototype.startZoom = function(centerX, centerY) {\n  this.center.x = centerX;\n  this.center.y = centerY;\n  this.startShift.x = this.stage.x;\n  this.startShift.y = this.stage.y;\n  this.startScale.x = this.stage.scaleX;\n  this.startScale.y = this.stage.scaleY;\n};\n\nROS2D.ZoomView.prototype.zoom = function(zoom) {\n  // Make sure scale doesn't become too small\n  if (this.startScale.x * zoom < this.minScale) {\n      zoom = this.minScale / this.startScale.x;\n  }\n  if (this.startScale.y * zoom < this.minScale) {\n      zoom = this.minScale / this.startScale.y;\n  }\n\n  this.stage.scaleX = this.startScale.x * zoom;\n  this.stage.scaleY = this.startScale.y * zoom;\n\n  this.stage.x = this.startShift.x - (this.center.x - this.startShift.x) * (this.stage.scaleX / this.startScale.x - 1);\n  this.stage.y = this.startShift.y - (this.center.y - this.startShift.y) * (this.stage.scaleY / this.startScale.y - 1);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}
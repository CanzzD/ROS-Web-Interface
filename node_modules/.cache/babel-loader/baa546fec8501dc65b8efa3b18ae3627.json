{"ast":null,"code":"var _jsxFileName = \"/Users/canozdemir/Downloads/web-based-navigation-rosbridge/src/components/Navigation.jsx\";\nimport React, { Component } from \"react\";\nimport NAV2D from \"./vendor/nav2d.js\";\nimport ROS2D from \"../../public/js/ros2d.js\";\nimport PropTypes from 'prop-types';\nimport ROSLIB from 'roslib';\nimport Config from \"../scripts/config.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass Navigation extends Component {\n  constructor() {\n    super();\n    //this.init_connection = this.view_map.bind(this);\n    this.state = {\n      ros: null\n    };\n    this.view_map = this.view_map.bind(this);\n  }\n  init_connection() {\n    //this.setState({ ros: new ROSLIB.Ros() });\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(\"Map:\" + this.state.ros);\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.log(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n      console.log(\"cannot connect to the WS robot. Try again after 1 second\");\n    }\n  }\n  componentDidMount() {\n    this.init_connection();\n    console.log(\"Map: componentDidMount\" + this.state.ros);\n    this.view_map();\n  }\n  view_map() {\n    // Create the main viewer.\n    const viewer = new ROS2D.Viewer({\n      divID: this.props.id,\n      width: this.props.width,\n      height: this.props.height\n    });\n\n    // Setup the nav client.\n    var nav = NAV2D.OccupancyGridClientNav({\n      ros: this.state.ros,\n      rootObject: viewer.scene,\n      topic: this.props.topic,\n      viewer: viewer,\n      serverName: \"/move_base\",\n      withOrientation: true\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: this.props.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n}\nNavigation.defaultProps = {\n  ros: new ROSLIB.Ros({\n    url: 'ws://localhost:9090'\n  }),\n  id: 'nav2d',\n  width: 500,\n  height: 500,\n  topic: '/map',\n  serverName: '/move_base'\n};\nNavigation.propTypes = {\n  ros: PropTypes.object,\n  id: PropTypes.string,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  topic: PropTypes.string,\n  serverName: PropTypes.string\n};\nexport default Navigation;","map":{"version":3,"names":["React","Component","NAV2D","ROS2D","PropTypes","ROSLIB","Config","jsxDEV","_jsxDEV","Fragment","_Fragment","Navigation","constructor","state","ros","view_map","bind","init_connection","window","Ros","console","log","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","componentDidMount","viewer","Viewer","divID","props","id","width","height","nav","OccupancyGridClientNav","rootObject","scene","topic","serverName","withOrientation","render","children","fileName","_jsxFileName","lineNumber","columnNumber","defaultProps","url","propTypes","object","string","number"],"sources":["/Users/canozdemir/Downloads/web-based-navigation-rosbridge/src/components/Navigation.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport NAV2D from \"./vendor/nav2d.js\";\nimport ROS2D from \"../../public/js/ros2d.js\";\nimport PropTypes from 'prop-types';\nimport ROSLIB from 'roslib'\nimport Config from \"../scripts/config.js\";\n\nclass Navigation extends Component {\n\n    state = {\n        ros: null,\n      };\n    \n      constructor() {\n        super();\n        //this.init_connection = this.view_map.bind(this);\n        this.view_map = this.view_map.bind(this);\n      }\n    \n      init_connection() {\n        //this.setState({ ros: new ROSLIB.Ros() });\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(\"Map:\" + this.state.ros);\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n          console.log(\"cannot connect to the WS robot. Try again after 1 second\");\n        }\n      }\n    \n      componentDidMount() {\n        this.init_connection();\n        console.log(\"Map: componentDidMount\" + this.state.ros);\n        this.view_map();\n      }\n    \n\n  view_map() {\n    // Create the main viewer.\n    const viewer = new ROS2D.Viewer({\n        divID: this.props.id,\n        width: this.props.width,\n        height: this.props.height\n      });\n  \n      // Setup the nav client.\n      var nav = NAV2D.OccupancyGridClientNav({\n        ros: this.state.ros,\n        rootObject: viewer.scene,\n        topic: this.props.topic,\n        viewer: viewer,\n        serverName: \"/move_base\",\n        withOrientation: true,\n      });\n\n  }\n\n  render() {\n    return (\n      <>\n        <div id={this.props.id} />\n      </>\n    );\n  }\n}\n\nNavigation.defaultProps = {\n  ros: new ROSLIB.Ros({\n    url: 'ws://localhost:9090'\n  }),\n  id: 'nav2d',\n  width: 500,\n  height: 500,\n  topic: '/map',\n  serverName: '/move_base'\n};\n\nNavigation.propTypes = {\n  ros: PropTypes.object,\n  id: PropTypes.string,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  topic: PropTypes.string,\n  serverName: PropTypes.string\n}\n\nexport default Navigation;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
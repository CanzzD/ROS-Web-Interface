{"ast":null,"code":"import 'latest-createjs';\nimport ROS2D from './ros2d';\nimport ROSLIB from 'roslib';\nimport createjs from 'createjs-module';\nimport Config from '../../scripts/config';\nvar NAV2D = NAV2D || {\n  REVISION: '0.5.0'\n};\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the URL of the image to render\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\nNAV2D.ImageMapClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  var image = options.image;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n  this.navigator = null;\n\n  // setup a client to get the map\n  var client = new ROS2D.ImageMapClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    topic: topic,\n    image: image\n  });\n  client.on('change', function () {\n    that.navigator = new NAV2D.Navigator({\n      ros: that.ros,\n      serverName: that.serverName,\n      actionName: that.actionName,\n      rootObject: that.rootObject,\n      withOrientation: that.withOrientation\n    });\n\n    // scale the viewer to fit the map\n    that.viewer.scaleToDimensions(client.currentImage.width, client.currentImage.height);\n    that.viewer.shift(client.currentImage.pose.position.x, client.currentImage.pose.position.y);\n  });\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\n/**\n * A navigator can be used to add click-to-navigate options to an object. If\n * withOrientation is set to true, the user can also specify the orientation of\n * the robot by clicking at the goal position and pointing into the desired\n * direction (while holding the button pressed).\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n */\n\nNAV2D.resizeMap = function (old_state, viewer, currentGrid) {\n  if (!old_state) {\n    old_state = {\n      width: currentGrid.width,\n      height: currentGrid.height,\n      x: currentGrid.pose.position.x,\n      y: currentGrid.pose.position.y\n    };\n    viewer.scaleToDimensions(currentGrid.width, currentGrid.height);\n    viewer.shift(currentGrid.pose.position.x, currentGrid.pose.position.y);\n  }\n  if (old_state.width !== currentGrid.width || old_state.height !== currentGrid.height) {\n    viewer.scaleToDimensions(currentGrid.width, currentGrid.height);\n    old_state.width = currentGrid.width;\n    old_state.height = currentGrid.height;\n  }\n  if (old_state.x !== currentGrid.pose.position.x || old_state.y !== currentGrid.pose.position.y) {\n    viewer.shift((currentGrid.pose.position.x - old_state.x) / 1, (currentGrid.pose.position.y - old_state.y) / 1);\n    old_state.x = currentGrid.pose.position.x;\n    old_state.y = currentGrid.pose.position.y;\n  }\n  return old_state;\n};\nNAV2D.Navigator = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var serverName = options.serverName || '/move_base';\n  var actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  var withOrientation = options.withOrientation || false;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // setup the actionlib client\n  var actionClient = new ROSLIB.ActionClient({\n    ros: ros,\n    actionName: actionName,\n    serverName: serverName\n  });\n\n  /**\n   * Send a goal to the navigation stack with the given pose.\n   *\n   * @param pose - the goal pose\n   */\n  function sendGoal(pose) {\n    // create a goal\n    var goal = new ROSLIB.Goal({\n      actionClient: actionClient,\n      goalMessage: {\n        target_pose: {\n          header: {\n            frame_id: Config.MAP_TOPIC_FOR_MAP_GOAL\n          },\n          pose: pose\n        }\n      }\n    });\n    goal.send();\n\n    // create a marker for the goal\n    var goalMarker = new ROS2D.NavigationArrow({\n      size: 5,\n      strokeSize: 5,\n      fillColor: createjs.Graphics.getRGB(255, 64, 128, 0.66),\n      pulse: true\n    });\n    goalMarker.x = pose.position.x;\n    goalMarker.y = -pose.position.y;\n    goalMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n    goalMarker.scaleX = 1.0 / stage.scaleX;\n    goalMarker.scaleY = 1.0 / stage.scaleY;\n    that.rootObject.addChild(goalMarker);\n    goal.on('result', function () {\n      that.rootObject.removeChild(goalMarker);\n    });\n  }\n\n  // get a handle to the stage\n  var stage;\n  if (that.rootObject instanceof createjs.Stage) {\n    stage = that.rootObject;\n  } else {\n    stage = that.rootObject.getStage();\n  }\n\n  // marker for the robot\n  var robotMarker = new ROS2D.NavigationArrow({\n    size: 25,\n    strokeSize: 1,\n    fillColor: createjs.Graphics.getRGB(255, 128, 0, 0.66),\n    pulse: true\n  });\n  // wait for a pose to come in first\n  robotMarker.visible = false;\n  this.rootObject.addChild(robotMarker);\n  var initScaleSet = false;\n\n  // setup a listener for the robot pose\n  var poseListener = new ROSLIB.Topic({\n    ros: ros,\n    name: '/robot_pose',\n    messageType: 'geometry_msgs/Pose',\n    throttle_rate: 100\n  });\n  poseListener.subscribe(function (pose) {\n    // update the robots position on the map\n    robotMarker.x = pose.position.x;\n    robotMarker.y = -pose.position.y;\n    if (!initScaleSet) {\n      robotMarker.scaleX = 1.0 / stage.scaleX;\n      robotMarker.scaleY = 1.0 / stage.scaleY;\n      initScaleSet = true;\n    }\n\n    // change the angle\n    robotMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n    robotMarker.visible = true;\n  });\n  if (withOrientation === false) {\n    // setup a double click listener (no orientation)\n    this.rootObject.addEventListener('dblclick', function (event) {\n      // convert to ROS coordinates\n      var coords = stage.globalToRos(event.stageX, event.stageY);\n      var pose = new ROSLIB.Pose({\n        position: new ROSLIB.Vector3(coords)\n      });\n      // send the goal\n      sendGoal(pose);\n    });\n  } else {\n    // withOrientation === true\n    // setup a click-and-point listener (with orientation)\n    var position = null;\n    var positionVec3 = null;\n    var thetaRadians = 0;\n    var thetaDegrees = 0;\n    var orientationMarker = null;\n    var mouseDown = false;\n    var xDelta = 0;\n    var yDelta = 0;\n    var mouseEventHandler = function (event, mouseState) {\n      if (mouseState === 'down') {\n        // get position when mouse button is pressed down\n        position = stage.globalToRos(event.stageX, event.stageY);\n        positionVec3 = new ROSLIB.Vector3(position);\n        mouseDown = true;\n      } else if (mouseState === 'move') {\n        // remove obsolete orientation marker\n        that.rootObject.removeChild(orientationMarker);\n        if (mouseDown === true) {\n          // if mouse button is held down:\n          // - get current mouse position\n          // - calulate direction between stored <position> and current position\n          // - place orientation marker\n          var currentPos = stage.globalToRos(event.stageX, event.stageY);\n          var currentPosVec3 = new ROSLIB.Vector3(currentPos);\n          orientationMarker = new ROS2D.NavigationArrow({\n            size: 25,\n            strokeSize: 1,\n            fillColor: createjs.Graphics.getRGB(0, 255, 0, 0.66),\n            pulse: true\n          });\n          xDelta = currentPosVec3.x - positionVec3.x;\n          yDelta = currentPosVec3.y - positionVec3.y;\n          thetaRadians = Math.atan2(xDelta, yDelta);\n          thetaDegrees = thetaRadians * (180.0 / Math.PI);\n          if (thetaDegrees >= 0 && thetaDegrees <= 180) {\n            thetaDegrees += 270;\n          } else {\n            thetaDegrees -= 90;\n          }\n          orientationMarker.x = positionVec3.x;\n          orientationMarker.y = -positionVec3.y;\n          orientationMarker.rotation = thetaDegrees;\n          orientationMarker.scaleX = 1.0 / stage.scaleX;\n          orientationMarker.scaleY = 1.0 / stage.scaleY;\n          that.rootObject.addChild(orientationMarker);\n        }\n      } else if (mouseDown) {\n        // mouseState === 'up'\n        // if mouse button is released\n        // - get current mouse position (goalPos)\n        // - calulate direction between stored <position> and goal position\n        // - set pose with orientation\n        // - send goal\n        mouseDown = false;\n        var goalPos = stage.globalToRos(event.stageX, event.stageY);\n        var goalPosVec3 = new ROSLIB.Vector3(goalPos);\n        xDelta = goalPosVec3.x - positionVec3.x;\n        yDelta = goalPosVec3.y - positionVec3.y;\n        thetaRadians = Math.atan2(xDelta, yDelta);\n        if (thetaRadians >= 0 && thetaRadians <= Math.PI) {\n          thetaRadians += 3 * Math.PI / 2;\n        } else {\n          thetaRadians -= Math.PI / 2;\n        }\n        var qz = Math.sin(-thetaRadians / 2.0);\n        var qw = Math.cos(-thetaRadians / 2.0);\n        var orientation = new ROSLIB.Quaternion({\n          x: 0,\n          y: 0,\n          z: qz,\n          w: qw\n        });\n        var pose = new ROSLIB.Pose({\n          position: positionVec3,\n          orientation: orientation\n        });\n        // send the goal\n        sendGoal(pose);\n      }\n    };\n    this.rootObject.addEventListener('stagemousedown', function (event) {\n      mouseEventHandler(event, 'down');\n    });\n    this.rootObject.addEventListener('stagemousemove', function (event) {\n      mouseEventHandler(event, 'move');\n    });\n    this.rootObject.addEventListener('stagemouseup', function (event) {\n      mouseEventHandler(event, 'up');\n    });\n  }\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\nNAV2D.OccupancyGridClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map';\n  var continuous = options.continuous;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n  this.navigator = null;\n\n  // setup a client to get the map\n  var client = new ROS2D.OccupancyGridClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    continuous: continuous,\n    topic: topic\n  });\n  client.on('change', function () {\n    that.navigator = new NAV2D.Navigator({\n      ros: that.ros,\n      serverName: that.serverName,\n      actionName: that.actionName,\n      rootObject: that.rootObject,\n      withOrientation: that.withOrientation\n    });\n\n    // scale the viewer to fit the map\n    that.viewer.scaleToDimensions(client.currentGrid.width, client.currentGrid.height);\n    that.viewer.shift(client.currentGrid.pose.position.x, client.currentGrid.pose.position.y);\n  });\n};\nexport default NAV2D;","map":{"version":3,"names":["ROS2D","ROSLIB","createjs","Config","NAV2D","REVISION","ImageMapClientNav","options","that","ros","topic","image","serverName","actionName","rootObject","Container","viewer","withOrientation","navigator","client","ImageMapClient","on","Navigator","scaleToDimensions","currentImage","width","height","shift","pose","position","x","y","resizeMap","old_state","currentGrid","actionClient","ActionClient","sendGoal","goal","Goal","goalMessage","target_pose","header","frame_id","MAP_TOPIC_FOR_MAP_GOAL","send","goalMarker","NavigationArrow","size","strokeSize","fillColor","Graphics","getRGB","pulse","rotation","stage","rosQuaternionToGlobalTheta","orientation","scaleX","scaleY","addChild","removeChild","Stage","getStage","robotMarker","visible","initScaleSet","poseListener","Topic","name","messageType","throttle_rate","subscribe","addEventListener","event","coords","globalToRos","stageX","stageY","Pose","Vector3","positionVec3","thetaRadians","thetaDegrees","orientationMarker","mouseDown","xDelta","yDelta","mouseEventHandler","mouseState","currentPos","currentPosVec3","Math","atan2","PI","goalPos","goalPosVec3","qz","sin","qw","cos","Quaternion","z","w","OccupancyGridClientNav","continuous","OccupancyGridClient"],"sources":["/Users/canozdemir/Downloads/web-based-navigation-rosbridge/src/components/vendor/nav2d.js"],"sourcesContent":["import 'latest-createjs'\nimport ROS2D from './ros2d'\nimport ROSLIB from 'roslib'\nimport createjs from 'createjs-module';\nimport Config from '../../scripts/config';\n\nvar NAV2D = NAV2D || {\n  REVISION: '0.5.0'\n};\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the URL of the image to render\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\nNAV2D.ImageMapClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  var image = options.image;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n\n  this.navigator = null;\n\n  // setup a client to get the map\n  var client = new ROS2D.ImageMapClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    topic: topic,\n    image: image\n  });\n  client.on('change', function () {\n    that.navigator = new NAV2D.Navigator({\n      ros: that.ros,\n      serverName: that.serverName,\n      actionName: that.actionName,\n      rootObject: that.rootObject,\n      withOrientation: that.withOrientation\n    });\n\n    // scale the viewer to fit the map\n    that.viewer.scaleToDimensions(client.currentImage.width, client.currentImage.height);\n    that.viewer.shift(client.currentImage.pose.position.x, client.currentImage.pose.position.y);\n  });\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\n/**\n * A navigator can be used to add click-to-navigate options to an object. If\n * withOrientation is set to true, the user can also specify the orientation of\n * the robot by clicking at the goal position and pointing into the desired\n * direction (while holding the button pressed).\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n */\n\n NAV2D.resizeMap = function(old_state, viewer, currentGrid) {\n  if(!old_state){\n    old_state = {\n      width: currentGrid.width,\n      height: currentGrid.height,\n      x: currentGrid.pose.position.x,\n      y: currentGrid.pose.position.y\n    };\n    viewer.scaleToDimensions(currentGrid.width, currentGrid.height);\n    viewer.shift(currentGrid.pose.position.x, currentGrid.pose.position.y);\n  }\n  if (old_state.width !== currentGrid.width || old_state.height !== currentGrid.height) {\n    viewer.scaleToDimensions(currentGrid.width, currentGrid.height);\n    old_state.width = currentGrid.width;\n    old_state.height = currentGrid.height;\n  }\n  if (old_state.x !== currentGrid.pose.position.x || old_state.y !== currentGrid.pose.position.y) {\n    viewer.shift((currentGrid.pose.position.x - old_state.x)/1, (currentGrid.pose.position.y - old_state.y)/1);\n    old_state.x = currentGrid.pose.position.x;\n    old_state.y = currentGrid.pose.position.y;\n  }\n  return old_state;\n};\n\nNAV2D.Navigator = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var serverName = options.serverName || '/move_base';\n  var actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  var withOrientation = options.withOrientation || false;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // setup the actionlib client\n  var actionClient = new ROSLIB.ActionClient({\n    ros: ros,\n    actionName: actionName,\n    serverName: serverName\n  });\n\n  /**\n   * Send a goal to the navigation stack with the given pose.\n   *\n   * @param pose - the goal pose\n   */\n  function sendGoal(pose) {\n    // create a goal\n    var goal = new ROSLIB.Goal({\n      actionClient: actionClient,\n      goalMessage: {\n        target_pose: {\n          header: {\n            frame_id: Config.MAP_TOPIC_FOR_MAP_GOAL\n          },\n          pose: pose\n        }\n      }\n    });\n    goal.send();\n\n    // create a marker for the goal\n    var goalMarker = new ROS2D.NavigationArrow({\n      size: 5,\n      strokeSize: 5,\n      fillColor: createjs.Graphics.getRGB(255, 64, 128, 0.66),\n      pulse: true\n    });\n    goalMarker.x = pose.position.x;\n    goalMarker.y = -pose.position.y;\n    goalMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n    goalMarker.scaleX = 1.0 / stage.scaleX;\n    goalMarker.scaleY = 1.0 / stage.scaleY;\n    that.rootObject.addChild(goalMarker);\n\n    goal.on('result', function () {\n      that.rootObject.removeChild(goalMarker);\n    });\n  }\n\n  // get a handle to the stage\n  var stage;\n  if (that.rootObject instanceof createjs.Stage) {\n    stage = that.rootObject;\n  } else {\n    stage = that.rootObject.getStage();\n  }\n\n  // marker for the robot\n  var robotMarker = new ROS2D.NavigationArrow({\n    size: 25,\n    strokeSize: 1,\n    fillColor: createjs.Graphics.getRGB(255, 128, 0, 0.66),\n    pulse: true\n  });\n  // wait for a pose to come in first\n  robotMarker.visible = false;\n  this.rootObject.addChild(robotMarker);\n  var initScaleSet = false;\n\n  // setup a listener for the robot pose\n  var poseListener = new ROSLIB.Topic({\n    ros: ros,\n    name: '/robot_pose',\n    messageType: 'geometry_msgs/Pose',\n    throttle_rate: 100\n  });\n  poseListener.subscribe(function (pose) {\n    // update the robots position on the map\n    robotMarker.x = pose.position.x;\n    robotMarker.y = -pose.position.y;\n    if (!initScaleSet) {\n      robotMarker.scaleX = 1.0 / stage.scaleX;\n      robotMarker.scaleY = 1.0 / stage.scaleY;\n      initScaleSet = true;\n    }\n\n    // change the angle\n    robotMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n\n    robotMarker.visible = true;\n  });\n\n  if (withOrientation === false) {\n    // setup a double click listener (no orientation)\n    this.rootObject.addEventListener('dblclick', function (event) {\n      // convert to ROS coordinates\n      var coords = stage.globalToRos(event.stageX, event.stageY);\n      var pose = new ROSLIB.Pose({\n        position: new ROSLIB.Vector3(coords)\n      });\n      // send the goal\n      sendGoal(pose);\n    });\n  } else { // withOrientation === true\n    // setup a click-and-point listener (with orientation)\n    var position = null;\n    var positionVec3 = null;\n    var thetaRadians = 0;\n    var thetaDegrees = 0;\n    var orientationMarker = null;\n    var mouseDown = false;\n    var xDelta = 0;\n    var yDelta = 0;\n\n    var mouseEventHandler = function (event, mouseState) {\n\n      if (mouseState === 'down') {\n        // get position when mouse button is pressed down\n        position = stage.globalToRos(event.stageX, event.stageY);\n        positionVec3 = new ROSLIB.Vector3(position);\n        mouseDown = true;\n      }\n      else if (mouseState === 'move') {\n        // remove obsolete orientation marker\n        that.rootObject.removeChild(orientationMarker);\n\n        if (mouseDown === true) {\n          // if mouse button is held down:\n          // - get current mouse position\n          // - calulate direction between stored <position> and current position\n          // - place orientation marker\n          var currentPos = stage.globalToRos(event.stageX, event.stageY);\n          var currentPosVec3 = new ROSLIB.Vector3(currentPos);\n\n          orientationMarker = new ROS2D.NavigationArrow({\n            size: 25,\n            strokeSize: 1,\n            fillColor: createjs.Graphics.getRGB(0, 255, 0, 0.66),\n            pulse: true\n          });\n\n          xDelta = currentPosVec3.x - positionVec3.x;\n          yDelta = currentPosVec3.y - positionVec3.y;\n\n          thetaRadians = Math.atan2(xDelta, yDelta);\n\n          thetaDegrees = thetaRadians * (180.0 / Math.PI);\n\n          if (thetaDegrees >= 0 && thetaDegrees <= 180) {\n            thetaDegrees += 270;\n          } else {\n            thetaDegrees -= 90;\n          }\n\n          orientationMarker.x = positionVec3.x;\n          orientationMarker.y = -positionVec3.y;\n          orientationMarker.rotation = thetaDegrees;\n          orientationMarker.scaleX = 1.0 / stage.scaleX;\n          orientationMarker.scaleY = 1.0 / stage.scaleY;\n\n          that.rootObject.addChild(orientationMarker);\n        }\n      } else if (mouseDown) { // mouseState === 'up'\n        // if mouse button is released\n        // - get current mouse position (goalPos)\n        // - calulate direction between stored <position> and goal position\n        // - set pose with orientation\n        // - send goal\n        mouseDown = false;\n\n        var goalPos = stage.globalToRos(event.stageX, event.stageY);\n\n        var goalPosVec3 = new ROSLIB.Vector3(goalPos);\n\n        xDelta = goalPosVec3.x - positionVec3.x;\n        yDelta = goalPosVec3.y - positionVec3.y;\n\n        thetaRadians = Math.atan2(xDelta, yDelta);\n\n        if (thetaRadians >= 0 && thetaRadians <= Math.PI) {\n          thetaRadians += (3 * Math.PI / 2);\n        } else {\n          thetaRadians -= (Math.PI / 2);\n        }\n\n        var qz = Math.sin(-thetaRadians / 2.0);\n        var qw = Math.cos(-thetaRadians / 2.0);\n\n        var orientation = new ROSLIB.Quaternion({ x: 0, y: 0, z: qz, w: qw });\n\n        var pose = new ROSLIB.Pose({\n          position: positionVec3,\n          orientation: orientation\n        });\n        // send the goal\n        sendGoal(pose);\n      }\n    };\n\n    this.rootObject.addEventListener('stagemousedown', function (event) {\n      mouseEventHandler(event, 'down');\n    });\n\n    this.rootObject.addEventListener('stagemousemove', function (event) {\n      mouseEventHandler(event, 'move');\n    });\n\n    this.rootObject.addEventListener('stagemouseup', function (event) {\n      mouseEventHandler(event, 'up');\n    });\n  }\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\nNAV2D.OccupancyGridClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map';\n  var continuous = options.continuous;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n\n  this.navigator = null;\n\n  // setup a client to get the map\n  var client = new ROS2D.OccupancyGridClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    continuous: continuous,\n    topic: topic\n  });\n  client.on('change', function () {\n    that.navigator = new NAV2D.Navigator({\n      ros: that.ros,\n      serverName: that.serverName,\n      actionName: that.actionName,\n      rootObject: that.rootObject,\n      withOrientation: that.withOrientation\n    });\n\n    // scale the viewer to fit the map\n    that.viewer.scaleToDimensions(client.currentGrid.width, client.currentGrid.height);\n    that.viewer.shift(client.currentGrid.pose.position.x, client.currentGrid.pose.position.y);\n  });\n};\n\nexport default NAV2D"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"version":3,"sources":["scripts/config.js","components/RobotState.jsx","components/Map.jsx","components/Connection.jsx","components/Teleoperation.jsx","components/Home.jsx","components/About.jsx","components/Body.jsx","components/Footer.jsx","components/Header.jsx","App.js","reportWebVitals.js","index.js"],"names":["Config","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","RECONNECTION_TIMER","CMD_VEL_TOPIC","ODOM_TOPIC","POSE_TOPIC","RobotState","state","ros","x","y","orientation","linear_velocity","angular_velocity","init_connection","this","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","error","getRobotState","Topic","name","messageType","subscribe","message","pose","position","toFixed","getOrientationFromQuaternion","twist","linear","angular","z","ros_orientation_quaternion","q","Three","w","setFromQuaternion","Math","PI","Row","Col","className","React","Component","Map","view_map","bind","viewer","ROS2D","Viewer","divID","width","height","NAV2D","OccupancyGridClientNav","rootObject","scene","serverName","withOrientation","id","Connection","Alert","variant","Teleoperation","handleMove","handleStop","event","cmd_vel","Message","publish","size","sticky","baseColor","stickColor","move","stop","Home","Container","About","Body","path","exact","component","Footer","Header","Navbar","bg","expand","collapseOnSelect","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2799f07a.chunk.js","sourcesContent":["const Config = {\n  ROSBRIDGE_SERVER_IP: \"10.211.55.4\",\n  ROSBRIDGE_SERVER_PORT: \"9090\",\n  RECONNECTION_TIMER: 3000,\n  CMD_VEL_TOPIC: \"/cmd_vel\",\n  ODOM_TOPIC: \"/odom\",\n  POSE_TOPIC: \"/amcl_pose\",\n};\n\nexport default Config;\n","import React, { Component } from \"react\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\nimport * as Three from \"three\";\n\nclass RobotState extends React.Component {\n    state = { \n        ros: null,\n        x: 0,\n        y: 0,\n        orientation: 0,\n        linear_velocity: 0,\n        angular_velocity: 0,\n    };\n\n    constructor() {\n        super();\n        this.init_connection();\n      }\n\n      init_connection() {\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n        \n        this.state.ros.on(\"connection\", () => {\n          console.log(\"connection established in Teleoperation Component!\");\n          this.setState({ connected: true});\n        });\n        this.state.ros.on(\"close\", () => {\n          console.log(\"connection is closed!\");\n          this.setState({ connected: false});\n    \n          setTimeout(() => {\n            try {\n              this.state.ros.connect(\n                \"ws://\" +\n                  Config.ROSBRIDGE_SERVER_IP +\n                  \":\" +\n                  Config.ROSBRIDGE_SERVER_PORT +\n                  \"\"\n              );\n            } catch (error) {\n              console.log(\"connection problem \");\n            }\n          }, Config.RECONNECTION_TIMER);\n        });\n    \n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n          console.log(\"connection problem \");\n        }\n      }\n\n      componentDidMount(){\n        this.getRobotState();\n      }\n    \n    getRobotState() {\n    //create a pose subscriber\n        var pose_subscriber = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.POSE_TOPIC,\n            messageType: \"geometry_msgs/PoseWithCovarianceStamped\",\n        }) \n\n    //create a pose callback\n    pose_subscriber.subscribe((message) => {\n      this.setState({ x: message.pose.pose.position.x.toFixed(2) });\n      this.setState({ y: message.pose.pose.position.y.toFixed(2) });\n      this.setState({\n        orientation: this.getOrientationFromQuaternion(\n          message.pose.pose.orientation\n        ).toFixed(2),\n      });\n    });\n\n    //create a subscriber for the velocities in the odom topic\n    var velocity_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.ODOM_TOPIC,\n      messageType: \"nav_msgs/Odometry\",\n    });\n\n    //callback function for the odom\n    velocity_subscriber.subscribe((message) => {\n      this.setState({\n        linear_velocity: message.twist.twist.linear.x.toFixed(2),\n      });\n      this.setState({\n        angular_velocity: message.twist.twist.angular.z.toFixed(2),\n      });\n    });\n  }\n\n  getOrientationFromQuaternion(ros_orientation_quaternion) {\n    var q = new Three.Quaternion(\n      ros_orientation_quaternion.x,\n      ros_orientation_quaternion.y,\n      ros_orientation_quaternion.z,\n      ros_orientation_quaternion.w\n    );\n    //convert this quaternion into Roll, Pitch and Yaw\n    var RPY = new Three.Euler().setFromQuaternion(q);\n\n    return RPY[\"_z\"] * (180 / Math.PI);\n  }\n\n    render () {\n        return (\n            <div>\n                <Row>\n                    <Col>\n                      <h4 className=\"mt-4\">Position</h4>\n                      <p className=\"mt-0\">x: {this.state.x}</p>\n                      <p className=\"mt-0\">y: {this.state.y}</p>\n                      <p className=\"mt-0\">Orientation: {this.state.orientation}</p>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                      <h4 className=\"mt-4\">Velocities</h4>\n                      <p className=\"mt-0\">Linear Velocity: {this.state.linear_velocity}</p>\n                      <p className=\"mt-0\">Angular Velocity: {this.state.angular_velocity}</p>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default RobotState","import React, { Component } from \"react\";\nimport Config from \"../scripts/config\";\n\nclass Map extends Component {\n  state = {\n    ros: null,\n  };\n\n  constructor() {\n    super();\n    //this.init_connection = this.view_map.bind(this);\n    this.view_map = this.view_map.bind(this);\n  }\n\n  init_connection() {\n    //this.setState({ ros: new ROSLIB.Ros() });\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(\"Map:\" + this.state.ros);\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"cannot connect to the WS robot. Try again after 1 second\");\n    }\n  }\n\n  componentDidMount() {\n    this.init_connection();\n    console.log(\"Map: componentDidMount\" + this.state.ros);\n    this.view_map();\n  }\n\n  view_map() {\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: 640,\n      height: 480,\n    });\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n      ros: this.state.ros,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      serverName: \"/move_base\",\n      withOrientation: true,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"nav_div\">Viewer</div>\n      </div>\n    );\n  }\n}\n\nexport default Map;","import Config from '../scripts/config';\nimport React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nclass Connection extends React.Component {\n  state = {connected: false, ros: null};\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n    \n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established!\");\n      this.setState({ connected: true});\n    });\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false});\n\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  render() {\n    return (\n        <div>\n            <Alert className=\"text-center m-3\" variant={this.state.connected? \"success\": \"danger\"}>\n              {this.state.connected? \"Robot Connected\": \"Robot Disconnected\"}\n            </Alert>\n        </div>\n    );\n  }\n}\n\nexport default Connection;\n","import React, { Component } from \"react\";\nimport Config from '../scripts/config';\nimport { Joystick } from 'react-joystick-component';\n\nclass Teleoperation extends Component {\n    state = {ros: null};\n\n    constructor() {\n        super();\n        this.init_connection();\n\n        this.handleMove = this.handleMove.bind(this);\n        this.handleStop = this.handleStop.bind(this);\n      }\n\n      init_connection() {\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n        \n        this.state.ros.on(\"connection\", () => {\n          console.log(\"connection established!\");\n          this.setState({ connected: true});\n        });\n        this.state.ros.on(\"close\", () => {\n          console.log(\"connection is closed!\");\n          this.setState({ connected: false});\n    \n          setTimeout(() => {\n            try {\n              this.state.ros.connect(\n                \"ws://\" +\n                  Config.ROSBRIDGE_SERVER_IP +\n                  \":\" +\n                  Config.ROSBRIDGE_SERVER_PORT +\n                  \"\"\n              );\n            } catch (error) {\n              console.log(\"connection problem \");\n            }\n          }, Config.RECONNECTION_TIMER);\n        });\n    \n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n          console.log(\"connection problem \");\n        }\n      }\n\n    handleMove(event) {\n        console.log(\"handle move\");\n        //we need create a ROS publisher on topic cmd_vel\n        var cmd_vel = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.CMD_VEL_TOPIC,\n            messageType: \"geometry_msgs/Twist\",\n        });\n        //we need to create a twist message to be to published rosbridge\n        var twist = new window.ROSLIB.Message({\n            linear: {\n                x: event.y / 50,\n                y: 0,\n                z: 0,\n            },\n            angular: {\n                x: 0,\n                y: 0,\n                z: -event.x / 50,\n            },\n        });\n        //we need to publish the message on the cmd_vel\n        cmd_vel.publish(twist);\n    }\n    handleStop(event) {\n        console.log(\"stop\");\n\n        //we need create a ROS publisher on topic cmd_vel\n        var cmd_vel = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.CMD_VEL_TOPIC,\n            messageType: \"geometry_msgs/Twist\",\n        });\n        //we need to create a twist message to be to published rosbridge\n        var twist = new window.ROSLIB.Message({\n            linear: {\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n            angular: {\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n        });\n        //we need to publish the message on the cmd_vel\n        cmd_vel.publish(twist);\n    }\n\n    render () {\n        return (\n          <div>\n            <Joystick \n              size={100} \n              sticky={true} \n              baseColor=\"#EEEEEE\" \n              stickColor=\"#BBBBBB\" \n              move={this.handleMove} \n              stop={this.handleStop}>\n            </Joystick>\n          </div>\n        )\n    }\n}\n\nexport default Teleoperation","import React from \"react\";\nimport RobotState from \"./RobotState\";\nimport Map from \"./Map\";\nimport Connection from \"./Connection\";\nimport Teleoperation from \"./Teleoperation\";\nimport {Row, Col, Container, Button} from \"react-bootstrap\";\n\nclass Home extends React.Component {\n    state = {};\n\n    render() {\n        return (\n        <main>\n          <Container>\n            <h1 className=\"text-center mt-3\">Robot Kontrol Sayfası</h1>\n            <Row>\n                <Col>\n                <Connection />\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                <Teleoperation />\n                </Col>\n                <Col>\n                <h1>MAP</h1>\n                <Map>/</Map>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                <RobotState />\n                </Col>\n                </Row>\n          </Container>\n        </main>);\n    }\n}\n\nexport default Home;","import React from \"react\";\n\nclass About extends React.Component {\n    state = {   };\n    render() {\n        return (\n        <div>\n            <h1>Hakkında</h1>\n            <p>Ros için Web Arayüz Çalışması</p>\n        </div>\n        );\n    }\n}\n\nexport default About;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport About from \"./About\";\n\nclass Body extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Router>\n          <Switch>\n            <Route path=\"/\" exact component={Home}></Route>\n            <Route path=\"/about\" exact component={About}></Route>\n          </Switch>\n        </Router>\n      </Container>\n    );\n  }\n}\n\nexport default Body;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <Container className=\"text-center\">\n        <p>BIRFEN ELECTRİC &copy; 2023</p>\n      </Container>\n    );\n  }\n}\n\nexport default Footer;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\" className=\"bg-body-tertiary\" collapseOnSelect>\n      <Container>\n        <Navbar.Brand href=\"#home\">React ROS Robot Arayüzü</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"me-auto\">\n            <Nav.Link href=\"/\">Anasayfa</Nav.Link>\n            <Nav.Link href=\"/About\">Hakkında</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n    );\n  }\n}\n\nexport default Header;\n","import Body from \"./components/Body\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport Home from \"./components/Home\";\nimport About from \"./components/About\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Body></Body>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./bootstrap/lux-bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}